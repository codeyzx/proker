// Flutter web plugin registrant file.
//
// Generated file. Do not edit.
//

// @dart = 2.13
// ignore_for_file: type=lint

import 'package:cloud_firestore_web/cloud_firestore_web.dart';
import 'package:file_picker/_internal/file_picker_web.dart';
import 'package:firebase_auth_web/firebase_auth_web.dart';
import 'package:firebase_core_web/firebase_core_web.dart';
import 'package:firebase_messaging_web/firebase_messaging_web.dart';
import 'package:firebase_storage_web/firebase_storage_web.dart';
import 'package:flutter_secure_storage_web/flutter_secure_storage_web.dart';
import 'package:google_sign_in_web/google_sign_in_web.dart';
import 'package:image_picker_for_web/image_picker_for_web.dart';
import 'package:permission_handler_html/permission_handler_html.dart';
import 'package:url_launcher_web/url_launcher_web.dart';
import 'package:flutter_web_plugins/flutter_web_plugins.dart';

void registerPlugins([final Registrar? pluginRegistrar]) {
  final Registrar registrar = pluginRegistrar ?? webPluginRegistrar;
  FirebaseFirestoreWeb.registerWith(registrar);
  FilePickerWeb.registerWith(registrar);
  FirebaseAuthWeb.registerWith(registrar);
  FirebaseCoreWeb.registerWith(registrar);
  FirebaseMessagingWeb.registerWith(registrar);
  FirebaseStorageWeb.registerWith(registrar);
  FlutterSecureStorageWeb.registerWith(registrar);
  GoogleSignInPlugin.registerWith(registrar);
  ImagePickerPlugin.registerWith(registrar);
  WebPermissionHandler.registerWith(registrar);
  UrlLauncherPlugin.registerWith(registrar);
  registrar.registerMessageHandler();
}
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyA9qo1Pj8FsB1ks3neH-ZuQ3_1Wnn_hDTc',
    appId: '1:108863604729:web:e8730d1ef7a3758509df28',
    messagingSenderId: '108863604729',
    projectId: 'proker-24178',
    authDomain: 'proker-24178.firebaseapp.com',
    storageBucket: 'proker-24178.firebasestorage.app',
    measurementId: 'G-JVV1CSCGF6',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyAK07QdeLSXcSoFWfQk5mbkc7tY_fKzGiE',
    appId: '1:368168566691:android:4711143d79189a0c022416',
    messagingSenderId: '368168566691',
    projectId: 'e-study-6f999',
    databaseURL: 'https://e-study-6f999-default-rtdb.firebaseio.com',
    storageBucket: 'e-study-6f999.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyArYT0_ufme7Uzgg_hDcNTmk3bbqn5eg2c',
    appId: '1:368168566691:ios:b1a92a682f276682022416',
    messagingSenderId: '368168566691',
    projectId: 'e-study-6f999',
    databaseURL: 'https://e-study-6f999-default-rtdb.firebaseio.com',
    storageBucket: 'e-study-6f999.appspot.com',
    iosBundleId: 'com.proker',
  );
}
import 'dart:io';

import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:hydrated_bloc/hydrated_bloc.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:intl/intl.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:proker/firebase_options.dart';
import 'package:proker/src/app.dart';
import 'package:proker/src/core/config/adapter/adapter_conf.dart';
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/core/utils/observer.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Request notification permission if it's not granted
  if (await Permission.notification.isDenied ||
      await Permission.notification.isPermanentlyDenied ||
      await Permission.notification.isRestricted ||
      await Permission.notification.isLimited) {
    await Permission.notification.request();
  }

  // Intl Setup
  await initializeDateFormatting(Platform.localeName);
  Intl.defaultLocale = Platform.localeName;

  // Orientation Setup
  await SystemChrome.setPreferredOrientations(
    [DeviceOrientation.portraitUp, DeviceOrientation.portraitDown],
  );

  await Future.wait([
    // Firebase Setup
    Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform),
    Hive.initFlutter(),
    getTemporaryDirectory().then((path) async {
      HydratedBloc.storage = await HydratedStorage.build(
        storageDirectory: path,
      );
    }),
  ]);

  // FirebaseNotificationProvider();

  // Background Service Setup
  // await getIt<BackgroundServiceClient>().initializeService();

  // Hive Adapter Setup
  configureAdapter();

  // Dependency Injection Setup
  configureDependencies();

  setup();

  Bloc.observer = AppBlocObserver();

  runApp(App());
}
/// GENERATED CODE - DO NOT MODIFY BY HAND
/// *****************************************************
///  FlutterGen
/// *****************************************************

// coverage:ignore-file
// ignore_for_file: type=lint
// ignore_for_file: directives_ordering,unnecessary_import,implicit_dynamic_list_literal,deprecated_member_use

import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_svg/flutter_svg.dart' as _svg;
import 'package:vector_graphics/vector_graphics.dart' as _vg;

class $AssetsFontsGen {
  const $AssetsFontsGen();

  /// File path: assets/fonts/Poppins-Bold.ttf
  String get poppinsBold => 'assets/fonts/Poppins-Bold.ttf';

  /// File path: assets/fonts/Poppins-BoldItalic.ttf
  String get poppinsBoldItalic => 'assets/fonts/Poppins-BoldItalic.ttf';

  /// File path: assets/fonts/Poppins-Italic.ttf
  String get poppinsItalic => 'assets/fonts/Poppins-Italic.ttf';

  /// File path: assets/fonts/Poppins-Medium.ttf
  String get poppinsMedium => 'assets/fonts/Poppins-Medium.ttf';

  /// List of all assets
  List<String> get values =>
      [poppinsBold, poppinsBoldItalic, poppinsItalic, poppinsMedium];
}

class $AssetsIconsGen {
  const $AssetsIconsGen();

  /// File path: assets/icons/ic_chat.svg
  SvgGenImage get icChat => const SvgGenImage('assets/icons/ic_chat.svg');

  /// File path: assets/icons/ic_event.svg
  SvgGenImage get icEvent => const SvgGenImage('assets/icons/ic_event.svg');

  /// File path: assets/icons/ic_feed.svg
  SvgGenImage get icFeed => const SvgGenImage('assets/icons/ic_feed.svg');

  /// File path: assets/icons/ic_filter.svg
  SvgGenImage get icFilter => const SvgGenImage('assets/icons/ic_filter.svg');

  /// File path: assets/icons/ic_home.svg
  SvgGenImage get icHome => const SvgGenImage('assets/icons/ic_home.svg');

  /// File path: assets/icons/ic_notif.svg
  SvgGenImage get icNotif => const SvgGenImage('assets/icons/ic_notif.svg');

  /// File path: assets/icons/ic_profile.svg
  SvgGenImage get icProfile => const SvgGenImage('assets/icons/ic_profile.svg');

  /// File path: assets/icons/ic_search.svg
  SvgGenImage get icSearch => const SvgGenImage('assets/icons/ic_search.svg');

  /// List of all assets
  List<SvgGenImage> get values =>
      [icChat, icEvent, icFeed, icFilter, icHome, icNotif, icProfile, icSearch];
}

class $AssetsImagesGen {
  const $AssetsImagesGen();

  /// File path: assets/images/app_logo.png
  AssetGenImage get appLogo =>
      const AssetGenImage('assets/images/app_logo.png');

  /// File path: assets/images/banner_pergerakan_1.png
  AssetGenImage get bannerPergerakan1 =>
      const AssetGenImage('assets/images/banner_pergerakan_1.png');

  /// File path: assets/images/banner_pergerakan_2.png
  AssetGenImage get bannerPergerakan2 =>
      const AssetGenImage('assets/images/banner_pergerakan_2.png');

  /// File path: assets/images/banner_proker_1.png
  AssetGenImage get bannerProker1 =>
      const AssetGenImage('assets/images/banner_proker_1.png');

  /// File path: assets/images/banner_proker_2.png
  AssetGenImage get bannerProker2 =>
      const AssetGenImage('assets/images/banner_proker_2.png');

  /// File path: assets/images/banner_proker_3.png
  AssetGenImage get bannerProker3 =>
      const AssetGenImage('assets/images/banner_proker_3.png');

  /// File path: assets/images/himakom_logo.png
  AssetGenImage get himakomLogo =>
      const AssetGenImage('assets/images/himakom_logo.png');

  /// List of all assets
  List<AssetGenImage> get values => [
        appLogo,
        bannerPergerakan1,
        bannerPergerakan2,
        bannerProker1,
        bannerProker2,
        bannerProker3,
        himakomLogo
      ];
}

class Assets {
  Assets._();

  static const $AssetsFontsGen fonts = $AssetsFontsGen();
  static const $AssetsIconsGen icons = $AssetsIconsGen();
  static const $AssetsImagesGen images = $AssetsImagesGen();
}

class AssetGenImage {
  const AssetGenImage(
    this._assetName, {
    this.size,
    this.flavors = const {},
  });

  final String _assetName;

  final Size? size;
  final Set<String> flavors;

  Image image({
    Key? key,
    AssetBundle? bundle,
    ImageFrameBuilder? frameBuilder,
    ImageErrorWidgetBuilder? errorBuilder,
    String? semanticLabel,
    bool excludeFromSemantics = false,
    double? scale,
    double? width,
    double? height,
    Color? color,
    Animation<double>? opacity,
    BlendMode? colorBlendMode,
    BoxFit? fit,
    AlignmentGeometry alignment = Alignment.center,
    ImageRepeat repeat = ImageRepeat.noRepeat,
    Rect? centerSlice,
    bool matchTextDirection = false,
    bool gaplessPlayback = true,
    bool isAntiAlias = false,
    String? package,
    FilterQuality filterQuality = FilterQuality.low,
    int? cacheWidth,
    int? cacheHeight,
  }) {
    return Image.asset(
      _assetName,
      key: key,
      bundle: bundle,
      frameBuilder: frameBuilder,
      errorBuilder: errorBuilder,
      semanticLabel: semanticLabel,
      excludeFromSemantics: excludeFromSemantics,
      scale: scale,
      width: width,
      height: height,
      color: color,
      opacity: opacity,
      colorBlendMode: colorBlendMode,
      fit: fit,
      alignment: alignment,
      repeat: repeat,
      centerSlice: centerSlice,
      matchTextDirection: matchTextDirection,
      gaplessPlayback: gaplessPlayback,
      isAntiAlias: isAntiAlias,
      package: package,
      filterQuality: filterQuality,
      cacheWidth: cacheWidth,
      cacheHeight: cacheHeight,
    );
  }

  ImageProvider provider({
    AssetBundle? bundle,
    String? package,
  }) {
    return AssetImage(
      _assetName,
      bundle: bundle,
      package: package,
    );
  }

  String get path => _assetName;

  String get keyName => _assetName;
}

class SvgGenImage {
  const SvgGenImage(
    this._assetName, {
    this.size,
    this.flavors = const {},
  }) : _isVecFormat = false;

  const SvgGenImage.vec(
    this._assetName, {
    this.size,
    this.flavors = const {},
  }) : _isVecFormat = true;

  final String _assetName;
  final Size? size;
  final Set<String> flavors;
  final bool _isVecFormat;

  _svg.SvgPicture svg({
    Key? key,
    bool matchTextDirection = false,
    AssetBundle? bundle,
    String? package,
    double? width,
    double? height,
    BoxFit fit = BoxFit.contain,
    AlignmentGeometry alignment = Alignment.center,
    bool allowDrawingOutsideViewBox = false,
    WidgetBuilder? placeholderBuilder,
    String? semanticsLabel,
    bool excludeFromSemantics = false,
    _svg.SvgTheme? theme,
    ColorFilter? colorFilter,
    Clip clipBehavior = Clip.hardEdge,
    @deprecated Color? color,
    @deprecated BlendMode colorBlendMode = BlendMode.srcIn,
    @deprecated bool cacheColorFilter = false,
  }) {
    final _svg.BytesLoader loader;
    if (_isVecFormat) {
      loader = _vg.AssetBytesLoader(
        _assetName,
        assetBundle: bundle,
        packageName: package,
      );
    } else {
      loader = _svg.SvgAssetLoader(
        _assetName,
        assetBundle: bundle,
        packageName: package,
        theme: theme,
      );
    }
    return _svg.SvgPicture(
      loader,
      key: key,
      matchTextDirection: matchTextDirection,
      width: width,
      height: height,
      fit: fit,
      alignment: alignment,
      allowDrawingOutsideViewBox: allowDrawingOutsideViewBox,
      placeholderBuilder: placeholderBuilder,
      semanticsLabel: semanticsLabel,
      excludeFromSemantics: excludeFromSemantics,
      colorFilter: colorFilter ??
          (color == null ? null : ColorFilter.mode(color, colorBlendMode)),
      clipBehavior: clipBehavior,
      cacheColorFilter: cacheColorFilter,
    );
  }

  String get path => _assetName;

  String get keyName => _assetName;
}
/// GENERATED CODE - DO NOT MODIFY BY HAND
/// *****************************************************
///  FlutterGen
/// *****************************************************

// coverage:ignore-file
// ignore_for_file: type=lint
// ignore_for_file: directives_ordering,unnecessary_import,implicit_dynamic_list_literal,deprecated_member_use

class FontFamily {
  FontFamily._();

  /// Font family: Poppins
  static const String poppins = 'Poppins';

  /// Font family: Urbanist
  static const String urbanist = 'Urbanist';
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:proker/src/core/blocs/theme/theme_bloc.dart';
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/core/config/router/app_router.dart';
import 'package:proker/src/core/config/themes/app_theme.dart';
import 'package:proker/src/core/constants/app_constants.dart';
import 'package:proker/src/features/auth/presentation/bloc/auth/auth_cubit.dart';

class App extends StatelessWidget {
  final _appRouter = AppRouter();

  App({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (context) => getIt<AuthCubit>(),
        ),
        BlocProvider(
          create: (context) => getIt<ThemeBloc>(),
        ),
      ],
      child: BlocBuilder<ThemeBloc, ThemeState>(
        builder: (_, state) {
          return GestureDetector(
            onTap: () {
              FocusManager.instance.primaryFocus?.unfocus();
            },
            child: ScreenUtil(
              options: const ScreenUtilOptions(
                enable: true,
                designSize: Size(390, 844),
                fontFactorByWidth: 2.0,
                fontFactorByHeight: 1.0,
                flipSizeWhenLandscape: true,
              ),
              child: MaterialApp.router(
                debugShowCheckedModeBanner: false,
                title: AppConstants.appTitle,
                theme: AppTheme.data(state.isDarkMode),
                routerConfig: _appRouter.config(),
              ),
            ),
          );
        },
      ),
    );
  }
}
class ApiException implements Exception {
  final String message;
  final String prefix;

  ApiException([this.message = "", this.prefix = ""]);

  @override
  String toString() {
    return "$prefix$message";
  }
}

class FetchDataException extends ApiException {
  FetchDataException(String message)
      : super(message, "Error During Communication: ");
}

class BadRequestException extends ApiException {
  BadRequestException(String message) : super(message, "Invalid Request: ");
}

class UnauthorizedException extends ApiException {
  UnauthorizedException(String message) : super(message, "Unauthorized: ");
}

class ForbiddenException extends ApiException {
  ForbiddenException(String message) : super(message, "Forbidden: ");
}

class NotFoundException extends ApiException {
  NotFoundException(String message) : super(message, "Not Found: ");
}

class InternalServerException extends ApiException {
  InternalServerException(String message) : super(message, "Internal Server: ");
}

class UnprocessableContentException extends ApiException {
  UnprocessableContentException(String message)
      : super(message, "Unprocessable Content: ");
}

class InvalidInputException extends ApiException {
  InvalidInputException(String message) : super(message, "Invalid Input: ");
}
import 'package:cloud_firestore/cloud_firestore.dart';

class ApiUrl {
  const ApiUrl._();

  static const baseUrl = "https://....com/api/v1";

  static final users = FirebaseFirestore.instance.collection("users");
  static final events = FirebaseFirestore.instance.collection("events");
}
import 'package:equatable/equatable.dart';
import 'package:hydrated_bloc/hydrated_bloc.dart';

part 'theme_event.dart';
part 'theme_state.dart';

class ThemeBloc extends HydratedBloc<ThemeEvent, ThemeState> {
  ThemeBloc() : super(const ThemeState(false)) {
    on<LightThemeEvent>(_lightTheme);
    on<DarkThemeEvent>(_darkTheme);
  }

  Future _lightTheme(LightThemeEvent event, Emitter emit) async {
    emit(const ThemeState(false));
  }

  Future _darkTheme(DarkThemeEvent event, Emitter emit) async {
    emit(const ThemeState(true));
  }

  @override
  ThemeState? fromJson(Map<String, dynamic> json) {
    return ThemeState.fromMap(json);
  }

  @override
  Map<String, dynamic>? toJson(ThemeState state) {
    return state.toMap();
  }
}
part of 'theme_bloc.dart';

sealed class ThemeEvent extends Equatable {
  const ThemeEvent();

  @override
  List<Object> get props => [];
}

class LightThemeEvent extends ThemeEvent {}

class DarkThemeEvent extends ThemeEvent {}
part of 'theme_bloc.dart';

class ThemeState extends Equatable {
  final bool isDarkMode;

  const ThemeState(this.isDarkMode);

  @override
  List<Object> get props => [isDarkMode];

  factory ThemeState.fromMap(Map<String, dynamic> map) {
    return ThemeState(
      map["isDarkMode"],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      "isDarkMode": isDarkMode,
    };
  }
}
import 'package:equatable/equatable.dart';
import 'package:hydrated_bloc/hydrated_bloc.dart';

part 'translate_event.dart';
part 'translate_state.dart';

class TranslateBloc extends HydratedBloc<TranslateEvent, TranslateState> {
  TranslateBloc() : super(const TranslateState("id", "ID", "EN")) {
    on<TrIndonesiaEvent>(_trIndonesia);
    on<TrEnglishEvent>(_trEnglish);
  }

  Future _trIndonesia(TrIndonesiaEvent event, Emitter emit) async {
    emit(TranslateState("id", "ID", state.countryCode));
  }

  Future _trEnglish(TrEnglishEvent event, Emitter emit) async {
    emit(TranslateState("en", "EN", state.countryCode));
  }

  @override
  TranslateState? fromJson(Map<String, dynamic> json) {
    return TranslateState.fromMap(json);
  }

  @override
  Map<String, dynamic>? toJson(TranslateState state) {
    return state.toMap();
  }
}
part of 'translate_bloc.dart';

sealed class TranslateEvent extends Equatable {
  const TranslateEvent();

  @override
  List<Object> get props => [];
}

class TrIndonesiaEvent extends TranslateEvent {}

class TrEnglishEvent extends TranslateEvent {}
part of 'translate_bloc.dart';

class TranslateState extends Equatable {
  final String languageCode;
  final String countryCode;
  final String previousCountryCode;

  const TranslateState(
    this.languageCode,
    this.countryCode,
    this.previousCountryCode,
  );

  @override
  List<Object> get props => [
        languageCode,
        countryCode,
        previousCountryCode,
      ];

  factory TranslateState.fromMap(Map<String, dynamic> map) {
    return TranslateState(
      map["language_code"],
      map["country_code"],
      map["previous_country_code"],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      "language_code": languageCode,
      "country_code": countryCode,
      "previous_country_code": previousCountryCode,
    };
  }
}
import 'package:hive_flutter/hive_flutter.dart';
import 'package:injectable/injectable.dart'; // Add this import
import 'package:proker/src/core/cache/local_storage.dart';
import 'package:proker/src/core/utils/logger.dart';

@injectable // Add this annotation
class HiveLocalStorage implements LocalStorage {
  @override
  Future<dynamic> load({required String key, String? boxName}) async {
    logger.e('Loading from Hive');
    await Hive.openBox(boxName!);
    final box = Hive.box(boxName);
    try {
      final result = await box.get(key);
      return result;
    } catch (_) {
      rethrow;
    } finally {
      box.close();
    }
  }

  @override
  Future<void> save({
    required String key,
    required dynamic value,
    String? boxName,
  }) async {
    await Hive.openBox(boxName!);
    final box = Hive.box(boxName);
    try {
      await box.put(key, value);

      return;
    } catch (_) {
      rethrow;
    } finally {
      box.close();
    }
  }

  @override
  Future<void> delete({required String key, String? boxName}) async {
    await Hive.openBox(boxName!);
    final box = Hive.box(boxName);
    try {
      await box.delete(key);
      return;
    } catch (_) {
      rethrow;
    } finally {
      box.close();
    }
  }
}
abstract class LocalStorage {
  Future<void> save({
    required String key,
    required dynamic value,
    String? boxName,
  });

  Future<dynamic> load({
    required String key,
    String? boxName,
  });

  Future<void> delete({
    required String key,
    String? boxName,
  });
}
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:injectable/injectable.dart';
import 'package:internet_connection_checker/internet_connection_checker.dart';
import 'package:proker/src/core/cache/local_storage.dart';
import 'package:proker/src/core/config/injection/injectable.dart';

@module
abstract class RegisterModule {
  @lazySingleton
  FlutterSecureStorage get flutterSecureStorage;

  @lazySingleton
  IOSOptions get iosOptions => const IOSOptions();

  @lazySingleton
  AndroidOptions get androidOptions => const AndroidOptions();

  @lazySingleton
  LinuxOptions get linuxOptions => const LinuxOptions();

  @lazySingleton
  WindowsOptions get windowsOptions => const WindowsOptions();

  @lazySingleton
  WebOptions get webOptions => const WebOptions();

  @lazySingleton
  MacOsOptions get macOsOptions => const MacOsOptions();

  @lazySingleton
  InternetConnectionChecker get connectionChecker =>
      InternetConnectionChecker();

  @lazySingleton
  LocalStorage get localStorage =>
      SecureLocalStorage(getIt<FlutterSecureStorage>());
}

@injectable
class SecureLocalStorage implements LocalStorage {
  final FlutterSecureStorage _storage;
  const SecureLocalStorage(this._storage);

  @override
  Future<String> load({required String key, String? boxName}) async {
    final result = await _storage.read(key: key);

    return result ?? "";
  }

  @override
  Future<void> save({
    required String key,
    required value,
    String? boxName,
  }) async {
    final result = await _storage.write(key: key, value: value);

    return result;
  }

  @override
  Future<void> delete({required String key, String? boxName}) async {
    await _storage.delete(key: key);

    return;
  }
}
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_firebase_chat_core/flutter_firebase_chat_core.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:injectable/injectable.dart';

@module
abstract class FBModule {
  @singleton
  FirebaseAuth get getFirebaseAuth => FirebaseAuth.instance;

  @singleton
  GoogleSignIn get getGoogleSignin => GoogleSignIn();

  @singleton
  FirebaseChatCore get getFirebaseChatCore => FirebaseChatCore.instance;
}
import 'package:flutter/material.dart';

class Loader extends StatelessWidget {
  const Loader({super.key});

  @override
  Widget build(BuildContext context) {
    return const Center(
      child: CircularProgressIndicator(),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class StatusBarWidget extends StatelessWidget {
  final Color color;
  final Brightness brightness;
  final Widget child;

  const StatusBarWidget({
    super.key,
    this.color = Colors.transparent,
    this.brightness = Brightness.light,
    required this.child,
  });

  @override
  Widget build(BuildContext context) {
    return AnnotatedRegion<SystemUiOverlayStyle>(
      value: SystemUiOverlayStyle(
        statusBarIconBrightness: brightness,
        statusBarColor: color,
        systemNavigationBarIconBrightness: brightness,
        systemNavigationBarColor: Colors.transparent,
      ),
      child: child,
    );
  }
}
export '../../../features/auth/data/models/adapter/user_adapter_model.dart';
import 'package:hive_flutter/hive_flutter.dart';

import 'package:proker/src/core/config/adapter/adapter.dart';

void configureAdapter() {
  Hive.registerAdapter(UserAdapter());
}
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// InjectableConfigGenerator
// **************************************************************************

// ignore_for_file: type=lint
// coverage:ignore-file

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:firebase_auth/firebase_auth.dart' as _i59;
import 'package:flutter_firebase_chat_core/flutter_firebase_chat_core.dart'
    as _i451;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i558;
import 'package:get_it/get_it.dart' as _i174;
import 'package:google_sign_in/google_sign_in.dart' as _i116;
import 'package:injectable/injectable.dart' as _i526;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i973;

import '../../../features/auth/data/datasources/auth_local_datasource.dart'
    as _i838;
import '../../../features/auth/data/datasources/auth_remote_datasource.dart'
    as _i1043;
import '../../../features/auth/data/repositories/auth_repository_impl.dart'
    as _i365;
import '../../../features/auth/domain/repositories/auth_repository.dart'
    as _i234;
import '../../../features/auth/domain/usecases/check_signin_status_usecase.dart'
    as _i619;
import '../../../features/auth/domain/usecases/login_usecase.dart' as _i849;
import '../../../features/auth/domain/usecases/logout_usecase.dart' as _i1;
import '../../../features/auth/domain/usecases/register_usecase.dart' as _i879;
import '../../../features/auth/presentation/bloc/auth/auth_cubit.dart' as _i32;
import '../../../features/chat/data/datasources/chat_datasource.dart' as _i759;
import '../../../features/chat/data/datasources/friend_datasource.dart'
    as _i1046;
import '../../../features/chat/data/datasources/room_datasource.dart' as _i994;
import '../../../features/chat/domain/repositories/chat_repository.dart'
    as _i75;
import '../../../features/chat/domain/repositories/friend_repository.dart'
    as _i291;
import '../../../features/chat/domain/repositories/room_repository.dart'
    as _i719;
import '../../../features/chat/presentation/bloc/friend/friend_cubit.dart'
    as _i892;
import '../../../features/chat/presentation/bloc/message/message_cubit.dart'
    as _i375;
import '../../../features/chat/presentation/bloc/room/room_cubit.dart' as _i517;
import '../../../features/event/data/datasources/event_local_datasource.dart'
    as _i476;
import '../../../features/event/data/datasources/event_remote_datasource.dart'
    as _i780;
import '../../../features/event/data/repositories/event_repository_impl.dart'
    as _i59;
import '../../../features/event/domain/repositories/event_repository.dart'
    as _i340;
import '../../../features/event/domain/usecases/create_event_usecase.dart'
    as _i534;
import '../../../features/event/domain/usecases/delete_event_usecase.dart'
    as _i883;
import '../../../features/event/domain/usecases/get_event_list_usecase.dart'
    as _i68;
import '../../../features/event/domain/usecases/update_event_usecase.dart'
    as _i441;
import '../../../features/event/presentation/bloc/event/event_cubit.dart'
    as _i20;
import '../../cache/hive_local_storage.dart' as _i252;
import '../../cache/local_storage.dart' as _i99;
import '../../cache/secure_local_storage.dart' as _i333;
import '../../common/infrastructure/fb_module.dart' as _i869;
import '../../network/network_info.dart' as _i408;

extension GetItInjectableX on _i174.GetIt {
// initializes the registration of main-scope dependencies inside of GetIt
  _i174.GetIt init({
    String? environment,
    _i526.EnvironmentFilter? environmentFilter,
  }) {
    final gh = _i526.GetItHelper(
      this,
      environment,
      environmentFilter,
    );
    final fBModule = _$FBModule();
    final registerModule = _$RegisterModule(this);
    gh.factory<_i252.HiveLocalStorage>(() => _i252.HiveLocalStorage());
    gh.singleton<_i59.FirebaseAuth>(() => fBModule.getFirebaseAuth);
    gh.singleton<_i116.GoogleSignIn>(() => fBModule.getGoogleSignin);
    gh.singleton<_i451.FirebaseChatCore>(() => fBModule.getFirebaseChatCore);
    gh.lazySingleton<_i558.IOSOptions>(() => registerModule.iosOptions);
    gh.lazySingleton<_i558.AndroidOptions>(() => registerModule.androidOptions);
    gh.lazySingleton<_i558.LinuxOptions>(() => registerModule.linuxOptions);
    gh.lazySingleton<_i558.WindowsOptions>(() => registerModule.windowsOptions);
    gh.lazySingleton<_i558.WebOptions>(() => registerModule.webOptions);
    gh.lazySingleton<_i558.MacOsOptions>(() => registerModule.macOsOptions);
    gh.lazySingleton<_i973.InternetConnectionChecker>(
        () => registerModule.connectionChecker);
    gh.lazySingleton<_i99.LocalStorage>(() => registerModule.localStorage);
    gh.lazySingleton<_i476.EventLocalDataSource>(
        () => _i476.EventLocalDataSourceImpl(gh<_i252.HiveLocalStorage>()));
    gh.singleton<_i75.ChatRepository>(
        () => _i759.ChatDatasource(gh<_i451.FirebaseChatCore>()));
    gh.lazySingleton<_i780.EventRemoteDataSource>(
        () => const _i780.EventRemoteDataSourceImpl());
    gh.singleton<_i719.RoomRepository>(
        () => _i994.RoomDatasource(gh<_i451.FirebaseChatCore>()));
    gh.lazySingleton<_i1043.AuthRemoteDataSource>(
        () => _i1043.AuthRemoteDataSourceImpl(
              gh<_i59.FirebaseAuth>(),
              gh<_i116.GoogleSignIn>(),
              gh<_i451.FirebaseChatCore>(),
            ));
    gh.singleton<_i291.FriendRepository>(
        () => _i1046.FriendDatasource(gh<_i451.FirebaseChatCore>()));
    gh.factory<_i517.RoomCubit>(
        () => _i517.RoomCubit(gh<_i719.RoomRepository>()));
    gh.singleton<_i408.NetworkInfo>(
        () => _i408.NetworkInfoImpl(gh<_i973.InternetConnectionChecker>()));
    gh.lazySingleton<_i558.FlutterSecureStorage>(
        () => registerModule.flutterSecureStorage);
    gh.factory<_i375.MessageCubit>(
        () => _i375.MessageCubit(gh<_i75.ChatRepository>()));
    gh.factory<_i333.SecureLocalStorage>(
        () => _i333.SecureLocalStorage(gh<_i558.FlutterSecureStorage>()));
    gh.lazySingleton<_i838.AuthLocalDataSource>(
        () => _i838.AuthLocalDataSourceImpl(
              gh<_i333.SecureLocalStorage>(),
              gh<_i252.HiveLocalStorage>(),
            ));
    gh.lazySingleton<_i340.EventRepository>(() => _i59.EventRepositoryImpl(
          gh<_i780.EventRemoteDataSource>(),
          gh<_i476.EventLocalDataSource>(),
          gh<_i408.NetworkInfo>(),
          gh<_i252.HiveLocalStorage>(),
        ));
    gh.factory<_i892.FriendCubit>(
        () => _i892.FriendCubit(gh<_i291.FriendRepository>()));
    gh.lazySingleton<_i234.AuthRepository>(() => _i365.AuthRepositoryImpl(
          gh<_i1043.AuthRemoteDataSource>(),
          gh<_i838.AuthLocalDataSource>(),
          gh<_i333.SecureLocalStorage>(),
          gh<_i252.HiveLocalStorage>(),
        ));
    gh.lazySingleton<_i619.AuthCheckSignInStatusUseCase>(
        () => _i619.AuthCheckSignInStatusUseCase(gh<_i234.AuthRepository>()));
    gh.lazySingleton<_i849.AuthLoginUseCase>(
        () => _i849.AuthLoginUseCase(gh<_i234.AuthRepository>()));
    gh.lazySingleton<_i1.AuthLogoutUseCase>(
        () => _i1.AuthLogoutUseCase(gh<_i234.AuthRepository>()));
    gh.lazySingleton<_i879.AuthRegisterUseCase>(
        () => _i879.AuthRegisterUseCase(gh<_i234.AuthRepository>()));
    gh.lazySingleton<_i32.AuthCubit>(() => _i32.AuthCubit(
          gh<_i849.AuthLoginUseCase>(),
          gh<_i1.AuthLogoutUseCase>(),
          gh<_i879.AuthRegisterUseCase>(),
          gh<_i619.AuthCheckSignInStatusUseCase>(),
        ));
    gh.lazySingleton<_i534.CreateEventUseCase>(
        () => _i534.CreateEventUseCase(gh<_i340.EventRepository>()));
    gh.lazySingleton<_i883.DeleteEventUseCase>(
        () => _i883.DeleteEventUseCase(gh<_i340.EventRepository>()));
    gh.lazySingleton<_i68.GetEventListUseCase>(
        () => _i68.GetEventListUseCase(gh<_i340.EventRepository>()));
    gh.lazySingleton<_i441.UpdateEventUseCase>(
        () => _i441.UpdateEventUseCase(gh<_i340.EventRepository>()));
    gh.factory<_i20.EventCubit>(() => _i20.EventCubit(
          gh<_i534.CreateEventUseCase>(),
          gh<_i883.DeleteEventUseCase>(),
          gh<_i68.GetEventListUseCase>(),
          gh<_i441.UpdateEventUseCase>(),
        ));
    return this;
  }
}

class _$FBModule extends _i869.FBModule {}

class _$RegisterModule extends _i333.RegisterModule {
  _$RegisterModule(this._getIt);

  final _i174.GetIt _getIt;

  @override
  _i558.FlutterSecureStorage get flutterSecureStorage =>
      _i558.FlutterSecureStorage(
        iOptions: _getIt<_i558.IOSOptions>(),
        aOptions: _getIt<_i558.AndroidOptions>(),
        lOptions: _getIt<_i558.LinuxOptions>(),
        wOptions: _getIt<_i558.WindowsOptions>(),
        webOptions: _getIt<_i558.WebOptions>(),
        mOptions: _getIt<_i558.MacOsOptions>(),
      );
}
import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/blocs/theme/theme_bloc.dart';
import 'package:proker/src/core/config/injection/injectable.config.dart';

final getIt = GetIt.instance;

@InjectableInit(
  initializerName: 'init', // default
  preferRelativeImports: true, // default
  asExtension: true, // default
)
void configureDependencies() => getIt.init();

void setup() {
  getIt.registerFactory<ThemeBloc>(() => ThemeBloc());
}

import 'package:flutter/foundation.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    show
        AndroidInitializationSettings,
        AndroidNotificationDetails,
        FlutterLocalNotificationsPlugin,
        Importance,
        InitializationSettings,
        NotificationDetails,
        NotificationResponse,
        Priority;
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/core/utils/logger.dart';

class LocalNotificationProvider {
  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin =
      getIt<FlutterLocalNotificationsPlugin>();

  LocalNotificationProvider();

  Future<void> init() async {
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('ic_bg_service_small');
    const InitializationSettings initializationSettings =
        InitializationSettings(android: initializationSettingsAndroid);
    await _flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (response) async {
        if (kDebugMode) {
          logger.d('Notification clicked with id ${response.id}');
        }
        if (response.payload != null) {
          if (response.payload == 'open_location_service_setting') {
            // GoRouter.of(navigatorKey.currentState!.context).go('/settings');
            logger.d('Open location service setting');
          } else if (response.payload == 'open_sos_service') {
            // GoRouter.of(navigatorKey.currentState!.context).go('/profile');
            logger.d('Open SOS service');
          } else {
            logger.d('Open map with jamaah_id: ${response.payload}');
          }
        }
      },
      onDidReceiveBackgroundNotificationResponse:
          _localNotificationBackgroundHandler,
    );
  }

  static Future<void> _localNotificationBackgroundHandler(
      NotificationResponse response) async {
    if (kDebugMode) {
      logger.d('Notification clicked with id ${response.id}');
    }
    if (response.payload != null) {
      if (response.payload == 'open_location_service_setting') {
        // GoRouter.of(navigatorKey.currentState!.context).go('/settings');
        logger.d('Open location service setting');
      } else if (response.payload == 'open_sos_service') {
        // GoRouter.of(navigatorKey.currentState!.context).go('/profile');
        logger.d('Open SOS service');
      } else {
        logger.d('Open map with jamaah_id: ${response.payload}');
      }
    }
  }

  Future<void> showNotification({
    required String title,
    required String body,
    String? payload,
  }) async {
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      'channel_id',
      'channel_name',
      channelDescription: 'your channel description',
      icon: '@mipmap/ic_launcher',
      importance: Importance.max,
      priority: Priority.high,
    );
    const NotificationDetails platformChannelSpecifics =
        NotificationDetails(android: androidPlatformChannelSpecifics);
    await _flutterLocalNotificationsPlugin.show(
      0,
      title,
      body,
      platformChannelSpecifics,
      payload: payload,
    );
  }

  Future<void> cancelNotification(int id) async {
    await _flutterLocalNotificationsPlugin.cancel(id);
  }
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_chat_types/flutter_chat_types.dart';
import 'package:proker/src/features/auth/presentation/pages/reset_password_page.dart';
import 'package:proker/src/features/auth/presentation/pages/sign_in_page.dart';
import 'package:proker/src/features/auth/presentation/pages/sign_up_page.dart';
import 'package:proker/src/features/chat/presentation/pages/chat/chat_page.dart';
import 'package:proker/src/features/chat/presentation/pages/friends/friends_page.dart';
import 'package:proker/src/features/chat/presentation/pages/room/room_page.dart';
import 'package:proker/src/features/event/presentation/pages/create_event_page.dart';
import 'package:proker/src/features/event/presentation/pages/event_list_page.dart';
import 'package:proker/src/features/event/presentation/pages/event_page.dart';
import 'package:proker/src/features/home/presentation/home_page.dart';
import 'package:proker/src/features/home/presentation/profile_page.dart';
import 'package:proker/src/features/home/presentation/splash_page.dart';
import 'package:proker/src/features/home/presentation/widgets/tab_page.dart';

part 'app_router.gr.dart';

@AutoRouterConfig()
class AppRouter extends RootStackRouter {
  @override
  List<AutoRoute> get routes => [
        AutoRoute(
          page: TabRoute.page,
          children: [
            AutoRoute(page: HomeRoute.page),
            AutoRoute(page: EventRoute.page),
            AutoRoute(page: HomeRoute.page),
            AutoRoute(page: ProfileRoute.page),
          ],
        ),
        AutoRoute(page: SplashRoute.page, initial: true),
        AutoRoute(page: SignInRoute.page),
        AutoRoute(page: SignUpRoute.page),
        AutoRoute(page: ResetPasswordRoute.page),
        AutoRoute(page: FriendRoute.page),
        AutoRoute(page: ChatRoute.page),
        AutoRoute(page: RoomRoute.page),
        AutoRoute(page: EventListRoute.page),
        AutoRoute(page: CreateEventRoute.page),
      ];
}
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// AutoRouterGenerator
// **************************************************************************

// ignore_for_file: type=lint
// coverage:ignore-file

part of 'app_router.dart';

/// generated route for
/// [ChatPage]
class ChatRoute extends PageRouteInfo<ChatRouteArgs> {
  ChatRoute({
    Key? key,
    required Room room,
    List<PageRouteInfo>? children,
  }) : super(
          ChatRoute.name,
          args: ChatRouteArgs(
            key: key,
            room: room,
          ),
          initialChildren: children,
        );

  static const String name = 'ChatRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      final args = data.argsAs<ChatRouteArgs>();
      return ChatPage(
        key: args.key,
        room: args.room,
      );
    },
  );
}

class ChatRouteArgs {
  const ChatRouteArgs({
    this.key,
    required this.room,
  });

  final Key? key;

  final Room room;

  @override
  String toString() {
    return 'ChatRouteArgs{key: $key, room: $room}';
  }
}

/// generated route for
/// [CreateEventPage]
class CreateEventRoute extends PageRouteInfo<void> {
  const CreateEventRoute({List<PageRouteInfo>? children})
      : super(
          CreateEventRoute.name,
          initialChildren: children,
        );

  static const String name = 'CreateEventRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const CreateEventPage();
    },
  );
}

/// generated route for
/// [EventListPage]
class EventListRoute extends PageRouteInfo<void> {
  const EventListRoute({List<PageRouteInfo>? children})
      : super(
          EventListRoute.name,
          initialChildren: children,
        );

  static const String name = 'EventListRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const EventListPage();
    },
  );
}

/// generated route for
/// [EventPage]
class EventRoute extends PageRouteInfo<void> {
  const EventRoute({List<PageRouteInfo>? children})
      : super(
          EventRoute.name,
          initialChildren: children,
        );

  static const String name = 'EventRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const EventPage();
    },
  );
}

/// generated route for
/// [FriendPage]
class FriendRoute extends PageRouteInfo<void> {
  const FriendRoute({List<PageRouteInfo>? children})
      : super(
          FriendRoute.name,
          initialChildren: children,
        );

  static const String name = 'FriendRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const FriendPage();
    },
  );
}

/// generated route for
/// [HomePage]
class HomeRoute extends PageRouteInfo<void> {
  const HomeRoute({List<PageRouteInfo>? children})
      : super(
          HomeRoute.name,
          initialChildren: children,
        );

  static const String name = 'HomeRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const HomePage();
    },
  );
}

/// generated route for
/// [ProfilePage]
class ProfileRoute extends PageRouteInfo<void> {
  const ProfileRoute({List<PageRouteInfo>? children})
      : super(
          ProfileRoute.name,
          initialChildren: children,
        );

  static const String name = 'ProfileRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const ProfilePage();
    },
  );
}

/// generated route for
/// [ResetPasswordPage]
class ResetPasswordRoute extends PageRouteInfo<void> {
  const ResetPasswordRoute({List<PageRouteInfo>? children})
      : super(
          ResetPasswordRoute.name,
          initialChildren: children,
        );

  static const String name = 'ResetPasswordRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const ResetPasswordPage();
    },
  );
}

/// generated route for
/// [RoomPage]
class RoomRoute extends PageRouteInfo<void> {
  const RoomRoute({List<PageRouteInfo>? children})
      : super(
          RoomRoute.name,
          initialChildren: children,
        );

  static const String name = 'RoomRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const RoomPage();
    },
  );
}

/// generated route for
/// [SignInPage]
class SignInRoute extends PageRouteInfo<SignInRouteArgs> {
  SignInRoute({
    Key? key,
    List<PageRouteInfo>? children,
  }) : super(
          SignInRoute.name,
          args: SignInRouteArgs(key: key),
          initialChildren: children,
        );

  static const String name = 'SignInRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      final args =
          data.argsAs<SignInRouteArgs>(orElse: () => const SignInRouteArgs());
      return SignInPage(key: args.key);
    },
  );
}

class SignInRouteArgs {
  const SignInRouteArgs({this.key});

  final Key? key;

  @override
  String toString() {
    return 'SignInRouteArgs{key: $key}';
  }
}

/// generated route for
/// [SignUpPage]
class SignUpRoute extends PageRouteInfo<void> {
  const SignUpRoute({List<PageRouteInfo>? children})
      : super(
          SignUpRoute.name,
          initialChildren: children,
        );

  static const String name = 'SignUpRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const SignUpPage();
    },
  );
}

/// generated route for
/// [SplashPage]
class SplashRoute extends PageRouteInfo<void> {
  const SplashRoute({List<PageRouteInfo>? children})
      : super(
          SplashRoute.name,
          initialChildren: children,
        );

  static const String name = 'SplashRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const SplashPage();
    },
  );
}

/// generated route for
/// [TabPage]
class TabRoute extends PageRouteInfo<void> {
  const TabRoute({List<PageRouteInfo>? children})
      : super(
          TabRoute.name,
          initialChildren: children,
        );

  static const String name = 'TabRoute';

  static PageInfo page = PageInfo(
    name,
    builder: (data) {
      return const TabPage();
    },
  );
}
import 'dart:ui';

class AppColors {
  static const primary = Color(0xFF04339B);
  static const primaryDarker = Color(0xFF00227B);
  static const primaryTransparent = Color(0xFFF6E7EA);

  static const bgDark = Color(0xFF000000);
  static const bgWhite = Color(0xFFFFFFFF);
  static const bgDefault = Color(0xFFFDFDFD);
  static const background = Color(0xFFF5F5F5);

  static const text = Color(0xFF212121);
  static const textLight = Color(0xFFBFBFBF);
  static const textDark = Color(0xFF303030);
  static const textWhite = Color(0xFFFFFFFF);
  static const textBlack = Color(0xFF000000);
  static const textGrey = Color(0xFF8B8B8B);
  static const textRed = Color(0xFFFF2D2D);

  static const inputFocus = Color(0xFF303030);
  static const inputBorder = Color(0xFFBFBFBF);
  static const inputError = Color(0xFFFF2D2D);
  static const inputLabel = Color(0xFF303030);
  static const inputHint = Color(0xFFBFBFBF);

  static const cardBorder = Color(0xFFBFBFBF);

  static const border = Color(0xFFEAEAEA);

  static const buttonPrimary = Color(0xFF557f33);
  static const buttonDisabled = Color(0xFFA0A0A0);

  static const greenTransparent = Color(0xFFF3F9ED);

  static const alertSuccessBorder = Color(0xFF8BC34A);
  static const alertSuccess = Color(0xFFF3F9ED);
  static const alertError = Color(0xFFFF2D2D);

  static const yellowTransparent = Color(0xFFFEF6E9);
  static const yellow = Color(0xFFF9A825);

  static const alertWarningBorder = Color(0xFFF9A825);
  static const alertWarning = Color(0xFFFEF6E9);
  static const alertDarkBorder = Color(0xFF303030);
  static const alertDark = Color(0xFFEAEAEA);

  static const locationRing = Color(0xFF5470F2);
}
import 'package:flutter/material.dart';
import 'package:proker/src/core/config/themes/app_colors.dart';

class AppBorderStyles {
  static OutlineInputBorder inputBorder = OutlineInputBorder(
    borderRadius: BorderRadius.circular(12.0),
    borderSide: const BorderSide(color: AppColors.inputBorder),
  );

  static OutlineInputBorder inputFocusedBorder = OutlineInputBorder(
    borderRadius: BorderRadius.circular(12.0),
    borderSide: const BorderSide(color: AppColors.inputFocus),
  );

  static OutlineInputBorder inputEnabledBorder = OutlineInputBorder(
    borderRadius: BorderRadius.circular(12.0),
    borderSide: const BorderSide(color: AppColors.inputBorder),
  );

  static OutlineInputBorder inputErrorBorder = OutlineInputBorder(
    borderRadius: BorderRadius.circular(12.0),
    borderSide: const BorderSide(color: AppColors.inputError),
  );

  static TextStyle hintTextStyle = const TextStyle(
    fontFamily: 'Manrope',
    fontSize: 14,
    color: AppColors.inputHint,
    fontWeight: FontWeight.w500,
  );
}
import 'package:flutter/material.dart';
import 'package:proker/src/core/config/themes/app_colors.dart';
import 'package:proker/src/core/constants/app_constants.dart';

class AppTextStyles {
  static TextStyle title = const TextStyle(
    fontFamily: AppConstants.defaultFontFamily,
    fontSize: 16,
    fontWeight: FontWeight.w500,
    color: AppColors.textDark,
  );

  static TextStyle inputHeader = const TextStyle(
    fontFamily: AppConstants.defaultFontFamily,
    fontWeight: FontWeight.w700,
    color: AppColors.textDark,
    fontSize: 14,
  );

  static TextStyle inputHeaderRed = const TextStyle(
    fontFamily: AppConstants.defaultFontFamily,
    fontWeight: FontWeight.w600,
    color: AppColors.alertError,
    fontSize: 15,
  );

  static TextStyle inputLabel = const TextStyle(
    fontFamily: AppConstants.defaultFontFamily,
    fontSize: 14,
    color: AppColors.inputLabel,
  );

  static TextStyle body = const TextStyle(
    fontFamily: AppConstants.defaultFontFamily,
    fontSize: 13,
    color: AppColors.textGrey,
  );
}
import 'package:flutter/material.dart';
import 'package:proker/src/core/config/themes/app_colors.dart';

class AppTheme {
  AppTheme._();

  static ThemeData data(bool isDark) {
    return ThemeData(
      useMaterial3: true,
      colorScheme: const ColorScheme.light(
        primary: AppColors.primary,
        secondary: AppColors.primaryDarker,
        error: AppColors.textRed,
        surfaceTint: Colors.transparent,
      ),
      progressIndicatorTheme: const ProgressIndicatorThemeData(
        circularTrackColor: Color(0xFFE0E0E0),
        color: AppColors.primary,
      ),
      dividerColor: Colors.transparent,
      fontFamily: 'Poppins',
      appBarTheme: const AppBarTheme(
        backgroundColor: Colors.white,
        centerTitle: true,
        surfaceTintColor: Colors.transparent,
        titleTextStyle: TextStyle(
          fontFamily: 'Poppins',
          color: AppColors.textBlack,
          fontSize: 18,
          fontWeight: FontWeight.w600,
        ),
      ),
      iconTheme: const IconThemeData(
        color: Colors.white,
      ),
      scaffoldBackgroundColor: Colors.white,
      textTheme: const TextTheme(
        titleLarge: TextStyle(
            fontSize: 18, fontWeight: FontWeight.w600, color: Colors.red),
        bodyLarge: TextStyle(
            fontSize: 14, fontWeight: FontWeight.w600, color: Colors.black),
        bodyMedium: TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: AppColors.textBlack),
        labelLarge: TextStyle(
            fontSize: 14, fontWeight: FontWeight.w600, color: Colors.blue),
      ),
      bottomNavigationBarTheme: const BottomNavigationBarThemeData(
        elevation: 1,
        backgroundColor: Colors.white,
        selectedItemColor: AppColors.primary,
        unselectedItemColor: Colors.grey,
        showUnselectedLabels: true,
        showSelectedLabels: true,
      ),
    );
  }
}
class AppConstants {
  // App
  static const String appTitle = 'Proker Hub';

  // App Config
  static const String defaultFontFamilyLightMode = 'Manrope';
  static const String defaultFontFamilyDarkMode = 'Manrope';
  static const String defaultFontFamily = 'Manrope';

  static const noConnectionErrorMessage = 'Not connected to a network!';
}

const noElement = "Bad state: No element";
class ServerException implements Exception {}

class CacheException implements Exception {}

class AuthException implements Exception {}

class EmptyException implements Exception {}

class DuplicateEmailException implements Exception {}

class CustomFirebaseAuthException implements Exception {
  final String message;
  CustomFirebaseAuthException(this.message);
}
import 'package:equatable/equatable.dart';

sealed class Failure extends Equatable {
  @override
  List<Object> get props => [];
}

class ServerFailure extends Failure {}

class CacheFailure extends Failure {}

class EmptyFailure extends Failure {}

class CredentialFailure extends Failure {}

class DuplicateEmailFailure extends Failure {}

class PasswordNotMatchFailure extends Failure {}

class InvalidEmailFailure extends Failure {}

class InvalidPasswordFailure extends Failure {}

class FirebaseAuthFailure extends Failure {
  final String message;
  FirebaseAuthFailure(this.message);

  @override
  List<Object> get props => [message];
}
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:internet_connection_checker/internet_connection_checker.dart';

import 'package:proker/src/core/errors/failures.dart';

typedef EitherNetwork<T> = Future<Either<Failure, T>> Function();

abstract class NetworkInfo {
  Future<Either<Failure, T>> check<T>({
    required EitherNetwork<T> connected,
    required EitherNetwork<T> notConnected,
  });

  Future<bool> get checkIsConnected;
  bool get getIsConnected;
  set setIsConnected(bool val);
}

@Singleton(as: NetworkInfo)
class NetworkInfoImpl implements NetworkInfo {
  final InternetConnectionChecker _connectionChecker;

  bool _isConnected = true;

  NetworkInfoImpl(this._connectionChecker);

  @override
  Future<Either<Failure, T>> check<T>({
    required EitherNetwork<T> connected,
    required EitherNetwork<T> notConnected,
  }) async {
    final isConnected = await checkIsConnected;
    if (isConnected) {
      return connected.call();
    } else {
      return notConnected.call();
    }
  }

  @override
  Future<bool> get checkIsConnected async =>
      await _connectionChecker.hasConnection;

  @override
  set setIsConnected(bool val) => _isConnected = val;

  @override
  bool get getIsConnected => _isConnected;
}
import 'package:equatable/equatable.dart';
import 'package:fpdart/fpdart.dart';

import 'package:proker/src/core/errors/failures.dart';

abstract class UseCase<T, Params> {
  Future<Either<Failure, T>> call(Params params);
}

class NoParams extends Equatable {
  @override
  List<Object> get props => [];
}
import 'package:proker/src/core/errors/failures.dart';

String mapFailureToMessage(Failure failure) {
  switch (failure.runtimeType) {
    case const (ServerFailure):
      return "Server Failure";
    case const (CacheFailure):
      return "Cache Failure";
    case const (EmptyFailure):
      return "Empty Failure";
    case const (CredentialFailure):
      return "Wrong Email or Password";
    case const (DuplicateEmailFailure):
      return "Email already taken";
    case const (PasswordNotMatchFailure):
      return "Password not match";
    case const (InvalidEmailFailure):
      return "Invalid email format";
    case const (InvalidPasswordFailure):
      return "Invalid password format";
    case const (FirebaseAuthFailure):
      return (failure as FirebaseAuthFailure).message;
    default:
      return "Unexpected error";
  }
}
import 'package:logger/logger.dart';

var logger = Logger(
  filter: null,
  output: null,
  printer: PrettyPrinter(
    methodCount: 0,
    errorMethodCount: 8,
    lineLength: 120,
    colors: true,
    printEmojis: true,
  ),
);
import 'package:flutter_bloc/flutter_bloc.dart';

import 'package:proker/src/core/utils/logger.dart';

class AppBlocObserver extends BlocObserver {
  @override
  void onError(BlocBase bloc, Object error, StackTrace stackTrace) {
    logger.e(error);
    super.onError(bloc, error, stackTrace);
  }

  @override
  void onChange(BlocBase bloc, Change change) {
    logger.d(change.currentState);
    logger.d(change.nextState);
    super.onChange(bloc, change);
  }
}
class RegexValidator {
  RegexValidator._();

  static final email = RegExp(r"^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$");
  static final password = RegExp(r"^(?=.*[a-zA-Z])(?=.*\d)[a-zA-Z\d]+$");
}
import 'package:flutter/material.dart';

void showSnackBar(BuildContext context, Color color, String content) {
  ScaffoldMessenger.of(context)
    ..hideCurrentSnackBar()
    ..showSnackBar(
      SnackBar(
        content: Text(content),
        backgroundColor: color,
      ),
    );
}
import 'package:proker/src/core/utils/regex_validator.dart';

extension StringValidatorExtension on String {
  bool get isEmailValid => RegexValidator.email.hasMatch(this);
  bool get isPasswordValid => RegexValidator.password.hasMatch(this);
}
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/cache/hive_local_storage.dart';
import 'package:proker/src/core/cache/secure_local_storage.dart';
import 'package:proker/src/core/errors/exceptions.dart';
import 'package:proker/src/core/utils/logger.dart';
import 'package:proker/src/features/auth/domain/entities/user_entity.dart';

sealed class AuthLocalDataSource {
  Future<UserEntity> checkSignInStatus();
}

@LazySingleton(as: AuthLocalDataSource)
class AuthLocalDataSourceImpl implements AuthLocalDataSource {
  final SecureLocalStorage _secureLocalStorage;
  final HiveLocalStorage _localStorage;
  const AuthLocalDataSourceImpl(
    this._secureLocalStorage,
    this._localStorage,
  );

  @override
  Future<UserEntity> checkSignInStatus() async {
    try {
      final userId = await _secureLocalStorage.load(key: "user_id");
      final result = await _localStorage.load(key: "user", boxName: "cache");
      if (result != null && userId.isNotEmpty) {
        if (result is UserEntity) {
          return result;
        }
      }

      throw CacheException();
    } catch (e) {
      logger.e(e);
      throw CacheException();
    }
  }
}
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_firebase_chat_core/flutter_firebase_chat_core.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/api/api_url.dart';
import 'package:proker/src/core/constants/app_constants.dart';
import 'package:proker/src/core/errors/exceptions.dart';
import 'package:proker/src/core/utils/logger.dart';
import 'package:proker/src/features/auth/data/models/login_model.dart';
import 'package:proker/src/features/auth/data/models/register_model.dart';
import 'package:proker/src/features/auth/data/models/user_model.dart';

@factoryMethod
sealed class AuthRemoteDataSource {
  Future<UserModel> login(LoginModel model);
  Future<void> logout();
  Future<UserModel> register(RegisterModel model);
}

@LazySingleton(as: AuthRemoteDataSource)
class AuthRemoteDataSourceImpl implements AuthRemoteDataSource {
  AuthRemoteDataSourceImpl(this.fbAuth, this.googleSignIn, this.fbChatCore);
  final FirebaseAuth fbAuth;
  final GoogleSignIn googleSignIn;
  final FirebaseChatCore fbChatCore;

  @override
  Future<UserModel> login(LoginModel model) async {
    try {
      final userCred = await fbAuth.signInWithEmailAndPassword(
        email: model.email ?? '',
        password: model.password ?? '',
      );
      final userResult = userCred.user;
      if (userResult == null) {
        logger.e('User not found.');
        throw CustomFirebaseAuthException('User not found.');
      }

      final user = await _getUserByEmail(model.email ?? '');
      return user;
    } on FirebaseAuthException catch (e) {
      switch (e.code) {
        case 'user-not-found':
          throw CustomFirebaseAuthException(
              'There is no user corresponding to this email address.');
        case 'wrong-password':
          throw CustomFirebaseAuthException(
              'The password is invalid for the provided email address.');
        case 'invalid-email':
          throw CustomFirebaseAuthException('The email address is not valid.');
        case 'user-disabled':
          throw CustomFirebaseAuthException(
              'The user account has been disabled by an administrator.');
        case 'too-many-requests':
          throw CustomFirebaseAuthException(
              'Too many requests. Try again later.');
        case 'operation-not-allowed':
          throw CustomFirebaseAuthException(
              'Operation not allowed. Please enable it in the Firebase console.');
        case 'invalid-credential':
          throw CustomFirebaseAuthException(
              'The provided credential is invlid or malformed.');
        case 'account-exists-with-different-credential':
          throw CustomFirebaseAuthException(
              'The account exists with a different sign-in method.');
        case 'credential-already-in-use':
          throw CustomFirebaseAuthException(
              'The credential is already associated with a different user account.');
        default:
          throw CustomFirebaseAuthException(
              e.message ?? 'An unknown error occurred.');
      }
    } on EmptyException {
      throw AuthException();
    } catch (e) {
      logger.e("Error: $e");
      if (e.toString() == noElement) {
        throw AuthException();
      }
      throw ServerException();
    }
  }

  @override
  Future<void> logout() async {
    try {
      await FirebaseAuth.instance.signOut();
      return;
    } catch (e) {
      logger.e(e);
      throw ServerException();
    }
  }

  @override
  Future<UserModel> register(RegisterModel model) async {
    try {
      final userCred = await fbAuth.createUserWithEmailAndPassword(
        email: model.email ?? '',
        password: model.password ?? '',
      );

      final user = userCred.user;
      if (user == null) throw CustomFirebaseAuthException('User not found.');

      await _registerUserToFirestore(user, name: model.name);
      return UserModel(
        id: user.uid,
        email: user.email ?? '',
        name: model.name ?? user.displayName ?? '',
        firstName: model.name ?? user.displayName ?? '',
        lastName: '',
        imageUrl: user.photoURL ?? 'https://i.pravatar.cc/300',
        role: 'user',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        lastSeen: DateTime.now(),
      );
    } on FirebaseAuthException catch (e) {
      switch (e.code) {
        case 'email-already-in-use':
          throw CustomFirebaseAuthException(
              'The email address is already in use by another account.');
        case 'invalid-email':
          throw CustomFirebaseAuthException('The email address is not valid.');
        case 'weak-password':
          throw CustomFirebaseAuthException('The password is too weak.');
        case 'operation-not-allowed':
          throw CustomFirebaseAuthException(
              'Operation not allowed. Please enable it in the Firebase console.');
        case 'invalid-credential':
          throw CustomFirebaseAuthException(
              'The provided credential is invalid or malformed.');
        case 'account-exists-with-different-credential':
          throw CustomFirebaseAuthException(
              'The account exists with a different sign-in method.');
        case 'credential-already-in-use':
          throw CustomFirebaseAuthException(
              'The credential is already associated with a different user account.');
        default:
          throw CustomFirebaseAuthException(
              e.message ?? 'An unknown error occurred.');
      }
    } on DuplicateEmailException {
      rethrow;
    } catch (e) {
      logger.e(e);
      throw ServerException();
    }
  }

  Future<UserModel> _getUserByEmail(String email) async {
    try {
      final result = await ApiUrl.users.where("email", isEqualTo: email).get();
      final doc = result.docs.first;
      final user = UserModel.fromJson(doc.data(), doc.id);

      return user;
    } catch (e) {
      if (e.toString() == noElement) {
        throw EmptyException();
      }
      logger.e(e);
      throw ServerException();
    }
  }

  Future<void> _registerUserToFirestore(User user, {String? name}) async {
    await ApiUrl.users.doc(user.uid).set({
      "email": user.email,
      "name": name ?? user.displayName,
      "firstName": name ?? user.displayName,
      "lastName": "",
      "imageUrl": user.photoURL ?? 'https://i.pravatar.cc/300',
      "role": "user",
      "createdAt": FieldValue.serverTimestamp(),
      "updatedAt": FieldValue.serverTimestamp(),
      "lastSeen": FieldValue.serverTimestamp(),
    });
  }
}
import 'package:proker/src/features/auth/domain/entities/user_entity.dart';

class LoginModel extends UserEntity {
  const LoginModel({
    required String email,
    required String password,
  }) : super(email: email, password: password);

  LoginModel copyWith({String? email, String? password}) {
    return LoginModel(
      email: email ?? (this.email ?? ""),
      password: password ?? (this.password ?? ""),
    );
  }
}
import 'package:proker/src/features/auth/domain/entities/user_entity.dart';

class RegisterModel extends UserEntity {
  const RegisterModel({
    required String name,
    required String email,
    required String password,
  }) : super(
          name: name,
          email: email,
          password: password,
        );

  RegisterModel copyWith({
    String? name,
    String? email,
    String? password,
  }) {
    return RegisterModel(
      name: name ?? (this.name ?? ""),
      email: email ?? (this.email ?? ""),
      password: password ?? (this.password ?? ""),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      "name": name,
      "email": email,
      "password": password,
    };
  }
}
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:proker/src/features/auth/domain/entities/user_entity.dart';

class UserModel extends UserEntity {
  const UserModel({
    required String id,
    required String email,
    required String name,
    required String firstName,
    required String lastName,
    required String imageUrl,
    required String role,
    required DateTime createdAt,
    required DateTime updatedAt,
    required DateTime lastSeen,
  }) : super(
          id: id,
          email: email,
          name: name,
          firstName: firstName,
          lastName: lastName,
          imageUrl: imageUrl,
          role: role,
          createdAt: createdAt,
          updatedAt: updatedAt,
          lastSeen: lastSeen,
        );

  factory UserModel.fromJson(Map<String, dynamic> json, String id) {
    return UserModel(
      id: id,
      email: json["email"],
      name: json["name"],
      firstName: json["firstName"],
      lastName: json["lastName"],
      imageUrl: json["imageUrl"],
      role: json["role"],
      createdAt: UserEntity.fromMillis(json["createdAt"]) ?? DateTime.now(),
      updatedAt: UserEntity.fromMillis(json["updatedAt"]) ?? DateTime.now(),
      lastSeen: UserEntity.fromMillis(json["lastSeen"]) ?? DateTime.now(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      "email": email,
      "name": name,
      "firstName": firstName,
      "lastName": lastName,
      "imageUrl": imageUrl,
      "role": role,
      "createdAt": createdAtMillis(),
      "updatedAt": updatedAtMillis(),
      "lastSeen": lastSeenMillis(),
    };
  }

  static DateTime fromMillis(dynamic millis) {
    if (millis is Timestamp) {
      return millis.toDate();
    } else if (millis is int) {
      return DateTime.fromMillisecondsSinceEpoch(millis);
    }
    return DateTime.now();
  }
}
import 'package:hive_flutter/hive_flutter.dart';
import 'package:proker/src/features/auth/data/models/user_model.dart';

class UserAdapter extends TypeAdapter<UserModel> {
  @override
  final typeId = 0;

  @override
  UserModel read(BinaryReader reader) {
    final data = reader.readList();

    return UserModel(
      id: data[0] as String? ?? '',
      email: data[1] as String? ?? '',
      name: data[2] as String? ?? '',
      firstName: data[3] as String? ?? '',
      lastName: data[4] as String? ?? '',
      imageUrl: data[5] as String? ?? '',
      role: data[6] as String? ?? '',
      createdAt: UserModel.fromMillis(data[7] as int?),
      updatedAt: UserModel.fromMillis(data[8] as int?),
      lastSeen: UserModel.fromMillis(data[9] as int?),
    );
  }

  @override
  void write(BinaryWriter writer, UserModel obj) {
    writer.writeList([
      obj.id,
      obj.email,
      obj.name,
      obj.firstName,
      obj.lastName,
      obj.imageUrl,
      obj.role,
      obj.createdAtMillis(),
      obj.updatedAtMillis(),
      obj.lastSeenMillis(),
    ]);
  }
}
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/cache/hive_local_storage.dart';
import 'package:proker/src/core/cache/secure_local_storage.dart';
import 'package:proker/src/core/errors/exceptions.dart';
import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/features/auth/data/datasources/auth_local_datasource.dart';
import 'package:proker/src/features/auth/data/datasources/auth_remote_datasource.dart';
import 'package:proker/src/features/auth/data/models/login_model.dart';
import 'package:proker/src/features/auth/data/models/register_model.dart';
import 'package:proker/src/features/auth/domain/entities/user_entity.dart';
import 'package:proker/src/features/auth/domain/repositories/auth_repository.dart';
import 'package:proker/src/features/auth/domain/usecases/usecase_params.dart';

@LazySingleton(as: AuthRepository)
class AuthRepositoryImpl implements AuthRepository {
  final AuthRemoteDataSource _authRemoteDataSource;
  final AuthLocalDataSource _authLocalDataSource;
  final SecureLocalStorage _secureLocalStorage;
  final HiveLocalStorage _localStorage;
  const AuthRepositoryImpl(
    this._authRemoteDataSource,
    this._authLocalDataSource,
    this._secureLocalStorage,
    this._localStorage,
  );

  @override
  Future<Either<Failure, UserEntity>> login(LoginParams params) async {
    try {
      final model = LoginModel(
        email: params.email,
        password: params.password,
      );

      final result = await _authRemoteDataSource.login(model);

      await _secureLocalStorage.save(key: "user_id", value: result.id);
      await _localStorage.save(key: "user", value: result, boxName: "cache");

      return Right(result);
    } on CustomFirebaseAuthException catch (e) {
      return Left(FirebaseAuthFailure(e.message));
    } on AuthException {
      return Left(CredentialFailure());
    } on ServerException {
      return Left(ServerFailure());
    }
  }

  @override
  Future<Either<Failure, void>> logout() async {
    try {
      final result = await _authRemoteDataSource.logout();

      await _secureLocalStorage.delete(key: "user_id");
      await _localStorage.delete(key: "user", boxName: "cache");

      return Right(result);
    } on ServerException {
      return Left(ServerFailure());
    }
  }

  @override
  Future<Either<Failure, UserEntity>> register(RegisterParams params) async {
    try {
      final model = RegisterModel(
        name: params.name,
        email: params.email,
        password: params.password,
      );

      final result = await _authRemoteDataSource.register(model);

      await _secureLocalStorage.save(key: "user_id", value: result.id);
      await _localStorage.save(key: "user", value: result, boxName: "cache");

      return Right(result);
    } on CustomFirebaseAuthException catch (e) {
      return Left(FirebaseAuthFailure(e.message));
    } on DuplicateEmailException {
      return Left(DuplicateEmailFailure());
    } on ServerException {
      return Left(ServerFailure());
    }
  }

  @override
  Future<Either<Failure, UserEntity>> checkSignInStatus() async {
    try {
      final result = await _authLocalDataSource.checkSignInStatus();

      return Right(result);
    } on CacheException {
      return Left(CacheFailure());
    }
  }
}
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';

class UserEntity extends Equatable {
  final String? id;
  final String? name;
  final String? email;
  final String? firstName;
  final String? lastName;
  final String? imageUrl;
  final String? role;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final DateTime? lastSeen;
  final String? password;
  const UserEntity({
    this.id,
    this.name,
    this.email,
    this.firstName,
    this.lastName,
    this.imageUrl,
    this.role,
    this.createdAt,
    this.updatedAt,
    this.lastSeen,
    this.password,
  });

  int? createdAtMillis() => createdAt?.millisecondsSinceEpoch;
  int? updatedAtMillis() => updatedAt?.millisecondsSinceEpoch;
  int? lastSeenMillis() => lastSeen?.millisecondsSinceEpoch;

  static DateTime? fromMillis(dynamic millis) {
    if (millis is Timestamp) {
      return millis.toDate();
    } else if (millis is int) {
      return DateTime.fromMillisecondsSinceEpoch(millis);
    }
    return null;
  }

  @override
  List<Object?> get props => [
        id,
        name,
        email,
        firstName,
        lastName,
        imageUrl,
        role,
        createdAt,
        updatedAt,
        lastSeen,
        password,
      ];
}
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';

import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/features/auth/domain/entities/user_entity.dart';
import 'package:proker/src/features/auth/domain/usecases/usecase_params.dart';

@factoryMethod
abstract class AuthRepository {
  Future<Either<Failure, UserEntity>> login(LoginParams params);
  Future<Either<Failure, void>> logout();
  Future<Either<Failure, UserEntity>> register(RegisterParams params);
  Future<Either<Failure, UserEntity>> checkSignInStatus();
}
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/core/usecase/usecase.dart';
import 'package:proker/src/features/auth/domain/entities/user_entity.dart';
import 'package:proker/src/features/auth/domain/repositories/auth_repository.dart';

@lazySingleton
class AuthCheckSignInStatusUseCase implements UseCase<UserEntity, NoParams> {
  final AuthRepository _authRepository;
  const AuthCheckSignInStatusUseCase(this._authRepository);

  @override
  Future<Either<Failure, UserEntity>> call(NoParams params) async {
    return await _authRepository.checkSignInStatus();
  }
}
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/core/usecase/usecase.dart';
import 'package:proker/src/core/utils/extensions/string_extensions.dart';
import 'package:proker/src/features/auth/domain/entities/user_entity.dart';
import 'package:proker/src/features/auth/domain/repositories/auth_repository.dart';

@lazySingleton
class AuthLoginUseCase implements UseCase<UserEntity, Params> {
  final AuthRepository _authRepository;
  const AuthLoginUseCase(this._authRepository);

  @override
  Future<Either<Failure, UserEntity>> call(Params params) async {
    if (!params.email.isEmailValid) {
      return Left(InvalidEmailFailure());
    }

    if (!params.password.isPasswordValid) {
      return Left(InvalidPasswordFailure());
    }

    try {
      final result = await _authRepository.login(params);
      return result;
    } on FirebaseAuthException catch (e) {
      return Left(
          FirebaseAuthFailure(e.message ?? 'An unknown error occurred'));
    }
  }
}

class Params extends Equatable {
  final String email;
  final String password;
  const Params({
    required this.email,
    required this.password,
  });

  @override
  List<Object?> get props => [
        email,
        password,
      ];
}
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/core/usecase/usecase.dart';
import 'package:proker/src/features/auth/domain/repositories/auth_repository.dart';

@lazySingleton
class AuthLogoutUseCase implements UseCase<void, NoParams> {
  final AuthRepository _authRepository;
  const AuthLogoutUseCase(this._authRepository);

  @override
  Future<Either<Failure, void>> call(NoParams params) async {
    return await _authRepository.logout();
  }
}
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/core/usecase/usecase.dart';
import 'package:proker/src/core/utils/extensions/string_extensions.dart';
import 'package:proker/src/features/auth/domain/entities/user_entity.dart';
import 'package:proker/src/features/auth/domain/repositories/auth_repository.dart';

@lazySingleton
class AuthRegisterUseCase implements UseCase<void, Params> {
  final AuthRepository _authRepository;
  const AuthRegisterUseCase(this._authRepository);

  @override
  Future<Either<Failure, UserEntity>> call(Params params) async {
    if (!params.email.isEmailValid) {
      return Left(InvalidEmailFailure());
    }

    if (!params.password.isPasswordValid ||
        !params.confirmPassword.isPasswordValid) {
      return Left(InvalidPasswordFailure());
    }

    if (params.password != params.confirmPassword) {
      return Left(PasswordNotMatchFailure());
    }

    try {
      return await _authRepository.register(params);
    } on FirebaseAuthException catch (e) {
      return Left(
          FirebaseAuthFailure(e.message ?? 'An unknown error occurred'));
    }
  }
}

class Params extends Equatable {
  final String name;
  final String email;
  final String password;
  final String confirmPassword;
  const Params({
    required this.name,
    required this.email,
    required this.password,
    required this.confirmPassword,
  });

  @override
  List<Object?> get props => [
        name,
        email,
        password,
        confirmPassword,
      ];
}
import 'package:proker/src/features/auth/domain/usecases/login_usecase.dart'
    as login_params;
import 'package:proker/src/features/auth/domain/usecases/register_usecase.dart'
    as register_params;

typedef RegisterParams = register_params.Params;
typedef LoginParams = login_params.Params;
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/usecase/usecase.dart';
import 'package:proker/src/core/utils/failure_converter.dart';
import 'package:proker/src/core/utils/logger.dart';
import 'package:proker/src/features/auth/domain/entities/user_entity.dart';
import 'package:proker/src/features/auth/domain/usecases/check_signin_status_usecase.dart';
import 'package:proker/src/features/auth/domain/usecases/login_usecase.dart';
import 'package:proker/src/features/auth/domain/usecases/logout_usecase.dart';
import 'package:proker/src/features/auth/domain/usecases/register_usecase.dart';
import 'package:proker/src/features/auth/domain/usecases/usecase_params.dart';

part 'auth_cubit.freezed.dart';
part 'auth_state.dart';

@lazySingleton
class AuthCubit extends Cubit<AuthState> {
  final AuthLoginUseCase _loginUseCase;
  final AuthRegisterUseCase _registerUseCase;
  final AuthLogoutUseCase _logoutUseCase;
  final AuthCheckSignInStatusUseCase _checkSignInStatusUseCase;

  AuthCubit(
    this._loginUseCase,
    this._logoutUseCase,
    this._registerUseCase,
    this._checkSignInStatusUseCase,
  ) : super(const AuthState.initial());

  Future<void> login(String email, String password) async {
    emit(const AuthState.loginLoading());

    final result = await _loginUseCase.call(
      LoginParams(
        email: email,
        password: password,
      ),
    );

    result.fold(
      (l) => emit(AuthState.loginFailure(mapFailureToMessage(l))),
      (r) => emit(AuthState.authenticated(r)),
    );
  }

  Future<void> logout() async {
    emit(const AuthState.logoutLoading());

    final result = await _logoutUseCase.call(NoParams());

    result.fold(
      (l) => emit(AuthState.logoutFailure(mapFailureToMessage(l))),
      (_) => emit(const AuthState.logoutSuccess("Logout Success")),
    );
  }

  Future<void> register(
      {required String name,
      required String email,
      required String password,
      required String confirmPassword}) async {
    emit(const AuthState.registerLoading());

    final result = await _registerUseCase.call(
      RegisterParams(
        name: name,
        email: email,
        password: password,
        confirmPassword: confirmPassword,
      ),
    );

    result.fold(
      (l) => emit(AuthState.registerFailure(mapFailureToMessage(l))),
      (r) => emit(AuthState.authenticated(r)),
    );
  }

  Future<void> checkSignInStatus() async {
    emit(const AuthState.checkSignInStatusLoading());

    final result = await _checkSignInStatusUseCase.call(NoParams());

    result.fold(
      (l) => emit(AuthState.checkSignInStatusFailure(mapFailureToMessage(l))),
      (r) => emit(AuthState.authenticated(r)),
    );
  }

  @override
  // ignore: must_call_super
  Future<void> close() async {
    logger.i("===== CLOSE AuthCubit =====");
    return Future.value();
  }
}
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'auth_cubit.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$AuthState {
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $AuthStateCopyWith<$Res> {
  factory $AuthStateCopyWith(AuthState value, $Res Function(AuthState) then) =
      _$AuthStateCopyWithImpl<$Res, AuthState>;
}

/// @nodoc
class _$AuthStateCopyWithImpl<$Res, $Val extends AuthState>
    implements $AuthStateCopyWith<$Res> {
  _$AuthStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc
abstract class _$$AuthInitialStateImplCopyWith<$Res> {
  factory _$$AuthInitialStateImplCopyWith(_$AuthInitialStateImpl value,
          $Res Function(_$AuthInitialStateImpl) then) =
      __$$AuthInitialStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$AuthInitialStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res, _$AuthInitialStateImpl>
    implements _$$AuthInitialStateImplCopyWith<$Res> {
  __$$AuthInitialStateImplCopyWithImpl(_$AuthInitialStateImpl _value,
      $Res Function(_$AuthInitialStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$AuthInitialStateImpl implements AuthInitialState {
  const _$AuthInitialStateImpl();

  @override
  String toString() {
    return 'AuthState.initial()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$AuthInitialStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return initial();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return initial?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return initial(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return initial?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial(this);
    }
    return orElse();
  }
}

abstract class AuthInitialState implements AuthState {
  const factory AuthInitialState() = _$AuthInitialStateImpl;
}

/// @nodoc
abstract class _$$AuthRegisterLoadingStateImplCopyWith<$Res> {
  factory _$$AuthRegisterLoadingStateImplCopyWith(
          _$AuthRegisterLoadingStateImpl value,
          $Res Function(_$AuthRegisterLoadingStateImpl) then) =
      __$$AuthRegisterLoadingStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$AuthRegisterLoadingStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res, _$AuthRegisterLoadingStateImpl>
    implements _$$AuthRegisterLoadingStateImplCopyWith<$Res> {
  __$$AuthRegisterLoadingStateImplCopyWithImpl(
      _$AuthRegisterLoadingStateImpl _value,
      $Res Function(_$AuthRegisterLoadingStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$AuthRegisterLoadingStateImpl implements AuthRegisterLoadingState {
  const _$AuthRegisterLoadingStateImpl();

  @override
  String toString() {
    return 'AuthState.registerLoading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthRegisterLoadingStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return registerLoading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return registerLoading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (registerLoading != null) {
      return registerLoading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return registerLoading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return registerLoading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (registerLoading != null) {
      return registerLoading(this);
    }
    return orElse();
  }
}

abstract class AuthRegisterLoadingState implements AuthState {
  const factory AuthRegisterLoadingState() = _$AuthRegisterLoadingStateImpl;
}

/// @nodoc
abstract class _$$AuthRegisterFailureStateImplCopyWith<$Res> {
  factory _$$AuthRegisterFailureStateImplCopyWith(
          _$AuthRegisterFailureStateImpl value,
          $Res Function(_$AuthRegisterFailureStateImpl) then) =
      __$$AuthRegisterFailureStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String message});
}

/// @nodoc
class __$$AuthRegisterFailureStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res, _$AuthRegisterFailureStateImpl>
    implements _$$AuthRegisterFailureStateImplCopyWith<$Res> {
  __$$AuthRegisterFailureStateImplCopyWithImpl(
      _$AuthRegisterFailureStateImpl _value,
      $Res Function(_$AuthRegisterFailureStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
  }) {
    return _then(_$AuthRegisterFailureStateImpl(
      null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$AuthRegisterFailureStateImpl implements AuthRegisterFailureState {
  const _$AuthRegisterFailureStateImpl(this.message);

  @override
  final String message;

  @override
  String toString() {
    return 'AuthState.registerFailure(message: $message)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthRegisterFailureStateImpl &&
            (identical(other.message, message) || other.message == message));
  }

  @override
  int get hashCode => Object.hash(runtimeType, message);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$AuthRegisterFailureStateImplCopyWith<_$AuthRegisterFailureStateImpl>
      get copyWith => __$$AuthRegisterFailureStateImplCopyWithImpl<
          _$AuthRegisterFailureStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return registerFailure(message);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return registerFailure?.call(message);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (registerFailure != null) {
      return registerFailure(message);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return registerFailure(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return registerFailure?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (registerFailure != null) {
      return registerFailure(this);
    }
    return orElse();
  }
}

abstract class AuthRegisterFailureState implements AuthState {
  const factory AuthRegisterFailureState(final String message) =
      _$AuthRegisterFailureStateImpl;

  String get message;

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$AuthRegisterFailureStateImplCopyWith<_$AuthRegisterFailureStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$AuthLoginLoadingStateImplCopyWith<$Res> {
  factory _$$AuthLoginLoadingStateImplCopyWith(
          _$AuthLoginLoadingStateImpl value,
          $Res Function(_$AuthLoginLoadingStateImpl) then) =
      __$$AuthLoginLoadingStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$AuthLoginLoadingStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res, _$AuthLoginLoadingStateImpl>
    implements _$$AuthLoginLoadingStateImplCopyWith<$Res> {
  __$$AuthLoginLoadingStateImplCopyWithImpl(_$AuthLoginLoadingStateImpl _value,
      $Res Function(_$AuthLoginLoadingStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$AuthLoginLoadingStateImpl implements AuthLoginLoadingState {
  const _$AuthLoginLoadingStateImpl();

  @override
  String toString() {
    return 'AuthState.loginLoading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthLoginLoadingStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return loginLoading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return loginLoading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (loginLoading != null) {
      return loginLoading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return loginLoading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return loginLoading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (loginLoading != null) {
      return loginLoading(this);
    }
    return orElse();
  }
}

abstract class AuthLoginLoadingState implements AuthState {
  const factory AuthLoginLoadingState() = _$AuthLoginLoadingStateImpl;
}

/// @nodoc
abstract class _$$AuthLoginFailureStateImplCopyWith<$Res> {
  factory _$$AuthLoginFailureStateImplCopyWith(
          _$AuthLoginFailureStateImpl value,
          $Res Function(_$AuthLoginFailureStateImpl) then) =
      __$$AuthLoginFailureStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String message});
}

/// @nodoc
class __$$AuthLoginFailureStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res, _$AuthLoginFailureStateImpl>
    implements _$$AuthLoginFailureStateImplCopyWith<$Res> {
  __$$AuthLoginFailureStateImplCopyWithImpl(_$AuthLoginFailureStateImpl _value,
      $Res Function(_$AuthLoginFailureStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
  }) {
    return _then(_$AuthLoginFailureStateImpl(
      null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$AuthLoginFailureStateImpl implements AuthLoginFailureState {
  const _$AuthLoginFailureStateImpl(this.message);

  @override
  final String message;

  @override
  String toString() {
    return 'AuthState.loginFailure(message: $message)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthLoginFailureStateImpl &&
            (identical(other.message, message) || other.message == message));
  }

  @override
  int get hashCode => Object.hash(runtimeType, message);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$AuthLoginFailureStateImplCopyWith<_$AuthLoginFailureStateImpl>
      get copyWith => __$$AuthLoginFailureStateImplCopyWithImpl<
          _$AuthLoginFailureStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return loginFailure(message);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return loginFailure?.call(message);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (loginFailure != null) {
      return loginFailure(message);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return loginFailure(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return loginFailure?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (loginFailure != null) {
      return loginFailure(this);
    }
    return orElse();
  }
}

abstract class AuthLoginFailureState implements AuthState {
  const factory AuthLoginFailureState(final String message) =
      _$AuthLoginFailureStateImpl;

  String get message;

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$AuthLoginFailureStateImplCopyWith<_$AuthLoginFailureStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$AuthLogoutLoadingStateImplCopyWith<$Res> {
  factory _$$AuthLogoutLoadingStateImplCopyWith(
          _$AuthLogoutLoadingStateImpl value,
          $Res Function(_$AuthLogoutLoadingStateImpl) then) =
      __$$AuthLogoutLoadingStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$AuthLogoutLoadingStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res, _$AuthLogoutLoadingStateImpl>
    implements _$$AuthLogoutLoadingStateImplCopyWith<$Res> {
  __$$AuthLogoutLoadingStateImplCopyWithImpl(
      _$AuthLogoutLoadingStateImpl _value,
      $Res Function(_$AuthLogoutLoadingStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$AuthLogoutLoadingStateImpl implements AuthLogoutLoadingState {
  const _$AuthLogoutLoadingStateImpl();

  @override
  String toString() {
    return 'AuthState.logoutLoading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthLogoutLoadingStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return logoutLoading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return logoutLoading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (logoutLoading != null) {
      return logoutLoading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return logoutLoading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return logoutLoading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (logoutLoading != null) {
      return logoutLoading(this);
    }
    return orElse();
  }
}

abstract class AuthLogoutLoadingState implements AuthState {
  const factory AuthLogoutLoadingState() = _$AuthLogoutLoadingStateImpl;
}

/// @nodoc
abstract class _$$AuthLogoutSuccessStateImplCopyWith<$Res> {
  factory _$$AuthLogoutSuccessStateImplCopyWith(
          _$AuthLogoutSuccessStateImpl value,
          $Res Function(_$AuthLogoutSuccessStateImpl) then) =
      __$$AuthLogoutSuccessStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String message});
}

/// @nodoc
class __$$AuthLogoutSuccessStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res, _$AuthLogoutSuccessStateImpl>
    implements _$$AuthLogoutSuccessStateImplCopyWith<$Res> {
  __$$AuthLogoutSuccessStateImplCopyWithImpl(
      _$AuthLogoutSuccessStateImpl _value,
      $Res Function(_$AuthLogoutSuccessStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
  }) {
    return _then(_$AuthLogoutSuccessStateImpl(
      null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$AuthLogoutSuccessStateImpl implements AuthLogoutSuccessState {
  const _$AuthLogoutSuccessStateImpl(this.message);

  @override
  final String message;

  @override
  String toString() {
    return 'AuthState.logoutSuccess(message: $message)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthLogoutSuccessStateImpl &&
            (identical(other.message, message) || other.message == message));
  }

  @override
  int get hashCode => Object.hash(runtimeType, message);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$AuthLogoutSuccessStateImplCopyWith<_$AuthLogoutSuccessStateImpl>
      get copyWith => __$$AuthLogoutSuccessStateImplCopyWithImpl<
          _$AuthLogoutSuccessStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return logoutSuccess(message);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return logoutSuccess?.call(message);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (logoutSuccess != null) {
      return logoutSuccess(message);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return logoutSuccess(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return logoutSuccess?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (logoutSuccess != null) {
      return logoutSuccess(this);
    }
    return orElse();
  }
}

abstract class AuthLogoutSuccessState implements AuthState {
  const factory AuthLogoutSuccessState(final String message) =
      _$AuthLogoutSuccessStateImpl;

  String get message;

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$AuthLogoutSuccessStateImplCopyWith<_$AuthLogoutSuccessStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$AuthLogoutFailureStateImplCopyWith<$Res> {
  factory _$$AuthLogoutFailureStateImplCopyWith(
          _$AuthLogoutFailureStateImpl value,
          $Res Function(_$AuthLogoutFailureStateImpl) then) =
      __$$AuthLogoutFailureStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String message});
}

/// @nodoc
class __$$AuthLogoutFailureStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res, _$AuthLogoutFailureStateImpl>
    implements _$$AuthLogoutFailureStateImplCopyWith<$Res> {
  __$$AuthLogoutFailureStateImplCopyWithImpl(
      _$AuthLogoutFailureStateImpl _value,
      $Res Function(_$AuthLogoutFailureStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
  }) {
    return _then(_$AuthLogoutFailureStateImpl(
      null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$AuthLogoutFailureStateImpl implements AuthLogoutFailureState {
  const _$AuthLogoutFailureStateImpl(this.message);

  @override
  final String message;

  @override
  String toString() {
    return 'AuthState.logoutFailure(message: $message)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthLogoutFailureStateImpl &&
            (identical(other.message, message) || other.message == message));
  }

  @override
  int get hashCode => Object.hash(runtimeType, message);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$AuthLogoutFailureStateImplCopyWith<_$AuthLogoutFailureStateImpl>
      get copyWith => __$$AuthLogoutFailureStateImplCopyWithImpl<
          _$AuthLogoutFailureStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return logoutFailure(message);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return logoutFailure?.call(message);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (logoutFailure != null) {
      return logoutFailure(message);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return logoutFailure(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return logoutFailure?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (logoutFailure != null) {
      return logoutFailure(this);
    }
    return orElse();
  }
}

abstract class AuthLogoutFailureState implements AuthState {
  const factory AuthLogoutFailureState(final String message) =
      _$AuthLogoutFailureStateImpl;

  String get message;

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$AuthLogoutFailureStateImplCopyWith<_$AuthLogoutFailureStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$AuthCheckSignInStatusLoadingStateImplCopyWith<$Res> {
  factory _$$AuthCheckSignInStatusLoadingStateImplCopyWith(
          _$AuthCheckSignInStatusLoadingStateImpl value,
          $Res Function(_$AuthCheckSignInStatusLoadingStateImpl) then) =
      __$$AuthCheckSignInStatusLoadingStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$AuthCheckSignInStatusLoadingStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res,
        _$AuthCheckSignInStatusLoadingStateImpl>
    implements _$$AuthCheckSignInStatusLoadingStateImplCopyWith<$Res> {
  __$$AuthCheckSignInStatusLoadingStateImplCopyWithImpl(
      _$AuthCheckSignInStatusLoadingStateImpl _value,
      $Res Function(_$AuthCheckSignInStatusLoadingStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$AuthCheckSignInStatusLoadingStateImpl
    implements AuthCheckSignInStatusLoadingState {
  const _$AuthCheckSignInStatusLoadingStateImpl();

  @override
  String toString() {
    return 'AuthState.checkSignInStatusLoading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthCheckSignInStatusLoadingStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return checkSignInStatusLoading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return checkSignInStatusLoading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (checkSignInStatusLoading != null) {
      return checkSignInStatusLoading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return checkSignInStatusLoading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return checkSignInStatusLoading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (checkSignInStatusLoading != null) {
      return checkSignInStatusLoading(this);
    }
    return orElse();
  }
}

abstract class AuthCheckSignInStatusLoadingState implements AuthState {
  const factory AuthCheckSignInStatusLoadingState() =
      _$AuthCheckSignInStatusLoadingStateImpl;
}

/// @nodoc
abstract class _$$AuthCheckSignInStatusFailureStateImplCopyWith<$Res> {
  factory _$$AuthCheckSignInStatusFailureStateImplCopyWith(
          _$AuthCheckSignInStatusFailureStateImpl value,
          $Res Function(_$AuthCheckSignInStatusFailureStateImpl) then) =
      __$$AuthCheckSignInStatusFailureStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String message});
}

/// @nodoc
class __$$AuthCheckSignInStatusFailureStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res,
        _$AuthCheckSignInStatusFailureStateImpl>
    implements _$$AuthCheckSignInStatusFailureStateImplCopyWith<$Res> {
  __$$AuthCheckSignInStatusFailureStateImplCopyWithImpl(
      _$AuthCheckSignInStatusFailureStateImpl _value,
      $Res Function(_$AuthCheckSignInStatusFailureStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
  }) {
    return _then(_$AuthCheckSignInStatusFailureStateImpl(
      null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$AuthCheckSignInStatusFailureStateImpl
    implements AuthCheckSignInStatusFailureState {
  const _$AuthCheckSignInStatusFailureStateImpl(this.message);

  @override
  final String message;

  @override
  String toString() {
    return 'AuthState.checkSignInStatusFailure(message: $message)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthCheckSignInStatusFailureStateImpl &&
            (identical(other.message, message) || other.message == message));
  }

  @override
  int get hashCode => Object.hash(runtimeType, message);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$AuthCheckSignInStatusFailureStateImplCopyWith<
          _$AuthCheckSignInStatusFailureStateImpl>
      get copyWith => __$$AuthCheckSignInStatusFailureStateImplCopyWithImpl<
          _$AuthCheckSignInStatusFailureStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return checkSignInStatusFailure(message);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return checkSignInStatusFailure?.call(message);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (checkSignInStatusFailure != null) {
      return checkSignInStatusFailure(message);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return checkSignInStatusFailure(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return checkSignInStatusFailure?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (checkSignInStatusFailure != null) {
      return checkSignInStatusFailure(this);
    }
    return orElse();
  }
}

abstract class AuthCheckSignInStatusFailureState implements AuthState {
  const factory AuthCheckSignInStatusFailureState(final String message) =
      _$AuthCheckSignInStatusFailureStateImpl;

  String get message;

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$AuthCheckSignInStatusFailureStateImplCopyWith<
          _$AuthCheckSignInStatusFailureStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$AuthAuthenticatedStateImplCopyWith<$Res> {
  factory _$$AuthAuthenticatedStateImplCopyWith(
          _$AuthAuthenticatedStateImpl value,
          $Res Function(_$AuthAuthenticatedStateImpl) then) =
      __$$AuthAuthenticatedStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({UserEntity data});
}

/// @nodoc
class __$$AuthAuthenticatedStateImplCopyWithImpl<$Res>
    extends _$AuthStateCopyWithImpl<$Res, _$AuthAuthenticatedStateImpl>
    implements _$$AuthAuthenticatedStateImplCopyWith<$Res> {
  __$$AuthAuthenticatedStateImplCopyWithImpl(
      _$AuthAuthenticatedStateImpl _value,
      $Res Function(_$AuthAuthenticatedStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? data = null,
  }) {
    return _then(_$AuthAuthenticatedStateImpl(
      null == data
          ? _value.data
          : data // ignore: cast_nullable_to_non_nullable
              as UserEntity,
    ));
  }
}

/// @nodoc

class _$AuthAuthenticatedStateImpl implements AuthAuthenticatedState {
  const _$AuthAuthenticatedStateImpl(this.data);

  @override
  final UserEntity data;

  @override
  String toString() {
    return 'AuthState.authenticated(data: $data)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthAuthenticatedStateImpl &&
            (identical(other.data, data) || other.data == data));
  }

  @override
  int get hashCode => Object.hash(runtimeType, data);

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$AuthAuthenticatedStateImplCopyWith<_$AuthAuthenticatedStateImpl>
      get copyWith => __$$AuthAuthenticatedStateImplCopyWithImpl<
          _$AuthAuthenticatedStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() registerLoading,
    required TResult Function(String message) registerFailure,
    required TResult Function() loginLoading,
    required TResult Function(String message) loginFailure,
    required TResult Function() logoutLoading,
    required TResult Function(String message) logoutSuccess,
    required TResult Function(String message) logoutFailure,
    required TResult Function() checkSignInStatusLoading,
    required TResult Function(String message) checkSignInStatusFailure,
    required TResult Function(UserEntity data) authenticated,
  }) {
    return authenticated(data);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? registerLoading,
    TResult? Function(String message)? registerFailure,
    TResult? Function()? loginLoading,
    TResult? Function(String message)? loginFailure,
    TResult? Function()? logoutLoading,
    TResult? Function(String message)? logoutSuccess,
    TResult? Function(String message)? logoutFailure,
    TResult? Function()? checkSignInStatusLoading,
    TResult? Function(String message)? checkSignInStatusFailure,
    TResult? Function(UserEntity data)? authenticated,
  }) {
    return authenticated?.call(data);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? registerLoading,
    TResult Function(String message)? registerFailure,
    TResult Function()? loginLoading,
    TResult Function(String message)? loginFailure,
    TResult Function()? logoutLoading,
    TResult Function(String message)? logoutSuccess,
    TResult Function(String message)? logoutFailure,
    TResult Function()? checkSignInStatusLoading,
    TResult Function(String message)? checkSignInStatusFailure,
    TResult Function(UserEntity data)? authenticated,
    required TResult orElse(),
  }) {
    if (authenticated != null) {
      return authenticated(data);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AuthInitialState value) initial,
    required TResult Function(AuthRegisterLoadingState value) registerLoading,
    required TResult Function(AuthRegisterFailureState value) registerFailure,
    required TResult Function(AuthLoginLoadingState value) loginLoading,
    required TResult Function(AuthLoginFailureState value) loginFailure,
    required TResult Function(AuthLogoutLoadingState value) logoutLoading,
    required TResult Function(AuthLogoutSuccessState value) logoutSuccess,
    required TResult Function(AuthLogoutFailureState value) logoutFailure,
    required TResult Function(AuthCheckSignInStatusLoadingState value)
        checkSignInStatusLoading,
    required TResult Function(AuthCheckSignInStatusFailureState value)
        checkSignInStatusFailure,
    required TResult Function(AuthAuthenticatedState value) authenticated,
  }) {
    return authenticated(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AuthInitialState value)? initial,
    TResult? Function(AuthRegisterLoadingState value)? registerLoading,
    TResult? Function(AuthRegisterFailureState value)? registerFailure,
    TResult? Function(AuthLoginLoadingState value)? loginLoading,
    TResult? Function(AuthLoginFailureState value)? loginFailure,
    TResult? Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult? Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult? Function(AuthLogoutFailureState value)? logoutFailure,
    TResult? Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult? Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult? Function(AuthAuthenticatedState value)? authenticated,
  }) {
    return authenticated?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthInitialState value)? initial,
    TResult Function(AuthRegisterLoadingState value)? registerLoading,
    TResult Function(AuthRegisterFailureState value)? registerFailure,
    TResult Function(AuthLoginLoadingState value)? loginLoading,
    TResult Function(AuthLoginFailureState value)? loginFailure,
    TResult Function(AuthLogoutLoadingState value)? logoutLoading,
    TResult Function(AuthLogoutSuccessState value)? logoutSuccess,
    TResult Function(AuthLogoutFailureState value)? logoutFailure,
    TResult Function(AuthCheckSignInStatusLoadingState value)?
        checkSignInStatusLoading,
    TResult Function(AuthCheckSignInStatusFailureState value)?
        checkSignInStatusFailure,
    TResult Function(AuthAuthenticatedState value)? authenticated,
    required TResult orElse(),
  }) {
    if (authenticated != null) {
      return authenticated(this);
    }
    return orElse();
  }
}

abstract class AuthAuthenticatedState implements AuthState {
  const factory AuthAuthenticatedState(final UserEntity data) =
      _$AuthAuthenticatedStateImpl;

  UserEntity get data;

  /// Create a copy of AuthState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$AuthAuthenticatedStateImplCopyWith<_$AuthAuthenticatedStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}
part of 'auth_cubit.dart';

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = AuthInitialState;

  // Register states
  const factory AuthState.registerLoading() = AuthRegisterLoadingState;
  const factory AuthState.registerFailure(String message) =
      AuthRegisterFailureState;

  // Login states
  const factory AuthState.loginLoading() = AuthLoginLoadingState;
  const factory AuthState.loginFailure(String message) = AuthLoginFailureState;

  // Logout states
  const factory AuthState.logoutLoading() = AuthLogoutLoadingState;
  const factory AuthState.logoutSuccess(String message) =
      AuthLogoutSuccessState;
  const factory AuthState.logoutFailure(String message) =
      AuthLogoutFailureState;

  // Check Sign-In Status states
  const factory AuthState.checkSignInStatusLoading() =
      AuthCheckSignInStatusLoadingState;
  const factory AuthState.checkSignInStatusFailure(String message) =
      AuthCheckSignInStatusFailureState;

  const factory AuthState.authenticated(UserEntity data) =
      AuthAuthenticatedState;
}
import 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:injectable/injectable.dart';

import 'package:proker/src/core/utils/logger.dart';

part 'auth_login_form_event.dart';
part 'auth_login_form_state.dart';

@factoryMethod
class AuthLoginFormBloc extends Bloc<LoginFormEvent, LoginFormState> {
  AuthLoginFormBloc() : super(const LoginFormInitialState()) {
    on<LoginFormEmailChangedEvent>(_emailChanged);
    on<LoginFormPasswordChangedEvent>(_passwordChanged);
  }

  Future _emailChanged(LoginFormEmailChangedEvent event, Emitter emit) async {
    emit(
      LoginFormDataState(
        inputEmail: event.email,
        inputPassword: state.password,
        inputIsValid: inputValidator(
          event.email,
          state.password,
        ),
      ),
    );
  }

  Future _passwordChanged(
      LoginFormPasswordChangedEvent event, Emitter emit) async {
    emit(
      LoginFormDataState(
        inputEmail: state.email,
        inputPassword: event.password,
        inputIsValid: inputValidator(
          state.email,
          event.password,
        ),
      ),
    );
  }

  bool inputValidator(String email, String password) {
    if (email.isNotEmpty && password.isNotEmpty) {
      return true;
    }

    return false;
  }

  @override
  Future<void> close() {
    logger.i("===== CLOSE AuthLoginFormBloc =====");
    return super.close();
  }
}
part of 'auth_login_form_bloc.dart';

sealed class LoginFormEvent extends Equatable {
  const LoginFormEvent();

  @override
  List<Object?> get props => [];
}

class LoginFormEmailChangedEvent extends LoginFormEvent {
  final String email;

  const LoginFormEmailChangedEvent(this.email);

  @override
  List<Object?> get props => [email];
}

class LoginFormUsernameChangedEvent extends LoginFormEvent {
  final String username;

  const LoginFormUsernameChangedEvent(this.username);

  @override
  List<Object?> get props => [username];
}

class LoginFormPasswordChangedEvent extends LoginFormEvent {
  final String password;

  const LoginFormPasswordChangedEvent(this.password);

  @override
  List<Object?> get props => [password];
}

class LoginFormConfirmPasswordChangedEvent extends LoginFormEvent {
  final String confirmPassword;

  const LoginFormConfirmPasswordChangedEvent(this.confirmPassword);

  @override
  List<Object?> get props => [confirmPassword];
}
part of 'auth_login_form_bloc.dart';

sealed class LoginFormState extends Equatable {
  final String email;
  final String password;
  final bool isValid;
  const LoginFormState({
    required this.email,
    required this.password,
    required this.isValid,
  });
  @override
  List<Object?> get props => [
        email,
        password,
        isValid,
      ];
}

class LoginFormInitialState extends LoginFormState {
  const LoginFormInitialState()
      : super(
          email: "",
          password: "",
          isValid: false,
        );
}

class LoginFormDataState extends LoginFormState {
  final String inputEmail;
  final String inputPassword;
  final bool inputIsValid;
  const LoginFormDataState({
    required this.inputEmail,
    required this.inputPassword,
    required this.inputIsValid,
  }) : super(
          email: inputEmail,
          password: inputPassword,
          isValid: inputIsValid,
        );
  @override
  List<Object?> get props => [
        inputEmail,
        inputPassword,
        inputIsValid,
      ];
}
import 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/utils/extensions/string_extensions.dart';
import 'package:proker/src/core/utils/logger.dart';

part 'auth_register_form_event.dart';
part 'auth_register_form_state.dart';

@factoryMethod
class AuthRegisterFormBloc extends Bloc<RegisterFormEvent, RegisterFormState> {
  AuthRegisterFormBloc() : super(const RegisterFormInitialState()) {
    on<RegisterFormEmailChangedEvent>(_emailChanged);
    on<RegisterFormUsernameChangedEvent>(_usernameChanged);
    on<RegisterFormPasswordChangedEvent>(_passwordChanged);
    on<RegisterFormConfirmPasswordChangedEvent>(_confirmPasswordChanged);
  }

  Future _emailChanged(
      RegisterFormEmailChangedEvent event, Emitter emit) async {
    emit(
      RegisterFormDataState(
        inputEmail: event.email,
        inputUsername: state.username,
        inputPassword: state.password,
        inputConfirmPassword: state.confirmPassword,
        inputIsValid: inputValidator(
          state.username,
          event.email,
          state.password,
          state.confirmPassword,
        ),
      ),
    );
  }

  Future _usernameChanged(
      RegisterFormUsernameChangedEvent event, Emitter emit) async {
    emit(
      RegisterFormDataState(
        inputEmail: state.email,
        inputUsername: event.username,
        inputPassword: state.password,
        inputConfirmPassword: state.confirmPassword,
        inputIsValid: inputValidator(
          event.username,
          state.email,
          state.password,
          state.confirmPassword,
        ),
      ),
    );
  }

  Future _passwordChanged(
      RegisterFormPasswordChangedEvent event, Emitter emit) async {
    emit(
      RegisterFormDataState(
        inputEmail: state.email,
        inputUsername: state.username,
        inputPassword: event.password,
        inputConfirmPassword: state.confirmPassword,
        inputIsValid: inputValidator(
          state.username,
          state.email,
          event.password,
          state.confirmPassword,
        ),
      ),
    );
  }

  Future _confirmPasswordChanged(
      RegisterFormConfirmPasswordChangedEvent event, Emitter emit) async {
    emit(RegisterFormDataState(
      inputUsername: state.username,
      inputEmail: state.email,
      inputPassword: state.password,
      inputConfirmPassword: event.confirmPassword,
      inputIsValid: inputValidator(
        state.username,
        state.email,
        state.password,
        event.confirmPassword,
      ),
    ));
  }

  bool inputValidator(
    String username,
    String email,
    String password,
    String confirmPassword,
  ) {
    if (username.isEmpty) {
      return false;
    }

    if (!email.isEmailValid) {
      return false;
    }

    if (password.length < 6 && confirmPassword.length < 6) {
      return false;
    }

    if (!password.isPasswordValid || !confirmPassword.isPasswordValid) {
      return false;
    }

    if (password != confirmPassword) {
      return false;
    }

    return true;
  }

  @override
  Future<void> close() {
    logger.i("===== CLOSE AuthRegisterFormBloc =====");
    return super.close();
  }
}
part of 'auth_register_form_bloc.dart';

sealed class RegisterFormEvent extends Equatable {
  const RegisterFormEvent();

  @override
  List<Object?> get props => [];
}

class RegisterFormEmailChangedEvent extends RegisterFormEvent {
  final String email;

  const RegisterFormEmailChangedEvent(this.email);

  @override
  List<Object?> get props => [email];
}

class RegisterFormUsernameChangedEvent extends RegisterFormEvent {
  final String username;

  const RegisterFormUsernameChangedEvent(this.username);

  @override
  List<Object?> get props => [username];
}

class RegisterFormPasswordChangedEvent extends RegisterFormEvent {
  final String password;

  const RegisterFormPasswordChangedEvent(this.password);

  @override
  List<Object?> get props => [password];
}

class RegisterFormConfirmPasswordChangedEvent extends RegisterFormEvent {
  final String confirmPassword;

  const RegisterFormConfirmPasswordChangedEvent(this.confirmPassword);

  @override
  List<Object?> get props => [confirmPassword];
}
part of 'auth_register_form_bloc.dart';

sealed class RegisterFormState extends Equatable {
  final String email;
  final String username;
  final String password;
  final String confirmPassword;
  final bool isValid;
  const RegisterFormState({
    required this.email,
    required this.username,
    required this.password,
    required this.confirmPassword,
    required this.isValid,
  });
  @override
  List<Object?> get props => [
        email,
        username,
        password,
        confirmPassword,
        isValid,
      ];
}

class RegisterFormInitialState extends RegisterFormState {
  const RegisterFormInitialState()
      : super(
          email: "",
          username: "",
          password: "",
          confirmPassword: "",
          isValid: false,
        );
}

class RegisterFormDataState extends RegisterFormState {
  final String inputEmail;
  final String inputUsername;
  final String inputPassword;
  final String inputConfirmPassword;
  final bool inputIsValid;
  const RegisterFormDataState({
    required this.inputEmail,
    required this.inputUsername,
    required this.inputPassword,
    required this.inputConfirmPassword,
    required this.inputIsValid,
  }) : super(
          email: inputEmail,
          username: inputUsername,
          password: inputPassword,
          confirmPassword: inputConfirmPassword,
          isValid: inputIsValid,
        );
  @override
  List<Object?> get props => [
        inputEmail,
        inputUsername,
        inputPassword,
        inputConfirmPassword,
        inputIsValid,
      ];
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:proker/src/core/config/router/app_router.dart';

@RoutePage()
class ResetPasswordPage extends StatelessWidget {
  const ResetPasswordPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: EdgeInsets.symmetric(
          horizontal: context.w(16),
          vertical: context.h(50),
        ),
        child: Stack(
          children: [
            // Back Button
            Padding(
              padding: EdgeInsets.only(top: context.h(12)),
              child: Align(
                alignment: Alignment.topLeft,
                child: GestureDetector(
                  onTap: () {
                    context.maybePop();
                  },
                  child: Container(
                    padding: EdgeInsets.all(context.w(8)),
                    decoration: BoxDecoration(
                      border: Border.all(
                        color: const Color(0xFFCCD1D6),
                      ),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(
                      Icons.arrow_back_ios,
                      size: context.sp(24),
                      color: Colors.black.withOpacity(0.5),
                    ),
                  ),
                ),
              ),
            ),
            Center(
              child: SingleChildScrollView(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Reset Password Text
                    Text.rich(
                      TextSpan(
                        children: [
                          TextSpan(
                            text: 'Reset',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: context.sp(47),
                              color: const Color(0xFF04339B),
                            ),
                          ),
                          TextSpan(
                            text: ' Password',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: context.sp(47),
                            ),
                          ),
                        ],
                      ),
                      textAlign: TextAlign.start,
                    ),

                    // Instruction Text
                    Padding(
                      padding: EdgeInsets.only(top: context.h(20)),
                      child: Text(
                        'Tolong masukkan email kamu untuk melakukan reset password.',
                        style: TextStyle(
                          fontWeight: FontWeight.w500,
                          fontSize: context.sp(18),
                          color: const Color(0xFF747688),
                        ),
                      ),
                    ),

                    // Email Text Field
                    Padding(
                      padding: EdgeInsets.only(top: context.h(24)),
                      child: Text(
                        'Email Kamu',
                        style: TextStyle(
                          fontWeight: FontWeight.w900,
                          fontSize: context.sp(24),
                          color: const Color(0xFF001C34),
                        ),
                      ),
                    ),

                    // Email Input
                    Padding(
                      padding: EdgeInsets.only(top: context.h(12)),
                      child: TextField(
                        decoration: InputDecoration(
                          labelText: 'abc@email.com',
                          labelStyle: TextStyle(
                            fontWeight: FontWeight.w500,
                            fontSize: context.sp(16),
                            color: const Color(0xFF747688),
                          ),
                          border: const OutlineInputBorder(
                            borderSide: BorderSide(color: Color(0xFF747688)),
                          ),
                          prefixIcon: const Icon(Icons.email),
                        ),
                        keyboardType: TextInputType.emailAddress,
                      ),
                    ),

                    // Reset Button
                    Padding(
                      padding: EdgeInsets.only(top: context.h(40)),
                      child: SizedBox(
                        width: double.infinity,
                        child: ElevatedButton(
                          onPressed: () {
                            context.router.push(const HomeRoute());
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF04339B),
                            padding: EdgeInsets.all(context.h(16)),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            minimumSize: Size(context.w(200), context.h(50)),
                          ),
                          child: Text(
                            'RESET PASSWORD',
                            style: TextStyle(
                                fontWeight: FontWeight.w500,
                                fontSize: context.sp(16),
                                color: Colors.white),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:proker/src/core/common/widgets/status_bar/status_bar_widget.dart';
import 'package:proker/src/core/config/router/app_router.dart';
import 'package:proker/src/core/utils/show_snackbar.dart';
import 'package:proker/src/features/auth/presentation/bloc/auth/auth_cubit.dart';

@RoutePage()
class SignInPage extends StatelessWidget {
  SignInPage({super.key});

  final emailCtr = TextEditingController(text: "admin@gmail.com");
  final pwdCtr = TextEditingController(text: "admin123");
  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthCubit, AuthState>(
      listener: (context, state) {
        if (state is AuthLoginFailureState) {
          showSnackBar(context, Colors.red, state.message);
        } else if (state is AuthAuthenticatedState) {
          context.router.replaceAll([const HomeRoute()]);
        }
      },
      child: StatusBarWidget(
        brightness: Brightness.dark,
        child: Scaffold(
          body: Padding(
            padding: EdgeInsets.all(context.w(16)),
            child: Align(
              alignment: Alignment.center,
              child: SingleChildScrollView(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    Padding(
                      // Image HIMAKOM
                      padding: EdgeInsets.only(bottom: context.h(16)),
                      child: Image.asset(
                        'assets/images/himakom_logo.png',
                        height: context.h(150),
                      ),
                    ),
                    SizedBox(height: context.h(24)),

                    // Text "Masuk"
                    Padding(
                      padding: EdgeInsets.only(bottom: context.h(16)),
                      child: Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          'Masuk',
                          style: TextStyle(
                            fontWeight: FontWeight.w500,
                            fontSize: context.sp(32),
                          ),
                        ),
                      ),
                    ),

                    // input email
                    TextFormField(
                      controller: emailCtr,
                      decoration: const InputDecoration(
                        labelText: 'abc@gmail.com',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.email),
                      ),
                      keyboardType: TextInputType.emailAddress,
                    ),
                    SizedBox(height: context.h(24)),

                    // input password
                    TextFormField(
                      controller: pwdCtr,
                      decoration: const InputDecoration(
                        labelText: 'Your password',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.lock),
                      ),
                      obscureText: true,
                    ),
                    SizedBox(height: context.h(18)),

                    // Text "Lupa Password?"

                    Align(
                      alignment: Alignment.centerRight,
                      child: InkWell(
                        onTap: () {
                          context.router.push(const ResetPasswordRoute());
                        },
                        child: const Text(
                          'Lupa Password?',
                          style: TextStyle(
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ),

                    // Button for login
                    BlocBuilder<AuthCubit, AuthState>(
                      builder: (context, state) {
                        return Padding(
                          padding: EdgeInsets.only(top: context.h(40)),
                          child: SizedBox(
                            width: double.infinity,
                            child: ElevatedButton(
                              onPressed: () {
                                context.read<AuthCubit>().login(
                                      emailCtr.text,
                                      pwdCtr.text,
                                    );
                              },
                              style: ElevatedButton.styleFrom(
                                backgroundColor: const Color(0xFF04339B),
                                padding: EdgeInsets.all(context.h(16)),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                minimumSize:
                                    Size(context.w(200), context.h(50)),
                              ),
                              child: state.maybeMap(
                                orElse: () => Text(
                                  'MASUK',
                                  style: TextStyle(
                                    fontWeight: FontWeight.w500,
                                    fontSize: context.sp(16),
                                    color: Colors.white,
                                  ),
                                ),
                                loginLoading: (e) =>
                                    const CircularProgressIndicator(),
                              ),
                            ),
                          ),
                        );
                      },
                    ),

                    // Button for forgot password
                    Padding(
                      padding: EdgeInsets.only(top: context.h(30)),
                      child: TextButton(
                        onPressed: () {
                          context.router.push(const SignUpRoute());
                        },
                        child: const Text('Daftar Akun'),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/core/config/router/app_router.dart';
import 'package:proker/src/core/config/themes/app_colors.dart';
import 'package:proker/src/core/utils/show_snackbar.dart';
import 'package:proker/src/features/auth/presentation/bloc/auth/auth_cubit.dart';

@RoutePage()
class SignUpPage extends StatefulWidget {
  const SignUpPage({super.key});

  @override
  State<SignUpPage> createState() => _SignUpPageState();
}

class _SignUpPageState extends State<SignUpPage> {
  final emailCtr = TextEditingController(text: "admin@gmail.com");
  final nameCtr = TextEditingController(text: "Admin");
  final pwdCtr = TextEditingController(text: "admin123");
  final pwdConCtr = TextEditingController(text: "admin123");
  final formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => getIt<AuthCubit>(),
      child: BlocListener<AuthCubit, AuthState>(
        listener: (context, state) {
          if (state is AuthRegisterFailureState) {
            showSnackBar(context, Colors.red, state.message);
          } else if (state is AuthAuthenticatedState) {
            showSnackBar(context, Colors.green, "Register success");
            context.router.replaceAll([const HomeRoute()]);
          }
        },
        child: Scaffold(
          appBar: AppBar(),
          body: Container(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: ListView(
              children: [
                const Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      "Create an account!",
                      style:
                          TextStyle(fontSize: 30, fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 10),
                    Text("Create an account so you can use this application")
                  ],
                ),
                const SizedBox(height: 30),
                Form(
                  key: formKey,
                  autovalidateMode: AutovalidateMode.onUserInteraction,
                  child: Column(
                    children: [
                      TextFormField(
                        controller: nameCtr,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return "Name can not be empty";
                          }
                          return null;
                        },
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          labelText: "Name",
                        ),
                      ),
                      const SizedBox(height: 20),
                      TextFormField(
                        controller: emailCtr,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return "Email can not be empty";
                          }
                          final email = RegExp(
                                  r"^[a-zA-Z0-9.a-zA-Z0-9.!#$%&'*+-/=?^_`{|}~]+@[a-zA-Z0-9]+\.[a-zA-Z]+")
                              .hasMatch(value);
                          if (email == false) {
                            return "Email is not valid";
                          }
                          return null;
                        },
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          labelText: "Email",
                        ),
                      ),
                      const SizedBox(height: 20),
                      TextFormField(
                        controller: pwdCtr,
                        validator: (value) {
                          if (value == null || value.length < 6) {
                            return "Password min 6 chars";
                          }
                          return null;
                        },
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          labelText: "Password",
                        ),
                      ),
                      const SizedBox(height: 20),
                      TextFormField(
                        validator: (value) {
                          if (value == null || value.length < 6) {
                            return "Password min 6 chars";
                          }
                          if (value != pwdCtr.text) {
                            return "Password doesn't match";
                          }
                          return null;
                        },
                        controller: pwdConCtr,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                          labelText: "Password Confirmation",
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 20),
                Column(
                  children: [
                    BlocBuilder<AuthCubit, AuthState>(
                      builder: (context, state) {
                        return ElevatedButton(
                          onPressed: () {
                            if (formKey.currentState?.validate() == true) {
                              context.read<AuthCubit>().register(
                                    email: emailCtr.text,
                                    password: pwdCtr.text,
                                    confirmPassword: pwdConCtr.text,
                                    name: nameCtr.text,
                                  );
                            }
                          },
                          child: state.maybeMap(
                            orElse: () => const Text("Sign Up"),
                            registerLoading: (e) =>
                                const CircularProgressIndicator(),
                          ),
                        );
                      },
                    ),
                    const SizedBox(height: 20),
                    Row(
                      children: [
                        Expanded(
                            child: Divider(
                          color: Colors.grey.shade400,
                          thickness: 1.5,
                        )),
                        const SizedBox(width: 20),
                        Text(
                          "Or Sign Up with",
                          style: TextStyle(color: Colors.grey.shade500),
                        ),
                        const SizedBox(width: 20),
                        Expanded(
                            child: Divider(
                          color: Colors.grey.shade400,
                          thickness: 1.5,
                        )),
                      ],
                    ),
                    const SizedBox(height: 20),
                    RichText(
                      text: TextSpan(
                          style: const TextStyle(
                            color: Colors.grey,
                            fontWeight: FontWeight.bold,
                          ),
                          children: [
                            const TextSpan(text: "I already have an account"),
                            const TextSpan(text: " "),
                            TextSpan(
                              text: "Sign In",
                              recognizer: TapGestureRecognizer()
                                ..onTap = () {
                                  context.replaceRoute(SignInRoute());
                                },
                              style: const TextStyle(
                                color: AppColors.primary,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ]),
                    )
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
import 'package:flutter_chat_types/flutter_chat_types.dart';
import 'package:flutter_firebase_chat_core/flutter_firebase_chat_core.dart';
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/features/chat/domain/repositories/chat_repository.dart';

@Singleton(as: ChatRepository)
class ChatDatasource implements ChatRepository {
  ChatDatasource(this.fbChatCore);
  final FirebaseChatCore fbChatCore;

  @override
  Stream<Either<String, List<Message>>> watchMessages(Room room) async* {
    yield* fbChatCore.messages(room).map((event) => right(event));
  }

  @override
  Future<Either<String, Unit>> sendMessage(
      dynamic message, String roomId) async {
    fbChatCore.sendMessage(message, roomId);
    return right(unit);
  }
}
import 'package:flutter_chat_types/flutter_chat_types.dart';
import 'package:flutter_firebase_chat_core/flutter_firebase_chat_core.dart';
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/features/chat/domain/repositories/friend_repository.dart';

@Singleton(as: FriendRepository)
class FriendDatasource implements FriendRepository {
  FriendDatasource(this.fbChatCore);
  final FirebaseChatCore fbChatCore;

  @override
  Stream<Either<String, List<User>>> watchFriends() async* {
    yield* fbChatCore.users().map((event) => right(event));
  }
}
import 'package:flutter_chat_types/flutter_chat_types.dart';
import 'package:flutter_firebase_chat_core/flutter_firebase_chat_core.dart';
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/features/chat/domain/repositories/room_repository.dart';

@Singleton(as: RoomRepository)
class RoomDatasource implements RoomRepository {
  RoomDatasource(this.fbChatCore);
  final FirebaseChatCore fbChatCore;

  @override
  Stream<Either<String, List<Room>>> watchRooms() async* {
    yield* fbChatCore.rooms().map((event) => right(event));
  }

  @override
  Future<Either<String, Room>> createSingleRoom(User otherUser) async {
    try {
      final newRoom = await fbChatCore.createRoom(otherUser);
      return right(newRoom);
    } catch (e) {
      return left("SERVER ERROR");
    }
  }
}
import 'package:flutter_chat_types/flutter_chat_types.dart' as types;
import 'package:fpdart/fpdart.dart';

abstract class ChatRepository {
  Stream<Either<String, List<types.Message>>> watchMessages(types.Room room);
  Future<Either<String, Unit>> sendMessage(dynamic message, String roomId);
}
import 'package:flutter_chat_types/flutter_chat_types.dart' as types;
import 'package:fpdart/fpdart.dart';

abstract class FriendRepository {
  Stream<Either<String, List<types.User>>> watchFriends();
}
import 'package:flutter_chat_types/flutter_chat_types.dart' as types;
import 'package:fpdart/fpdart.dart';

abstract class RoomRepository {
  Stream<Either<String, List<types.Room>>> watchRooms();
  Future<Either<String, types.Room>> createSingleRoom(types.User otherUser);
}
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_chat_types/flutter_chat_types.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/features/chat/domain/repositories/friend_repository.dart';

part 'friend_state.dart';
part 'friend_cubit.freezed.dart';

@injectable
class FriendCubit extends Cubit<FriendState> {
  FriendCubit(this.friendRepository) : super(const FriendState.initial());
  final FriendRepository friendRepository;

  void streamAllFriends() async {
    emit(const FriendState.loading());
    friendRepository.watchFriends().listen((event) {
      event.fold(
        (l) {
          emit(const FriendState.error("Error"));
        },
        (r) {
          emit(FriendState.success(r));
        },
      );
    });
  }
}
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'friend_cubit.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$FriendState {
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<User> users) success,
    required TResult Function(String errMsg) error,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<User> users)? success,
    TResult? Function(String errMsg)? error,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<User> users)? success,
    TResult Function(String errMsg)? error,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $FriendStateCopyWith<$Res> {
  factory $FriendStateCopyWith(
          FriendState value, $Res Function(FriendState) then) =
      _$FriendStateCopyWithImpl<$Res, FriendState>;
}

/// @nodoc
class _$FriendStateCopyWithImpl<$Res, $Val extends FriendState>
    implements $FriendStateCopyWith<$Res> {
  _$FriendStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of FriendState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc
abstract class _$$InitialImplCopyWith<$Res> {
  factory _$$InitialImplCopyWith(
          _$InitialImpl value, $Res Function(_$InitialImpl) then) =
      __$$InitialImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$InitialImplCopyWithImpl<$Res>
    extends _$FriendStateCopyWithImpl<$Res, _$InitialImpl>
    implements _$$InitialImplCopyWith<$Res> {
  __$$InitialImplCopyWithImpl(
      _$InitialImpl _value, $Res Function(_$InitialImpl) _then)
      : super(_value, _then);

  /// Create a copy of FriendState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$InitialImpl implements _Initial {
  const _$InitialImpl();

  @override
  String toString() {
    return 'FriendState.initial()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$InitialImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<User> users) success,
    required TResult Function(String errMsg) error,
  }) {
    return initial();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<User> users)? success,
    TResult? Function(String errMsg)? error,
  }) {
    return initial?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<User> users)? success,
    TResult Function(String errMsg)? error,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
  }) {
    return initial(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
  }) {
    return initial?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial(this);
    }
    return orElse();
  }
}

abstract class _Initial implements FriendState {
  const factory _Initial() = _$InitialImpl;
}

/// @nodoc
abstract class _$$LoadingImplCopyWith<$Res> {
  factory _$$LoadingImplCopyWith(
          _$LoadingImpl value, $Res Function(_$LoadingImpl) then) =
      __$$LoadingImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$LoadingImplCopyWithImpl<$Res>
    extends _$FriendStateCopyWithImpl<$Res, _$LoadingImpl>
    implements _$$LoadingImplCopyWith<$Res> {
  __$$LoadingImplCopyWithImpl(
      _$LoadingImpl _value, $Res Function(_$LoadingImpl) _then)
      : super(_value, _then);

  /// Create a copy of FriendState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$LoadingImpl implements _Loading {
  const _$LoadingImpl();

  @override
  String toString() {
    return 'FriendState.loading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$LoadingImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<User> users) success,
    required TResult Function(String errMsg) error,
  }) {
    return loading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<User> users)? success,
    TResult? Function(String errMsg)? error,
  }) {
    return loading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<User> users)? success,
    TResult Function(String errMsg)? error,
    required TResult orElse(),
  }) {
    if (loading != null) {
      return loading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
  }) {
    return loading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
  }) {
    return loading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    required TResult orElse(),
  }) {
    if (loading != null) {
      return loading(this);
    }
    return orElse();
  }
}

abstract class _Loading implements FriendState {
  const factory _Loading() = _$LoadingImpl;
}

/// @nodoc
abstract class _$$SuccessImplCopyWith<$Res> {
  factory _$$SuccessImplCopyWith(
          _$SuccessImpl value, $Res Function(_$SuccessImpl) then) =
      __$$SuccessImplCopyWithImpl<$Res>;
  @useResult
  $Res call({List<User> users});
}

/// @nodoc
class __$$SuccessImplCopyWithImpl<$Res>
    extends _$FriendStateCopyWithImpl<$Res, _$SuccessImpl>
    implements _$$SuccessImplCopyWith<$Res> {
  __$$SuccessImplCopyWithImpl(
      _$SuccessImpl _value, $Res Function(_$SuccessImpl) _then)
      : super(_value, _then);

  /// Create a copy of FriendState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? users = null,
  }) {
    return _then(_$SuccessImpl(
      null == users
          ? _value._users
          : users // ignore: cast_nullable_to_non_nullable
              as List<User>,
    ));
  }
}

/// @nodoc

class _$SuccessImpl implements _Success {
  const _$SuccessImpl(final List<User> users) : _users = users;

  final List<User> _users;
  @override
  List<User> get users {
    if (_users is EqualUnmodifiableListView) return _users;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_users);
  }

  @override
  String toString() {
    return 'FriendState.success(users: $users)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SuccessImpl &&
            const DeepCollectionEquality().equals(other._users, _users));
  }

  @override
  int get hashCode =>
      Object.hash(runtimeType, const DeepCollectionEquality().hash(_users));

  /// Create a copy of FriendState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$SuccessImplCopyWith<_$SuccessImpl> get copyWith =>
      __$$SuccessImplCopyWithImpl<_$SuccessImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<User> users) success,
    required TResult Function(String errMsg) error,
  }) {
    return success(users);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<User> users)? success,
    TResult? Function(String errMsg)? error,
  }) {
    return success?.call(users);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<User> users)? success,
    TResult Function(String errMsg)? error,
    required TResult orElse(),
  }) {
    if (success != null) {
      return success(users);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
  }) {
    return success(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
  }) {
    return success?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    required TResult orElse(),
  }) {
    if (success != null) {
      return success(this);
    }
    return orElse();
  }
}

abstract class _Success implements FriendState {
  const factory _Success(final List<User> users) = _$SuccessImpl;

  List<User> get users;

  /// Create a copy of FriendState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$SuccessImplCopyWith<_$SuccessImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ErrorImplCopyWith<$Res> {
  factory _$$ErrorImplCopyWith(
          _$ErrorImpl value, $Res Function(_$ErrorImpl) then) =
      __$$ErrorImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String errMsg});
}

/// @nodoc
class __$$ErrorImplCopyWithImpl<$Res>
    extends _$FriendStateCopyWithImpl<$Res, _$ErrorImpl>
    implements _$$ErrorImplCopyWith<$Res> {
  __$$ErrorImplCopyWithImpl(
      _$ErrorImpl _value, $Res Function(_$ErrorImpl) _then)
      : super(_value, _then);

  /// Create a copy of FriendState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? errMsg = null,
  }) {
    return _then(_$ErrorImpl(
      null == errMsg
          ? _value.errMsg
          : errMsg // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$ErrorImpl implements _Error {
  const _$ErrorImpl(this.errMsg);

  @override
  final String errMsg;

  @override
  String toString() {
    return 'FriendState.error(errMsg: $errMsg)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ErrorImpl &&
            (identical(other.errMsg, errMsg) || other.errMsg == errMsg));
  }

  @override
  int get hashCode => Object.hash(runtimeType, errMsg);

  /// Create a copy of FriendState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$ErrorImplCopyWith<_$ErrorImpl> get copyWith =>
      __$$ErrorImplCopyWithImpl<_$ErrorImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<User> users) success,
    required TResult Function(String errMsg) error,
  }) {
    return error(errMsg);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<User> users)? success,
    TResult? Function(String errMsg)? error,
  }) {
    return error?.call(errMsg);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<User> users)? success,
    TResult Function(String errMsg)? error,
    required TResult orElse(),
  }) {
    if (error != null) {
      return error(errMsg);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
  }) {
    return error(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
  }) {
    return error?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    required TResult orElse(),
  }) {
    if (error != null) {
      return error(this);
    }
    return orElse();
  }
}

abstract class _Error implements FriendState {
  const factory _Error(final String errMsg) = _$ErrorImpl;

  String get errMsg;

  /// Create a copy of FriendState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$ErrorImplCopyWith<_$ErrorImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
part of 'friend_cubit.dart';

@freezed
class FriendState with _$FriendState {
  const factory FriendState.initial() = _Initial;
  const factory FriendState.loading() = _Loading;
  const factory FriendState.success(List<User> users) = _Success;
  const factory FriendState.error(String errMsg) = _Error;
}
import 'dart:async';

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_chat_types/flutter_chat_types.dart';
import 'package:fpdart/fpdart.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/features/chat/domain/repositories/chat_repository.dart';

part 'message_cubit.freezed.dart';
part 'message_state.dart';

@injectable
class MessageCubit extends Cubit<MessageState> {
  MessageCubit(this.chatRepository) : super(const MessageState.initial());
  final ChatRepository chatRepository;

  final Map<String, StreamSubscription<Either<String, List<Message>>>>
      _subscriptions = {};
  final Map<String, Message> _lastMessages = {};

  void streamMessages(Room room) {
    // Cancel existing subscription for the room if any
    _subscriptions[room.id]?.cancel();

    // Start a new subscription for the room
    final subscription = chatRepository.watchMessages(room).listen((event) {
      event.fold(
        (error) {
          emit(const MessageState.error());
        },
        (messages) {
          if (messages.isNotEmpty) {
            // Update the last message for this room
            _lastMessages[room.id] = messages.first;

            // Emit updated state with aggregated last messages
            emit(MessageState.onMessagesAndLastMessage(
                messages, Map.of(_lastMessages)));
          } else {
            _lastMessages.remove(room.id);
            emit(MessageState.onMessagesAndLastMessage(
                messages, Map.of(_lastMessages)));
          }
        },
      );
    });

    _subscriptions[room.id] = subscription;
  }

  void watchAllMessages(List<Room> rooms) {
    for (var room in rooms) {
      streamMessages(room);
    }
  }

  void sendTextMessage(PartialText text, String roomId) {
    chatRepository.sendMessage(text, roomId);
  }

  @override
  Future<void> close() {
    // Cancel all subscriptions
    for (var subscription in _subscriptions.values) {
      subscription.cancel();
    }
    _subscriptions.clear();
    return super.close();
  }
}
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'message_cubit.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$MessageState {
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function() error,
    required TResult Function(
            List<Message> messages, Map<String, Message> lastMessages)
        onMessagesAndLastMessage,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function()? error,
    TResult? Function(
            List<Message> messages, Map<String, Message> lastMessages)?
        onMessagesAndLastMessage,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function()? error,
    TResult Function(List<Message> messages, Map<String, Message> lastMessages)?
        onMessagesAndLastMessage,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Error value) error,
    required TResult Function(_OnMessagesAndLastMessage value)
        onMessagesAndLastMessage,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnMessagesAndLastMessage value)?
        onMessagesAndLastMessage,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Error value)? error,
    TResult Function(_OnMessagesAndLastMessage value)? onMessagesAndLastMessage,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $MessageStateCopyWith<$Res> {
  factory $MessageStateCopyWith(
          MessageState value, $Res Function(MessageState) then) =
      _$MessageStateCopyWithImpl<$Res, MessageState>;
}

/// @nodoc
class _$MessageStateCopyWithImpl<$Res, $Val extends MessageState>
    implements $MessageStateCopyWith<$Res> {
  _$MessageStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of MessageState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc
abstract class _$$InitialImplCopyWith<$Res> {
  factory _$$InitialImplCopyWith(
          _$InitialImpl value, $Res Function(_$InitialImpl) then) =
      __$$InitialImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$InitialImplCopyWithImpl<$Res>
    extends _$MessageStateCopyWithImpl<$Res, _$InitialImpl>
    implements _$$InitialImplCopyWith<$Res> {
  __$$InitialImplCopyWithImpl(
      _$InitialImpl _value, $Res Function(_$InitialImpl) _then)
      : super(_value, _then);

  /// Create a copy of MessageState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$InitialImpl implements _Initial {
  const _$InitialImpl();

  @override
  String toString() {
    return 'MessageState.initial()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$InitialImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function() error,
    required TResult Function(
            List<Message> messages, Map<String, Message> lastMessages)
        onMessagesAndLastMessage,
  }) {
    return initial();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function()? error,
    TResult? Function(
            List<Message> messages, Map<String, Message> lastMessages)?
        onMessagesAndLastMessage,
  }) {
    return initial?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function()? error,
    TResult Function(List<Message> messages, Map<String, Message> lastMessages)?
        onMessagesAndLastMessage,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Error value) error,
    required TResult Function(_OnMessagesAndLastMessage value)
        onMessagesAndLastMessage,
  }) {
    return initial(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnMessagesAndLastMessage value)?
        onMessagesAndLastMessage,
  }) {
    return initial?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Error value)? error,
    TResult Function(_OnMessagesAndLastMessage value)? onMessagesAndLastMessage,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial(this);
    }
    return orElse();
  }
}

abstract class _Initial implements MessageState {
  const factory _Initial() = _$InitialImpl;
}

/// @nodoc
abstract class _$$LoadingImplCopyWith<$Res> {
  factory _$$LoadingImplCopyWith(
          _$LoadingImpl value, $Res Function(_$LoadingImpl) then) =
      __$$LoadingImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$LoadingImplCopyWithImpl<$Res>
    extends _$MessageStateCopyWithImpl<$Res, _$LoadingImpl>
    implements _$$LoadingImplCopyWith<$Res> {
  __$$LoadingImplCopyWithImpl(
      _$LoadingImpl _value, $Res Function(_$LoadingImpl) _then)
      : super(_value, _then);

  /// Create a copy of MessageState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$LoadingImpl implements _Loading {
  const _$LoadingImpl();

  @override
  String toString() {
    return 'MessageState.loading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$LoadingImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function() error,
    required TResult Function(
            List<Message> messages, Map<String, Message> lastMessages)
        onMessagesAndLastMessage,
  }) {
    return loading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function()? error,
    TResult? Function(
            List<Message> messages, Map<String, Message> lastMessages)?
        onMessagesAndLastMessage,
  }) {
    return loading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function()? error,
    TResult Function(List<Message> messages, Map<String, Message> lastMessages)?
        onMessagesAndLastMessage,
    required TResult orElse(),
  }) {
    if (loading != null) {
      return loading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Error value) error,
    required TResult Function(_OnMessagesAndLastMessage value)
        onMessagesAndLastMessage,
  }) {
    return loading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnMessagesAndLastMessage value)?
        onMessagesAndLastMessage,
  }) {
    return loading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Error value)? error,
    TResult Function(_OnMessagesAndLastMessage value)? onMessagesAndLastMessage,
    required TResult orElse(),
  }) {
    if (loading != null) {
      return loading(this);
    }
    return orElse();
  }
}

abstract class _Loading implements MessageState {
  const factory _Loading() = _$LoadingImpl;
}

/// @nodoc
abstract class _$$ErrorImplCopyWith<$Res> {
  factory _$$ErrorImplCopyWith(
          _$ErrorImpl value, $Res Function(_$ErrorImpl) then) =
      __$$ErrorImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$ErrorImplCopyWithImpl<$Res>
    extends _$MessageStateCopyWithImpl<$Res, _$ErrorImpl>
    implements _$$ErrorImplCopyWith<$Res> {
  __$$ErrorImplCopyWithImpl(
      _$ErrorImpl _value, $Res Function(_$ErrorImpl) _then)
      : super(_value, _then);

  /// Create a copy of MessageState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$ErrorImpl implements _Error {
  const _$ErrorImpl();

  @override
  String toString() {
    return 'MessageState.error()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$ErrorImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function() error,
    required TResult Function(
            List<Message> messages, Map<String, Message> lastMessages)
        onMessagesAndLastMessage,
  }) {
    return error();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function()? error,
    TResult? Function(
            List<Message> messages, Map<String, Message> lastMessages)?
        onMessagesAndLastMessage,
  }) {
    return error?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function()? error,
    TResult Function(List<Message> messages, Map<String, Message> lastMessages)?
        onMessagesAndLastMessage,
    required TResult orElse(),
  }) {
    if (error != null) {
      return error();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Error value) error,
    required TResult Function(_OnMessagesAndLastMessage value)
        onMessagesAndLastMessage,
  }) {
    return error(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnMessagesAndLastMessage value)?
        onMessagesAndLastMessage,
  }) {
    return error?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Error value)? error,
    TResult Function(_OnMessagesAndLastMessage value)? onMessagesAndLastMessage,
    required TResult orElse(),
  }) {
    if (error != null) {
      return error(this);
    }
    return orElse();
  }
}

abstract class _Error implements MessageState {
  const factory _Error() = _$ErrorImpl;
}

/// @nodoc
abstract class _$$OnMessagesAndLastMessageImplCopyWith<$Res> {
  factory _$$OnMessagesAndLastMessageImplCopyWith(
          _$OnMessagesAndLastMessageImpl value,
          $Res Function(_$OnMessagesAndLastMessageImpl) then) =
      __$$OnMessagesAndLastMessageImplCopyWithImpl<$Res>;
  @useResult
  $Res call({List<Message> messages, Map<String, Message> lastMessages});
}

/// @nodoc
class __$$OnMessagesAndLastMessageImplCopyWithImpl<$Res>
    extends _$MessageStateCopyWithImpl<$Res, _$OnMessagesAndLastMessageImpl>
    implements _$$OnMessagesAndLastMessageImplCopyWith<$Res> {
  __$$OnMessagesAndLastMessageImplCopyWithImpl(
      _$OnMessagesAndLastMessageImpl _value,
      $Res Function(_$OnMessagesAndLastMessageImpl) _then)
      : super(_value, _then);

  /// Create a copy of MessageState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? messages = null,
    Object? lastMessages = null,
  }) {
    return _then(_$OnMessagesAndLastMessageImpl(
      null == messages
          ? _value._messages
          : messages // ignore: cast_nullable_to_non_nullable
              as List<Message>,
      null == lastMessages
          ? _value._lastMessages
          : lastMessages // ignore: cast_nullable_to_non_nullable
              as Map<String, Message>,
    ));
  }
}

/// @nodoc

class _$OnMessagesAndLastMessageImpl implements _OnMessagesAndLastMessage {
  const _$OnMessagesAndLastMessageImpl(
      final List<Message> messages, final Map<String, Message> lastMessages)
      : _messages = messages,
        _lastMessages = lastMessages;

  final List<Message> _messages;
  @override
  List<Message> get messages {
    if (_messages is EqualUnmodifiableListView) return _messages;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_messages);
  }

  final Map<String, Message> _lastMessages;
  @override
  Map<String, Message> get lastMessages {
    if (_lastMessages is EqualUnmodifiableMapView) return _lastMessages;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(_lastMessages);
  }

  @override
  String toString() {
    return 'MessageState.onMessagesAndLastMessage(messages: $messages, lastMessages: $lastMessages)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$OnMessagesAndLastMessageImpl &&
            const DeepCollectionEquality().equals(other._messages, _messages) &&
            const DeepCollectionEquality()
                .equals(other._lastMessages, _lastMessages));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      const DeepCollectionEquality().hash(_messages),
      const DeepCollectionEquality().hash(_lastMessages));

  /// Create a copy of MessageState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$OnMessagesAndLastMessageImplCopyWith<_$OnMessagesAndLastMessageImpl>
      get copyWith => __$$OnMessagesAndLastMessageImplCopyWithImpl<
          _$OnMessagesAndLastMessageImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function() error,
    required TResult Function(
            List<Message> messages, Map<String, Message> lastMessages)
        onMessagesAndLastMessage,
  }) {
    return onMessagesAndLastMessage(messages, lastMessages);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function()? error,
    TResult? Function(
            List<Message> messages, Map<String, Message> lastMessages)?
        onMessagesAndLastMessage,
  }) {
    return onMessagesAndLastMessage?.call(messages, lastMessages);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function()? error,
    TResult Function(List<Message> messages, Map<String, Message> lastMessages)?
        onMessagesAndLastMessage,
    required TResult orElse(),
  }) {
    if (onMessagesAndLastMessage != null) {
      return onMessagesAndLastMessage(messages, lastMessages);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Error value) error,
    required TResult Function(_OnMessagesAndLastMessage value)
        onMessagesAndLastMessage,
  }) {
    return onMessagesAndLastMessage(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnMessagesAndLastMessage value)?
        onMessagesAndLastMessage,
  }) {
    return onMessagesAndLastMessage?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Error value)? error,
    TResult Function(_OnMessagesAndLastMessage value)? onMessagesAndLastMessage,
    required TResult orElse(),
  }) {
    if (onMessagesAndLastMessage != null) {
      return onMessagesAndLastMessage(this);
    }
    return orElse();
  }
}

abstract class _OnMessagesAndLastMessage implements MessageState {
  const factory _OnMessagesAndLastMessage(final List<Message> messages,
      final Map<String, Message> lastMessages) = _$OnMessagesAndLastMessageImpl;

  List<Message> get messages;
  Map<String, Message> get lastMessages;

  /// Create a copy of MessageState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$OnMessagesAndLastMessageImplCopyWith<_$OnMessagesAndLastMessageImpl>
      get copyWith => throw _privateConstructorUsedError;
}
part of 'message_cubit.dart';

@freezed
class MessageState with _$MessageState {
  const factory MessageState.initial() = _Initial;
  const factory MessageState.loading() = _Loading;
  const factory MessageState.error() = _Error;
  const factory MessageState.onMessagesAndLastMessage(
          List<Message> messages, Map<String, Message> lastMessages) =
      _OnMessagesAndLastMessage;
}
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_chat_types/flutter_chat_types.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/features/chat/domain/repositories/room_repository.dart';

part 'room_state.dart';
part 'room_cubit.freezed.dart';

@injectable
class RoomCubit extends Cubit<RoomState> {
  RoomCubit(this.roomRepository) : super(const RoomState.initial());
  RoomRepository roomRepository;
  void watchAllRooms() {
    emit(const RoomState.loading());
    roomRepository.watchRooms().listen((event) {
      event.fold(
        (l) => emit(const RoomState.error("Error")),
        (r) => emit(RoomState.success(r)),
      );
    });
  }

  void createSingleRoom(User user) async {
    emit(const RoomState.loading());
    final result = await roomRepository.createSingleRoom(user);
    result.fold(
      (l) => emit(RoomState.error(l)),
      (r) => emit(RoomState.onRoomCreated(r)),
    );
  }
}
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'room_cubit.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$RoomState {
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<Room> rooms) success,
    required TResult Function(String errMsg) error,
    required TResult Function(Room room) onRoomCreated,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<Room> rooms)? success,
    TResult? Function(String errMsg)? error,
    TResult? Function(Room room)? onRoomCreated,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<Room> rooms)? success,
    TResult Function(String errMsg)? error,
    TResult Function(Room room)? onRoomCreated,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
    required TResult Function(_OnRoomCreated value) onRoomCreated,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnRoomCreated value)? onRoomCreated,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    TResult Function(_OnRoomCreated value)? onRoomCreated,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $RoomStateCopyWith<$Res> {
  factory $RoomStateCopyWith(RoomState value, $Res Function(RoomState) then) =
      _$RoomStateCopyWithImpl<$Res, RoomState>;
}

/// @nodoc
class _$RoomStateCopyWithImpl<$Res, $Val extends RoomState>
    implements $RoomStateCopyWith<$Res> {
  _$RoomStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc
abstract class _$$InitialImplCopyWith<$Res> {
  factory _$$InitialImplCopyWith(
          _$InitialImpl value, $Res Function(_$InitialImpl) then) =
      __$$InitialImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$InitialImplCopyWithImpl<$Res>
    extends _$RoomStateCopyWithImpl<$Res, _$InitialImpl>
    implements _$$InitialImplCopyWith<$Res> {
  __$$InitialImplCopyWithImpl(
      _$InitialImpl _value, $Res Function(_$InitialImpl) _then)
      : super(_value, _then);

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$InitialImpl implements _Initial {
  const _$InitialImpl();

  @override
  String toString() {
    return 'RoomState.initial()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$InitialImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<Room> rooms) success,
    required TResult Function(String errMsg) error,
    required TResult Function(Room room) onRoomCreated,
  }) {
    return initial();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<Room> rooms)? success,
    TResult? Function(String errMsg)? error,
    TResult? Function(Room room)? onRoomCreated,
  }) {
    return initial?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<Room> rooms)? success,
    TResult Function(String errMsg)? error,
    TResult Function(Room room)? onRoomCreated,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
    required TResult Function(_OnRoomCreated value) onRoomCreated,
  }) {
    return initial(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnRoomCreated value)? onRoomCreated,
  }) {
    return initial?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    TResult Function(_OnRoomCreated value)? onRoomCreated,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial(this);
    }
    return orElse();
  }
}

abstract class _Initial implements RoomState {
  const factory _Initial() = _$InitialImpl;
}

/// @nodoc
abstract class _$$LoadingImplCopyWith<$Res> {
  factory _$$LoadingImplCopyWith(
          _$LoadingImpl value, $Res Function(_$LoadingImpl) then) =
      __$$LoadingImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$LoadingImplCopyWithImpl<$Res>
    extends _$RoomStateCopyWithImpl<$Res, _$LoadingImpl>
    implements _$$LoadingImplCopyWith<$Res> {
  __$$LoadingImplCopyWithImpl(
      _$LoadingImpl _value, $Res Function(_$LoadingImpl) _then)
      : super(_value, _then);

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$LoadingImpl implements _Loading {
  const _$LoadingImpl();

  @override
  String toString() {
    return 'RoomState.loading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$LoadingImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<Room> rooms) success,
    required TResult Function(String errMsg) error,
    required TResult Function(Room room) onRoomCreated,
  }) {
    return loading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<Room> rooms)? success,
    TResult? Function(String errMsg)? error,
    TResult? Function(Room room)? onRoomCreated,
  }) {
    return loading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<Room> rooms)? success,
    TResult Function(String errMsg)? error,
    TResult Function(Room room)? onRoomCreated,
    required TResult orElse(),
  }) {
    if (loading != null) {
      return loading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
    required TResult Function(_OnRoomCreated value) onRoomCreated,
  }) {
    return loading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnRoomCreated value)? onRoomCreated,
  }) {
    return loading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    TResult Function(_OnRoomCreated value)? onRoomCreated,
    required TResult orElse(),
  }) {
    if (loading != null) {
      return loading(this);
    }
    return orElse();
  }
}

abstract class _Loading implements RoomState {
  const factory _Loading() = _$LoadingImpl;
}

/// @nodoc
abstract class _$$SuccessImplCopyWith<$Res> {
  factory _$$SuccessImplCopyWith(
          _$SuccessImpl value, $Res Function(_$SuccessImpl) then) =
      __$$SuccessImplCopyWithImpl<$Res>;
  @useResult
  $Res call({List<Room> rooms});
}

/// @nodoc
class __$$SuccessImplCopyWithImpl<$Res>
    extends _$RoomStateCopyWithImpl<$Res, _$SuccessImpl>
    implements _$$SuccessImplCopyWith<$Res> {
  __$$SuccessImplCopyWithImpl(
      _$SuccessImpl _value, $Res Function(_$SuccessImpl) _then)
      : super(_value, _then);

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? rooms = null,
  }) {
    return _then(_$SuccessImpl(
      null == rooms
          ? _value._rooms
          : rooms // ignore: cast_nullable_to_non_nullable
              as List<Room>,
    ));
  }
}

/// @nodoc

class _$SuccessImpl implements _Success {
  const _$SuccessImpl(final List<Room> rooms) : _rooms = rooms;

  final List<Room> _rooms;
  @override
  List<Room> get rooms {
    if (_rooms is EqualUnmodifiableListView) return _rooms;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_rooms);
  }

  @override
  String toString() {
    return 'RoomState.success(rooms: $rooms)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SuccessImpl &&
            const DeepCollectionEquality().equals(other._rooms, _rooms));
  }

  @override
  int get hashCode =>
      Object.hash(runtimeType, const DeepCollectionEquality().hash(_rooms));

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$SuccessImplCopyWith<_$SuccessImpl> get copyWith =>
      __$$SuccessImplCopyWithImpl<_$SuccessImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<Room> rooms) success,
    required TResult Function(String errMsg) error,
    required TResult Function(Room room) onRoomCreated,
  }) {
    return success(rooms);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<Room> rooms)? success,
    TResult? Function(String errMsg)? error,
    TResult? Function(Room room)? onRoomCreated,
  }) {
    return success?.call(rooms);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<Room> rooms)? success,
    TResult Function(String errMsg)? error,
    TResult Function(Room room)? onRoomCreated,
    required TResult orElse(),
  }) {
    if (success != null) {
      return success(rooms);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
    required TResult Function(_OnRoomCreated value) onRoomCreated,
  }) {
    return success(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnRoomCreated value)? onRoomCreated,
  }) {
    return success?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    TResult Function(_OnRoomCreated value)? onRoomCreated,
    required TResult orElse(),
  }) {
    if (success != null) {
      return success(this);
    }
    return orElse();
  }
}

abstract class _Success implements RoomState {
  const factory _Success(final List<Room> rooms) = _$SuccessImpl;

  List<Room> get rooms;

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$SuccessImplCopyWith<_$SuccessImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ErrorImplCopyWith<$Res> {
  factory _$$ErrorImplCopyWith(
          _$ErrorImpl value, $Res Function(_$ErrorImpl) then) =
      __$$ErrorImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String errMsg});
}

/// @nodoc
class __$$ErrorImplCopyWithImpl<$Res>
    extends _$RoomStateCopyWithImpl<$Res, _$ErrorImpl>
    implements _$$ErrorImplCopyWith<$Res> {
  __$$ErrorImplCopyWithImpl(
      _$ErrorImpl _value, $Res Function(_$ErrorImpl) _then)
      : super(_value, _then);

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? errMsg = null,
  }) {
    return _then(_$ErrorImpl(
      null == errMsg
          ? _value.errMsg
          : errMsg // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$ErrorImpl implements _Error {
  const _$ErrorImpl(this.errMsg);

  @override
  final String errMsg;

  @override
  String toString() {
    return 'RoomState.error(errMsg: $errMsg)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ErrorImpl &&
            (identical(other.errMsg, errMsg) || other.errMsg == errMsg));
  }

  @override
  int get hashCode => Object.hash(runtimeType, errMsg);

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$ErrorImplCopyWith<_$ErrorImpl> get copyWith =>
      __$$ErrorImplCopyWithImpl<_$ErrorImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<Room> rooms) success,
    required TResult Function(String errMsg) error,
    required TResult Function(Room room) onRoomCreated,
  }) {
    return error(errMsg);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<Room> rooms)? success,
    TResult? Function(String errMsg)? error,
    TResult? Function(Room room)? onRoomCreated,
  }) {
    return error?.call(errMsg);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<Room> rooms)? success,
    TResult Function(String errMsg)? error,
    TResult Function(Room room)? onRoomCreated,
    required TResult orElse(),
  }) {
    if (error != null) {
      return error(errMsg);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
    required TResult Function(_OnRoomCreated value) onRoomCreated,
  }) {
    return error(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnRoomCreated value)? onRoomCreated,
  }) {
    return error?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    TResult Function(_OnRoomCreated value)? onRoomCreated,
    required TResult orElse(),
  }) {
    if (error != null) {
      return error(this);
    }
    return orElse();
  }
}

abstract class _Error implements RoomState {
  const factory _Error(final String errMsg) = _$ErrorImpl;

  String get errMsg;

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$ErrorImplCopyWith<_$ErrorImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$OnRoomCreatedImplCopyWith<$Res> {
  factory _$$OnRoomCreatedImplCopyWith(
          _$OnRoomCreatedImpl value, $Res Function(_$OnRoomCreatedImpl) then) =
      __$$OnRoomCreatedImplCopyWithImpl<$Res>;
  @useResult
  $Res call({Room room});
}

/// @nodoc
class __$$OnRoomCreatedImplCopyWithImpl<$Res>
    extends _$RoomStateCopyWithImpl<$Res, _$OnRoomCreatedImpl>
    implements _$$OnRoomCreatedImplCopyWith<$Res> {
  __$$OnRoomCreatedImplCopyWithImpl(
      _$OnRoomCreatedImpl _value, $Res Function(_$OnRoomCreatedImpl) _then)
      : super(_value, _then);

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? room = null,
  }) {
    return _then(_$OnRoomCreatedImpl(
      null == room
          ? _value.room
          : room // ignore: cast_nullable_to_non_nullable
              as Room,
    ));
  }
}

/// @nodoc

class _$OnRoomCreatedImpl implements _OnRoomCreated {
  const _$OnRoomCreatedImpl(this.room);

  @override
  final Room room;

  @override
  String toString() {
    return 'RoomState.onRoomCreated(room: $room)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$OnRoomCreatedImpl &&
            (identical(other.room, room) || other.room == room));
  }

  @override
  int get hashCode => Object.hash(runtimeType, room);

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$OnRoomCreatedImplCopyWith<_$OnRoomCreatedImpl> get copyWith =>
      __$$OnRoomCreatedImplCopyWithImpl<_$OnRoomCreatedImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() loading,
    required TResult Function(List<Room> rooms) success,
    required TResult Function(String errMsg) error,
    required TResult Function(Room room) onRoomCreated,
  }) {
    return onRoomCreated(room);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? loading,
    TResult? Function(List<Room> rooms)? success,
    TResult? Function(String errMsg)? error,
    TResult? Function(Room room)? onRoomCreated,
  }) {
    return onRoomCreated?.call(room);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? loading,
    TResult Function(List<Room> rooms)? success,
    TResult Function(String errMsg)? error,
    TResult Function(Room room)? onRoomCreated,
    required TResult orElse(),
  }) {
    if (onRoomCreated != null) {
      return onRoomCreated(room);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_Loading value) loading,
    required TResult Function(_Success value) success,
    required TResult Function(_Error value) error,
    required TResult Function(_OnRoomCreated value) onRoomCreated,
  }) {
    return onRoomCreated(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_Loading value)? loading,
    TResult? Function(_Success value)? success,
    TResult? Function(_Error value)? error,
    TResult? Function(_OnRoomCreated value)? onRoomCreated,
  }) {
    return onRoomCreated?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_Loading value)? loading,
    TResult Function(_Success value)? success,
    TResult Function(_Error value)? error,
    TResult Function(_OnRoomCreated value)? onRoomCreated,
    required TResult orElse(),
  }) {
    if (onRoomCreated != null) {
      return onRoomCreated(this);
    }
    return orElse();
  }
}

abstract class _OnRoomCreated implements RoomState {
  const factory _OnRoomCreated(final Room room) = _$OnRoomCreatedImpl;

  Room get room;

  /// Create a copy of RoomState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$OnRoomCreatedImplCopyWith<_$OnRoomCreatedImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
part of 'room_cubit.dart';

@freezed
class RoomState with _$RoomState {
  const factory RoomState.initial() = _Initial;
  const factory RoomState.loading() = _Loading;
  const factory RoomState.success(List<Room> rooms) = _Success;
  const factory RoomState.error(String errMsg) = _Error;
  const factory RoomState.onRoomCreated(Room room) = _OnRoomCreated;
}
import 'dart:io';

import 'package:auto_route/annotations.dart';
import 'package:file_picker/file_picker.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_chat_types/flutter_chat_types.dart' as type;
import 'package:flutter_chat_ui/flutter_chat_ui.dart';
import 'package:flutter_firebase_chat_core/flutter_firebase_chat_core.dart';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart';
import 'package:mime/mime.dart';
import 'package:open_filex/open_filex.dart';
import 'package:path_provider/path_provider.dart';
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/features/auth/presentation/bloc/auth/auth_cubit.dart';
import 'package:proker/src/features/chat/presentation/bloc/message/message_cubit.dart';

@RoutePage()
class ChatPage extends StatefulWidget {
  const ChatPage({
    super.key,
    required this.room,
  });
  final type.Room room;

  @override
  State<ChatPage> createState() => _ChatPageState();
}

class _ChatPageState extends State<ChatPage> {
  bool _isAttachmentUploading = false;
  final messageCubit = getIt<MessageCubit>();
  late type.Room room;

  void onSendPressed(type.PartialText message) {
    //send message
    messageCubit.sendTextMessage(message, room.id);
  }

  @override
  void initState() {
    room = widget.room;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => messageCubit..streamMessages(room),
      child: Scaffold(
        appBar: AppBar(
          title: Text(
            room.name == null
                ? room.users.last.firstName.toString()
                : room.name!,
          ),
        ),
        body: BlocBuilder<MessageCubit, MessageState>(
          builder: (context, state) {
            return state.maybeMap(
              orElse: () {
                return Container();
              },
              loading: (_) {
                return const Center(child: CircularProgressIndicator());
              },
              onMessagesAndLastMessage: (value) {
                final authState = getIt<AuthCubit>().state;
                final currUserId = authState.maybeWhen(
                  authenticated: (user) => user.id,
                  orElse: () => null,
                );
                if (currUserId == null) {
                  return const Center(child: Text('User not authenticated'));
                }
                final currUser = room.users
                    .firstWhere((element) => element.id == currUserId);
                return Chat(
                  showUserAvatars: true,
                  messages: value.messages,
                  onSendPressed: onSendPressed,
                  user: currUser,
                  isAttachmentUploading: _isAttachmentUploading,
                  onAttachmentPressed: _handleAtachmentPressed,
                  onMessageTap: _handleMessageTap,
                  onPreviewDataFetched: _handlePreviewDataFetched,
                );
              },
            );
          },
        ),
      ),
    );
  }

  void _handleAtachmentPressed() {
    showModalBottomSheet<void>(
      context: context,
      builder: (BuildContext context) => SafeArea(
        child: SizedBox(
          height: 144,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.pop(context);
                  _handleImageSelection();
                },
                child: const Align(
                  alignment: Alignment.centerLeft,
                  child: Text('Photo'),
                ),
              ),
              TextButton(
                onPressed: () {
                  Navigator.pop(context);
                  _handleFileSelection();
                },
                child: const Align(
                  alignment: Alignment.centerLeft,
                  child: Text('File'),
                ),
              ),
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Align(
                  alignment: Alignment.centerLeft,
                  child: Text('Cancel'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _handleFileSelection() async {
    final result = await FilePicker.platform.pickFiles(
      type: FileType.any,
    );

    if (result != null && result.files.single.path != null) {
      _setAttachmentUploading(true);
      final name = result.files.single.name;
      final filePath = result.files.single.path!;
      final file = File(filePath);

      try {
        final reference = FirebaseStorage.instance.ref(name);
        await reference.putFile(file);
        final uri = await reference.getDownloadURL();

        final message = type.PartialFile(
          mimeType: lookupMimeType(filePath),
          name: name,
          size: result.files.single.size,
          uri: uri,
        );

        FirebaseChatCore.instance.sendMessage(message, widget.room.id);
        _setAttachmentUploading(false);
      } finally {
        _setAttachmentUploading(false);
      }
    }
  }

  void _handleImageSelection() async {
    final result = await ImagePicker().pickImage(
      imageQuality: 70,
      maxWidth: 1440,
      source: ImageSource.gallery,
    );

    if (result != null) {
      _setAttachmentUploading(true);
      final file = File(result.path);
      final size = file.lengthSync();
      final bytes = await result.readAsBytes();
      final image = await decodeImageFromList(bytes);
      final name = result.name;

      try {
        final reference = FirebaseStorage.instance.ref(name);
        await reference.putFile(file);
        final uri = await reference.getDownloadURL();

        final message = type.PartialImage(
          height: image.height.toDouble(),
          name: name,
          size: size,
          uri: uri,
          width: image.width.toDouble(),
        );

        FirebaseChatCore.instance.sendMessage(
          message,
          widget.room.id,
        );
        _setAttachmentUploading(false);
      } finally {
        _setAttachmentUploading(false);
      }
    }
  }

  void _handleMessageTap(BuildContext _, type.Message message) async {
    if (message is type.FileMessage) {
      var localPath = message.uri;

      if (message.uri.startsWith('http')) {
        try {
          final updatedMessage = message.copyWith(isLoading: true);
          FirebaseChatCore.instance.updateMessage(
            updatedMessage,
            widget.room.id,
          );

          final client = http.Client();
          final request = await client.get(Uri.parse(message.uri));
          final bytes = request.bodyBytes;
          final documentsDir = (await getApplicationDocumentsDirectory()).path;
          localPath = '$documentsDir/${message.name}';

          if (!File(localPath).existsSync()) {
            final file = File(localPath);
            await file.writeAsBytes(bytes);
          }
        } finally {
          final updatedMessage = message.copyWith(isLoading: false);
          FirebaseChatCore.instance.updateMessage(
            updatedMessage,
            widget.room.id,
          );
        }
      }

      await OpenFilex.open(localPath);
    }
  }

  void _handlePreviewDataFetched(
    type.TextMessage message,
    type.PreviewData previewData,
  ) {
    final updatedMessage = message.copyWith(previewData: previewData);

    FirebaseChatCore.instance.updateMessage(updatedMessage, widget.room.id);
  }

  void _setAttachmentUploading(bool uploading) {
    setState(() {
      _isAttachmentUploading = uploading;
    });
  }
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/core/config/router/app_router.dart';
import 'package:proker/src/features/chat/presentation/bloc/friend/friend_cubit.dart';
import 'package:proker/src/features/chat/presentation/bloc/room/room_cubit.dart';

@RoutePage()
class FriendPage extends StatefulWidget {
  const FriendPage({super.key});

  @override
  State<FriendPage> createState() => _FriendPageState();
}

class _FriendPageState extends State<FriendPage> {
  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (context) => getIt<FriendCubit>()..streamAllFriends(),
        ),
        BlocProvider(
          create: (context) => getIt<RoomCubit>(),
        ),
      ],
      child: BlocListener<RoomCubit, RoomState>(
        listener: (context, state) {
          state.maybeMap(
            orElse: () {},
            loading: (e) {},
            onRoomCreated: (resp) {
              context.router.popAndPush(ChatRoute(room: resp.room));
            },
          );
        },
        child: Scaffold(
          appBar: AppBar(
            title: const Text("Friend List"),
          ),
          body: BlocBuilder<FriendCubit, FriendState>(
            builder: (context, state) {
              return state.maybeMap(
                orElse: () {
                  return Container();
                },
                loading: (e) {
                  return const Center(child: CircularProgressIndicator());
                },
                success: (e) {
                  final users = e.users;
                  return BlocBuilder<RoomCubit, RoomState>(
                    builder: (context, state) {
                      return ListView.builder(
                        itemCount: users.length,
                        itemBuilder: (context, index) {
                          final singleUser = users[index];
                          return ListTile(
                            onTap: () {
                              //create room
                              context
                                  .read<RoomCubit>()
                                  .createSingleRoom(singleUser);
                            },
                            title: Text(singleUser.firstName ?? ""),
                            leading: CircleAvatar(
                              backgroundColor: Colors.amber,
                              backgroundImage:
                                  NetworkImage(singleUser.imageUrl ?? ""),
                            ),
                          );
                        },
                      );
                    },
                  );
                },
              );
            },
          ),
        ),
      ),
    );
  }
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_chat_types/flutter_chat_types.dart';
import 'package:proker/src/core/common/widgets/loader/loader.dart';
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/core/config/router/app_router.dart';
import 'package:proker/src/features/chat/presentation/bloc/message/message_cubit.dart';
import 'package:proker/src/features/chat/presentation/bloc/room/room_cubit.dart';

@RoutePage()
class RoomPage extends StatelessWidget {
  const RoomPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Chat"),
      ),
      body: MultiBlocProvider(
        providers: [
          BlocProvider(
            create: (context) => getIt<RoomCubit>()..watchAllRooms(),
          ),
          BlocProvider(
            create: (context) => getIt<MessageCubit>(),
          ),
        ],
        child: BlocBuilder<RoomCubit, RoomState>(
          builder: (context, state) {
            return state.maybeMap(
              loading: (_) {
                return const Loader();
              },
              orElse: () {
                return Container();
              },
              success: (value) {
                final rooms = value.rooms;
                if (rooms.isEmpty) {
                  return const Center(
                    child: Text("Tidak ada chat"),
                  );
                }

                context.read<MessageCubit>().watchAllMessages(rooms);
                return ListView.builder(
                  itemCount: rooms.length,
                  itemBuilder: (context, index) {
                    final singleRoom = rooms[index];
                    return ListTile(
                      onTap: () {
                        context.router.push(ChatRoute(room: singleRoom));
                      },
                      title: Text(singleRoom.name ?? ""),
                      leading: CircleAvatar(
                        backgroundColor: Colors.amber,
                        backgroundImage:
                            NetworkImage(singleRoom.imageUrl ?? ""),
                      ),
                      subtitle: BlocBuilder<MessageCubit, MessageState>(
                        builder: (context, messageState) {
                          return messageState.maybeMap(
                            orElse: () => const LastRepliedMessageWidget(),
                            onMessagesAndLastMessage: (state) {
                              final lastMessage =
                                  state.lastMessages[singleRoom.id] ??
                                      TextMessage(
                                        id: 'default',
                                        author: const User(id: 'default'),
                                        text: 'No messages yet',
                                        createdAt: DateTime.now()
                                            .millisecondsSinceEpoch,
                                      );
                              return LastRepliedMessageWidget(
                                message: lastMessage,
                                isRead: false,
                              );
                            },
                          );
                        },
                      ),
                    );
                  },
                );
              },
            );
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          context.pushRoute(const FriendRoute());
        },
        child: const Icon(Icons.message),
      ),
    );
  }
}

// Updated widget for displaying the last replied message with read status
class LastRepliedMessageWidget extends StatelessWidget {
  final Message? message;
  final bool isRead;

  const LastRepliedMessageWidget(
      {super.key, this.message, this.isRead = false});

  @override
  Widget build(BuildContext context) {
    String displayText = "No messages yet";
    IconData? icon;

    if (message is TextMessage) {
      displayText = (message as TextMessage).text;
    } else if (message is FileMessage) {
      displayText = "File";
      icon = Icons.attach_file;
    } else if (message is ImageMessage) {
      displayText = "Image";
      icon = Icons.image;
    }

    return Row(
      children: [
        if (icon != null) Icon(icon, size: 16, color: Colors.grey),
        const SizedBox(width: 4),
        Expanded(
          child: Text(
            displayText,
            style: TextStyle(
              color: !isRead ? Colors.grey : Colors.black,
              fontWeight: isRead ? FontWeight.normal : FontWeight.bold,
            ),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ),
      ],
    );
  }
}
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/cache/hive_local_storage.dart';
import 'package:proker/src/core/errors/exceptions.dart';
import 'package:proker/src/core/utils/logger.dart';
import 'package:proker/src/features/event/data/models/get_event_model.dart';

sealed class EventLocalDataSource {
  Future<List<EventModel>> getAllEvent();
}

@LazySingleton(as: EventLocalDataSource)
class EventLocalDataSourceImpl implements EventLocalDataSource {
  final HiveLocalStorage _localStorage;
  const EventLocalDataSourceImpl(this._localStorage);

  @override
  Future<List<EventModel>> getAllEvent() => _getEventFromCache();

  Future<List<EventModel>> _getEventFromCache() async {
    try {
      final response = await _localStorage.load(
        key: "events",
        boxName: "cache",
      );

      if (response is! List) {
        throw CacheException();
      }

      return EventModel.fromMapList(response);
    } catch (e) {
      logger.e(e);
      throw CacheException();
    }
  }
}
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/api/api_url.dart';
import 'package:proker/src/core/errors/exceptions.dart';
import 'package:proker/src/core/utils/logger.dart';
import 'package:proker/src/features/event/data/models/models.dart';

@factoryMethod
sealed class EventRemoteDataSource {
  Future<List<EventModel>> fetchEvent();
  Future<void> createEvent(CreateEventModel model);
  Future<void> updateEvent(UpdateEventModel model);
  Future<void> deleteEvent(DeleteEventModel model);
}

@LazySingleton(as: EventRemoteDataSource)
class EventRemoteDataSourceImpl implements EventRemoteDataSource {
  const EventRemoteDataSourceImpl();

  @override
  Future<List<EventModel>> fetchEvent() => fetchEventFromUrl("");

  Future<List<EventModel>> fetchEventFromUrl(String url) async {
    try {
      final response = await ApiUrl.events.get();

      return EventModel.fromJsonList(response.docs
          .map((e) => {
                "id": e.id,
                "title": e.data()["title"],
                "description": e.data()["description"],
                "status": e.data()["status"],
                "startDate": e.data()["startDate"],
                "endDate": e.data()["endDate"],
                "location": e.data()["location"],
                "createdBy": e.data()["createdBy"],
                "type": e.data()["type"],
                "benefits": e.data()["benefits"],
                "bannerUrl": e.data()["bannerUrl"],
                "category": e.data()["category"],
                "upvoteCount": e.data()["upvoteCount"],
                "documentationUrl": e.data()["documentationUrl"],
                "galleryUrls": e.data()["galleryUrls"],
                "timeline": e.data()["timeline"],
              })
          .toList());
    } catch (e) {
      logger.e(e);
      throw ServerException();
    }
  }

  @override
  Future<void> createEvent(CreateEventModel model) async {
    try {
      await ApiUrl.events.add(model.toMap());
      return;
    } catch (e) {
      logger.e(e);
      throw ServerException();
    }
  }

  @override
  Future<void> deleteEvent(DeleteEventModel model) async {
    try {
      await ApiUrl.events.doc(model.id).delete();
      return;
    } catch (e) {
      logger.e(e);
      throw ServerException();
    }
  }

  @override
  Future<void> updateEvent(UpdateEventModel model) async {
    try {
      await ApiUrl.events.doc(model.id).update(model.toMap());
      return;
    } catch (e) {
      logger.e(e);
      throw ServerException();
    }
  }
}
import 'package:proker/src/features/event/domain/entities/event_entity.dart';

class CreateEventModel extends EventEntity {
  CreateEventModel({
    String? title,
    String? description,
    String? status,
    DateTime? startDate,
    String? location,
    String? createdBy,
    String? type,
    String? benefits,
    String? bannerUrl,
    String? category,
    int? upvoteCount,
    super.documentationUrl,
    super.galleryUrls,
    super.timeline,
  }) : super(
          title: title ?? '',
          description: description ?? '',
          status: status ?? '',
          startDate: startDate ?? DateTime.now(),
          location: location ?? '',
          createdBy: createdBy ?? '',
          type: type ?? '',
          benefits: benefits ?? '',
          bannerUrl: bannerUrl ?? '',
          category: category ?? '',
          upvoteCount: upvoteCount ?? 0,
        );

  Map<String, dynamic> toMap() {
    return {
      "title": title,
      "description": description,
      "status": status,
      "startDate": startDate,
      "location": location,
      "createdBy": createdBy,
      "type": type,
      "benefits": benefits,
      "bannerUrl": bannerUrl,
      "category": category,
      "upvoteCount": upvoteCount,
      "documentationUrl": documentationUrl,
      "galleryUrls": galleryUrls,
      "timeline": timeline,
    };
  }

  CreateEventModel copyWith({
    String? title,
    String? description,
    String? status,
    DateTime? startDate,
    String? location,
    String? createdBy,
    String? type,
    String? benefits,
    String? bannerUrl,
    String? category,
    int? upvoteCount,
    String? documentationUrl,
    List<String>? galleryUrls,
    List<TimelineEntry>? timeline,
  }) {
    return CreateEventModel(
      title: title ?? this.title,
      description: description ?? this.description,
      status: status ?? this.status,
      startDate: startDate ?? this.startDate,
      location: location ?? this.location,
      createdBy: createdBy ?? this.createdBy,
      type: type ?? this.type,
      benefits: benefits ?? this.benefits,
      bannerUrl: bannerUrl ?? this.bannerUrl,
      category: category ?? this.category,
      upvoteCount: upvoteCount ?? this.upvoteCount,
      documentationUrl: documentationUrl ?? this.documentationUrl,
      galleryUrls: galleryUrls ?? this.galleryUrls,
      timeline: timeline ?? this.timeline,
    );
  }
}
import 'package:proker/src/features/event/domain/entities/event_entity.dart';

class DeleteEventModel extends EventEntity {
  const DeleteEventModel({
    required String id,
  }) : super(id: id);
}
import 'package:proker/src/features/event/domain/entities/event_entity.dart';

class EventModel extends EventEntity {
  const EventModel({
    super.id,
    super.title,
    super.description,
    super.status,
    super.startDate,
    super.endDate,
    super.location,
    super.createdBy,
    super.type,
    super.benefits,
    super.bannerUrl,
    super.category,
    super.upvoteCount,
    super.documentationUrl,
    super.galleryUrls,
    super.timeline,
  });

  factory EventModel.fromJson(Map<String, dynamic> json) {
    return EventModel(
      id: json["id"] as String?,
      title: json["title"] as String?,
      description: json["description"] as String?,
      status: json["status"] as String?,
      startDate: json["start_date"] != null
          ? DateTime.parse(json["start_date"] as String)
          : null,
      endDate: json["end_date"] != null
          ? DateTime.parse(json["end_date"] as String)
          : null,
      location: json["location"] as String?,
      createdBy: json["created_by"] as String?,
      type: json["type"] as String?,
      benefits: json["benefits"] as String?,
      bannerUrl: json["banner_url"] as String?,
      category: json["category"] as String?,
      upvoteCount: json["upvote_count"] as int?,
      documentationUrl: json["documentation_url"] as String?,
      galleryUrls: (json["gallery_urls"] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
      timeline: (json["timeline"] as List<dynamic>?)
          ?.map((e) => TimelineEntry.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  factory EventModel.fromMap(Map<dynamic, dynamic> map) {
    return EventModel(
      id: map["id"] as String?,
      title: map["title"] as String?,
      description: map["description"] as String?,
      status: map["status"] as String?,
      startDate: map["start_date"] != null
          ? DateTime.parse(map["start_date"] as String)
          : null,
      endDate: map["end_date"] != null
          ? DateTime.parse(map["end_date"] as String)
          : null,
      location: map["location"] as String?,
      createdBy: map["created_by"] as String?,
      type: map["type"] as String?,
      benefits: map["benefits"] as String?,
      bannerUrl: map["banner_url"] as String?,
      category: map["category"] as String?,
      upvoteCount: map["upvote_count"] as int?,
      documentationUrl: map["documentation_url"] as String?,
      galleryUrls: (map["gallery_urls"] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
      timeline: (map["timeline"] as List<dynamic>?)
          ?.map((e) => TimelineEntry.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  static List<EventModel> fromMapList(List<dynamic> mapList) {
    return mapList.map((map) => EventModel.fromMap(map)).toList();
  }

  Map<String, dynamic> toMap() {
    return {
      "id": id,
      "title": title,
      "description": description,
      "status": status,
      "start_date": startDate?.toIso8601String(),
      "end_date": endDate?.toIso8601String(),
      "location": location,
      "created_by": createdBy,
      "type": type,
      "benefits": benefits,
      "banner_url": bannerUrl,
      "category": category,
      "upvote_count": upvoteCount,
      "documentation_url": documentationUrl,
      "gallery_urls": galleryUrls,
      "timeline": timeline?.map((e) => e.toMap()).toList(),
    };
  }

  static List<EventModel> fromJsonList(List<dynamic> jsonList) {
    return jsonList.map((json) => EventModel.fromJson(json)).toList();
  }

  static List<Map<String, dynamic>> toMapList(List<EventModel> eventList) {
    return eventList.map((event) => event.toMap()).toList();
  }
}
export 'create_event_model.dart';
export 'delete_event_model.dart';
export 'get_event_model.dart';
export 'update_event_model.dart';
import 'package:proker/src/features/event/domain/entities/event_entity.dart';

class UpdateEventModel extends EventEntity {
  UpdateEventModel({
    String? id,
    String? title,
    String? description,
    String? status,
    DateTime? startDate,
    String? location,
    String? createdBy,
    String? type,
    String? benefits,
    String? bannerUrl,
    String? category,
    int? upvoteCount,
    super.documentationUrl,
    super.galleryUrls,
    super.timeline,
  }) : super(
          id: id ?? '',
          title: title ?? '',
          description: description ?? '',
          status: status ?? '',
          startDate: startDate ?? DateTime.now(),
          location: location ?? '',
          createdBy: createdBy ?? '',
          type: type ?? '',
          benefits: benefits ?? '',
          bannerUrl: bannerUrl ?? '',
          category: category ?? '',
          upvoteCount: upvoteCount ?? 0,
        );

  Map<String, dynamic> toMap() {
    return {
      "id": id,
      "title": title,
      "description": description,
      "status": status,
      "startDate": startDate,
      "location": location,
      "createdBy": createdBy,
      "type": type,
      "benefits": benefits,
      "bannerUrl": bannerUrl,
      "category": category,
      "upvoteCount": upvoteCount,
      "documentationUrl": documentationUrl,
      "galleryUrls": galleryUrls,
      "timeline": timeline,
    };
  }
}
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/cache/hive_local_storage.dart';
import 'package:proker/src/core/errors/exceptions.dart';
import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/core/network/network_info.dart';
import 'package:proker/src/features/event/data/datasources/event_local_datasource.dart';
import 'package:proker/src/features/event/data/datasources/event_remote_datasource.dart';
import 'package:proker/src/features/event/data/models/models.dart';
import 'package:proker/src/features/event/domain/entities/event_entity.dart';
import 'package:proker/src/features/event/domain/repositories/event_repository.dart';
import 'package:proker/src/features/event/domain/usecases/usecase_params.dart';

@LazySingleton(as: EventRepository)
class EventRepositoryImpl implements EventRepository {
  final EventRemoteDataSource _remoteDataSource;
  final EventLocalDataSource _localDataSource;
  final NetworkInfo _networkInfo;
  final HiveLocalStorage _localStorage;
  const EventRepositoryImpl(
    this._remoteDataSource,
    this._localDataSource,
    this._networkInfo,
    this._localStorage,
  );

  @override
  Future<Either<Failure, void>> create(CreateEventParams params) async {
    try {
      final model = CreateEventModel(
        title: params.title,
        description: params.description,
        status: params.status,
        startDate: params.startDate,
        location: params.location,
        createdBy: params.createdBy,
        type: params.type,
        benefits: params.benefits,
        bannerUrl: params.bannerUrl,
        category: params.category,
        upvoteCount: params.upvoteCount,
      );

      final result = await _remoteDataSource.createEvent(model);

      return Right(result);
    } on ServerException {
      return Left(ServerFailure());
    }
  }

  @override
  Future<Either<Failure, List<EventEntity>>> getAll() {
    return _networkInfo.check<List<EventEntity>>(
      connected: () async {
        try {
          final listEvent = await _remoteDataSource.fetchEvent();
          await _localStorage.save(
            key: "events",
            value: EventModel.toMapList(listEvent),
            boxName: "cache",
          );

          return Right(listEvent);
        } on ServerException {
          return Left(ServerFailure());
        }
      },
      notConnected: () async {
        try {
          final listEvent = await _localDataSource.getAllEvent();

          return Right(listEvent);
        } on CacheException {
          return Left(CacheFailure());
        }
      },
    );
  }

  @override
  Future<Either<Failure, void>> delete(DeleteEventParams params) async {
    try {
      final model = DeleteEventModel(
        id: params.id,
      );

      final result = await _remoteDataSource.deleteEvent(model);

      return Right(result);
    } on ServerException {
      return Left(ServerFailure());
    }
  }

  @override
  Future<Either<Failure, void>> update(UpdateEventParams params) async {
    try {
      final model = UpdateEventModel(
        id: params.id,
        title: params.title,
        description: params.description,
        status: params.status,
        startDate: params.startDate,
        location: params.location,
        createdBy: params.createdBy,
        type: params.type,
        benefits: params.benefits,
        bannerUrl: params.bannerUrl,
        category: params.category,
        upvoteCount: params.upvoteCount,
      );

      final result = await _remoteDataSource.updateEvent(model);

      return Right(result);
    } on ServerException {
      return Left(ServerFailure());
    }
  }
}
import 'package:equatable/equatable.dart';

class EventEntity extends Equatable {
  final String? id;
  final String? title;
  final String? description;
  final String? status;
  final DateTime? startDate;
  final DateTime? endDate;
  final String? location;
  final String? createdBy;
  final String? type;
  final String? benefits;
  final String? bannerUrl;
  final String? category;
  final int? upvoteCount;
  final String? documentationUrl;
  final List<String>? galleryUrls;
  final List<TimelineEntry>? timeline;

  const EventEntity({
    this.id,
    this.title,
    this.description,
    this.status,
    this.startDate,
    this.endDate,
    this.location,
    this.createdBy,
    this.type,
    this.benefits,
    this.bannerUrl,
    this.category,
    this.upvoteCount,
    this.documentationUrl,
    this.galleryUrls,
    this.timeline,
  });

  @override
  List<Object?> get props {
    return [
      id,
      title,
      description,
      status,
      startDate,
      endDate,
      location,
      createdBy,
      type,
      benefits,
      bannerUrl,
      category,
      upvoteCount,
      documentationUrl,
      galleryUrls,
      timeline,
    ];
  }
}

class TimelineEntry extends Equatable {
  final DateTime? createdAt;
  final String? status;

  const TimelineEntry({
    this.createdAt,
    this.status,
  });

  @override
  List<Object?> get props {
    return [
      createdAt,
      status,
    ];
  }

  factory TimelineEntry.fromJson(Map<String, dynamic> json) {
    return TimelineEntry(
      createdAt: DateTime.parse(json["created_at"] as String),
      status: json["status"] as String,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      "created_at": createdAt,
      "status": status,
    };
  }
}
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/features/event/domain/entities/event_entity.dart';
import 'package:proker/src/features/event/domain/usecases/usecase_params.dart';

@factoryMethod
abstract class EventRepository {
  Future<Either<Failure, void>> create(CreateEventParams params);
  Future<Either<Failure, void>> delete(DeleteEventParams params);
  Future<Either<Failure, List<EventEntity>>> getAll();
  Future<Either<Failure, void>> update(UpdateEventParams params);
}
import 'package:equatable/equatable.dart';
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/core/usecase/usecase.dart';
import 'package:proker/src/features/event/domain/repositories/event_repository.dart';

@lazySingleton
class CreateEventUseCase implements UseCase<void, Params> {
  final EventRepository _repository;
  const CreateEventUseCase(this._repository);

  @override
  Future<Either<Failure, void>> call(Params params) async {
    return await _repository.create(params);
  }
}

class Params extends Equatable {
  final String? id;
  final String? title;
  final String? description;
  final String? status;
  final DateTime? startDate;
  final DateTime? endDate;
  final String? location;
  final String? createdBy;
  final String? type;
  final String? benefits;
  final String? bannerUrl;
  final String? category;
  final int? upvoteCount;
  final String? documentationUrl;
  final List<String>? galleryUrls;

  const Params({
    this.id,
    this.title,
    this.description,
    this.status,
    this.startDate,
    this.endDate,
    this.location,
    this.createdBy,
    this.type,
    this.benefits,
    this.bannerUrl,
    this.category,
    this.upvoteCount,
    this.documentationUrl,
    this.galleryUrls,
  });

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        status,
        startDate,
        endDate,
        location,
        createdBy,
        type,
        benefits,
        bannerUrl,
        category,
        upvoteCount,
        documentationUrl,
        galleryUrls,
      ];
}
import 'package:equatable/equatable.dart';
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';

import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/core/usecase/usecase.dart';
import 'package:proker/src/features/event/domain/repositories/event_repository.dart';

@lazySingleton
class DeleteEventUseCase implements UseCase<void, Params> {
  final EventRepository _repository;
  const DeleteEventUseCase(this._repository);

  @override
  Future<Either<Failure, void>> call(Params params) async {
    if (params.id == "") {
      return Left(EmptyFailure());
    }

    return await _repository.delete(params);
  }
}

class Params extends Equatable {
  final String id;

  const Params({
    required this.id,
  });

  @override
  List<Object?> get props => [id];
}
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';

import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/core/usecase/usecase.dart';
import 'package:proker/src/features/event/domain/entities/event_entity.dart';
import 'package:proker/src/features/event/domain/repositories/event_repository.dart';

@lazySingleton
class GetEventListUseCase implements UseCase<List<EventEntity>, NoParams> {
  final EventRepository _repository;
  const GetEventListUseCase(this._repository);

  @override
  Future<Either<Failure, List<EventEntity>>> call(NoParams params) async {
    return await _repository.getAll();
  }
}
import 'package:equatable/equatable.dart';
import 'package:fpdart/fpdart.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/errors/failures.dart';
import 'package:proker/src/core/usecase/usecase.dart';
import 'package:proker/src/features/event/domain/repositories/event_repository.dart';

@lazySingleton
class UpdateEventUseCase implements UseCase<void, Params> {
  final EventRepository _repository;
  const UpdateEventUseCase(this._repository);

  @override
  Future<Either<Failure, void>> call(Params params) async {
    if (params.id == "") {
      return Left(EmptyFailure());
    }

    return await _repository.update(params);
  }
}

class Params extends Equatable {
  final String? id;
  final String? title;
  final String? description;
  final String? status;
  final DateTime? startDate;
  final DateTime? endDate;
  final String? location;
  final String? createdBy;
  final String? type;
  final String? benefits;
  final String? bannerUrl;
  final String? category;
  final int? upvoteCount;
  final String? documentationUrl;
  final List<String>? galleryUrls;

  const Params({
    this.id,
    this.title,
    this.description,
    this.status,
    this.startDate,
    this.endDate,
    this.location,
    this.createdBy,
    this.type,
    this.benefits,
    this.bannerUrl,
    this.category,
    this.upvoteCount,
    this.documentationUrl,
    this.galleryUrls,
  });

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        status,
        startDate,
        endDate,
        location,
        createdBy,
        type,
        benefits,
        bannerUrl,
        category,
        upvoteCount,
        documentationUrl,
        galleryUrls,
      ];
}
import 'package:proker/src/features/event/domain/usecases/create_event_usecase.dart'
    as create_params;
import 'package:proker/src/features/event/domain/usecases/delete_event_usecase.dart'
    as delete_params;
import 'package:proker/src/features/event/domain/usecases/update_event_usecase.dart'
    as update_params;

typedef CreateEventParams = create_params.Params;
typedef UpdateEventParams = update_params.Params;
typedef DeleteEventParams = delete_params.Params;
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:proker/src/core/usecase/usecase.dart';
import 'package:proker/src/core/utils/failure_converter.dart';
import 'package:proker/src/core/utils/logger.dart';
import 'package:proker/src/features/event/domain/entities/event_entity.dart';
import 'package:proker/src/features/event/domain/usecases/create_event_usecase.dart';
import 'package:proker/src/features/event/domain/usecases/delete_event_usecase.dart';
import 'package:proker/src/features/event/domain/usecases/get_event_list_usecase.dart';
import 'package:proker/src/features/event/domain/usecases/update_event_usecase.dart';
import 'package:proker/src/features/event/domain/usecases/usecase_params.dart';

part 'event_cubit.freezed.dart';
part 'event_state.dart';

@injectable
class EventCubit extends Cubit<EventState> {
  final CreateEventUseCase _createEvent;
  final DeleteEventUseCase _deleteEvent;
  final GetEventListUseCase _getEventList;
  final UpdateEventUseCase _updateEvent;

  EventCubit(
    this._createEvent,
    this._deleteEvent,
    this._getEventList,
    this._updateEvent,
  ) : super(const EventState.initial());

  Future<void> create(CreateEventParams event) async {
    emit(const EventState.createEventLoading());

    final result = await _createEvent.call(
      CreateEventParams(
        title: event.title,
        description: event.description,
        bannerUrl: event.bannerUrl,
        category: event.category,
        createdBy: event.createdBy,
        documentationUrl: event.documentationUrl,
        endDate: event.endDate,
        location: event.location,
        startDate: event.startDate,
        status: event.status,
        benefits: event.benefits,
        type: event.type,
        upvoteCount: event.upvoteCount,
        galleryUrls: event.galleryUrls,
      ),
    );

    result.fold(
      (l) => emit(EventState.createEventFailure(mapFailureToMessage(l))),
      (r) => emit(const EventState.createEventSuccess()),
    );
  }

  Future<void> delete(
    DeleteEventParams event,
  ) async {
    emit(const EventState.deleteEventLoading());

    final result = await _deleteEvent.call(
      DeleteEventParams(
        id: event.id,
      ),
    );

    result.fold(
      (l) => emit(EventState.deleteEventFailure(mapFailureToMessage(l))),
      (r) => emit(const EventState.deleteEventSuccess()),
    );
  }

  Future<void> getAll() async {
    emit(const EventState.getEventListLoading());

    final result = await _getEventList.call(NoParams());

    result.fold(
      (l) => emit(EventState.getEventListFailure(mapFailureToMessage(l))),
      (r) => emit(EventState.getEventListSuccess(r)),
    );
  }

  Future<void> update(
    UpdateEventParams event,
  ) async {
    emit(const EventState.updateEventLoading());

    final result = await _updateEvent.call(
      UpdateEventParams(
        id: event.id,
        title: event.title,
        description: event.description,
        status: event.status,
        startDate: event.startDate,
        endDate: event.endDate,
        location: event.location,
        createdBy: event.createdBy,
        type: event.type,
        benefits: event.benefits,
        bannerUrl: event.bannerUrl,
        category: event.category,
        upvoteCount: event.upvoteCount,
        documentationUrl: event.documentationUrl,
        galleryUrls: event.galleryUrls,
      ),
    );

    result.fold(
      (l) => emit(EventState.updateEventFailure(mapFailureToMessage(l))),
      (r) => emit(const EventState.updateEventSuccess()),
    );
  }

  @override
  Future<void> close() {
    logger.i("===== CLOSE EventCubit =====");
    return super.close();
  }
}
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'event_cubit.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$EventState {
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $EventStateCopyWith<$Res> {
  factory $EventStateCopyWith(
          EventState value, $Res Function(EventState) then) =
      _$EventStateCopyWithImpl<$Res, EventState>;
}

/// @nodoc
class _$EventStateCopyWithImpl<$Res, $Val extends EventState>
    implements $EventStateCopyWith<$Res> {
  _$EventStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc
abstract class _$$EventInitialStateImplCopyWith<$Res> {
  factory _$$EventInitialStateImplCopyWith(_$EventInitialStateImpl value,
          $Res Function(_$EventInitialStateImpl) then) =
      __$$EventInitialStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$EventInitialStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$EventInitialStateImpl>
    implements _$$EventInitialStateImplCopyWith<$Res> {
  __$$EventInitialStateImplCopyWithImpl(_$EventInitialStateImpl _value,
      $Res Function(_$EventInitialStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$EventInitialStateImpl implements EventInitialState {
  const _$EventInitialStateImpl();

  @override
  String toString() {
    return 'EventState.initial()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$EventInitialStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return initial();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return initial?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return initial(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return initial?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial(this);
    }
    return orElse();
  }
}

abstract class EventInitialState implements EventState {
  const factory EventInitialState() = _$EventInitialStateImpl;
}

/// @nodoc
abstract class _$$GetEventListLoadingStateImplCopyWith<$Res> {
  factory _$$GetEventListLoadingStateImplCopyWith(
          _$GetEventListLoadingStateImpl value,
          $Res Function(_$GetEventListLoadingStateImpl) then) =
      __$$GetEventListLoadingStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$GetEventListLoadingStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$GetEventListLoadingStateImpl>
    implements _$$GetEventListLoadingStateImplCopyWith<$Res> {
  __$$GetEventListLoadingStateImplCopyWithImpl(
      _$GetEventListLoadingStateImpl _value,
      $Res Function(_$GetEventListLoadingStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$GetEventListLoadingStateImpl implements GetEventListLoadingState {
  const _$GetEventListLoadingStateImpl();

  @override
  String toString() {
    return 'EventState.getEventListLoading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$GetEventListLoadingStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return getEventListLoading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return getEventListLoading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (getEventListLoading != null) {
      return getEventListLoading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return getEventListLoading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return getEventListLoading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (getEventListLoading != null) {
      return getEventListLoading(this);
    }
    return orElse();
  }
}

abstract class GetEventListLoadingState implements EventState {
  const factory GetEventListLoadingState() = _$GetEventListLoadingStateImpl;
}

/// @nodoc
abstract class _$$GetEventListSuccessStateImplCopyWith<$Res> {
  factory _$$GetEventListSuccessStateImplCopyWith(
          _$GetEventListSuccessStateImpl value,
          $Res Function(_$GetEventListSuccessStateImpl) then) =
      __$$GetEventListSuccessStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({List<EventEntity> data});
}

/// @nodoc
class __$$GetEventListSuccessStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$GetEventListSuccessStateImpl>
    implements _$$GetEventListSuccessStateImplCopyWith<$Res> {
  __$$GetEventListSuccessStateImplCopyWithImpl(
      _$GetEventListSuccessStateImpl _value,
      $Res Function(_$GetEventListSuccessStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? data = null,
  }) {
    return _then(_$GetEventListSuccessStateImpl(
      null == data
          ? _value._data
          : data // ignore: cast_nullable_to_non_nullable
              as List<EventEntity>,
    ));
  }
}

/// @nodoc

class _$GetEventListSuccessStateImpl implements GetEventListSuccessState {
  const _$GetEventListSuccessStateImpl(final List<EventEntity> data)
      : _data = data;

  final List<EventEntity> _data;
  @override
  List<EventEntity> get data {
    if (_data is EqualUnmodifiableListView) return _data;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_data);
  }

  @override
  String toString() {
    return 'EventState.getEventListSuccess(data: $data)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$GetEventListSuccessStateImpl &&
            const DeepCollectionEquality().equals(other._data, _data));
  }

  @override
  int get hashCode =>
      Object.hash(runtimeType, const DeepCollectionEquality().hash(_data));

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$GetEventListSuccessStateImplCopyWith<_$GetEventListSuccessStateImpl>
      get copyWith => __$$GetEventListSuccessStateImplCopyWithImpl<
          _$GetEventListSuccessStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return getEventListSuccess(data);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return getEventListSuccess?.call(data);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (getEventListSuccess != null) {
      return getEventListSuccess(data);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return getEventListSuccess(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return getEventListSuccess?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (getEventListSuccess != null) {
      return getEventListSuccess(this);
    }
    return orElse();
  }
}

abstract class GetEventListSuccessState implements EventState {
  const factory GetEventListSuccessState(final List<EventEntity> data) =
      _$GetEventListSuccessStateImpl;

  List<EventEntity> get data;

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$GetEventListSuccessStateImplCopyWith<_$GetEventListSuccessStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$GetEventListFailureStateImplCopyWith<$Res> {
  factory _$$GetEventListFailureStateImplCopyWith(
          _$GetEventListFailureStateImpl value,
          $Res Function(_$GetEventListFailureStateImpl) then) =
      __$$GetEventListFailureStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String message});
}

/// @nodoc
class __$$GetEventListFailureStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$GetEventListFailureStateImpl>
    implements _$$GetEventListFailureStateImplCopyWith<$Res> {
  __$$GetEventListFailureStateImplCopyWithImpl(
      _$GetEventListFailureStateImpl _value,
      $Res Function(_$GetEventListFailureStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
  }) {
    return _then(_$GetEventListFailureStateImpl(
      null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$GetEventListFailureStateImpl implements GetEventListFailureState {
  const _$GetEventListFailureStateImpl(this.message);

  @override
  final String message;

  @override
  String toString() {
    return 'EventState.getEventListFailure(message: $message)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$GetEventListFailureStateImpl &&
            (identical(other.message, message) || other.message == message));
  }

  @override
  int get hashCode => Object.hash(runtimeType, message);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$GetEventListFailureStateImplCopyWith<_$GetEventListFailureStateImpl>
      get copyWith => __$$GetEventListFailureStateImplCopyWithImpl<
          _$GetEventListFailureStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return getEventListFailure(message);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return getEventListFailure?.call(message);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (getEventListFailure != null) {
      return getEventListFailure(message);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return getEventListFailure(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return getEventListFailure?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (getEventListFailure != null) {
      return getEventListFailure(this);
    }
    return orElse();
  }
}

abstract class GetEventListFailureState implements EventState {
  const factory GetEventListFailureState(final String message) =
      _$GetEventListFailureStateImpl;

  String get message;

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$GetEventListFailureStateImplCopyWith<_$GetEventListFailureStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$CreateEventLoadingStateImplCopyWith<$Res> {
  factory _$$CreateEventLoadingStateImplCopyWith(
          _$CreateEventLoadingStateImpl value,
          $Res Function(_$CreateEventLoadingStateImpl) then) =
      __$$CreateEventLoadingStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$CreateEventLoadingStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$CreateEventLoadingStateImpl>
    implements _$$CreateEventLoadingStateImplCopyWith<$Res> {
  __$$CreateEventLoadingStateImplCopyWithImpl(
      _$CreateEventLoadingStateImpl _value,
      $Res Function(_$CreateEventLoadingStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$CreateEventLoadingStateImpl implements CreateEventLoadingState {
  const _$CreateEventLoadingStateImpl();

  @override
  String toString() {
    return 'EventState.createEventLoading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CreateEventLoadingStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return createEventLoading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return createEventLoading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (createEventLoading != null) {
      return createEventLoading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return createEventLoading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return createEventLoading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (createEventLoading != null) {
      return createEventLoading(this);
    }
    return orElse();
  }
}

abstract class CreateEventLoadingState implements EventState {
  const factory CreateEventLoadingState() = _$CreateEventLoadingStateImpl;
}

/// @nodoc
abstract class _$$CreateEventSuccessStateImplCopyWith<$Res> {
  factory _$$CreateEventSuccessStateImplCopyWith(
          _$CreateEventSuccessStateImpl value,
          $Res Function(_$CreateEventSuccessStateImpl) then) =
      __$$CreateEventSuccessStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$CreateEventSuccessStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$CreateEventSuccessStateImpl>
    implements _$$CreateEventSuccessStateImplCopyWith<$Res> {
  __$$CreateEventSuccessStateImplCopyWithImpl(
      _$CreateEventSuccessStateImpl _value,
      $Res Function(_$CreateEventSuccessStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$CreateEventSuccessStateImpl implements CreateEventSuccessState {
  const _$CreateEventSuccessStateImpl();

  @override
  String toString() {
    return 'EventState.createEventSuccess()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CreateEventSuccessStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return createEventSuccess();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return createEventSuccess?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (createEventSuccess != null) {
      return createEventSuccess();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return createEventSuccess(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return createEventSuccess?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (createEventSuccess != null) {
      return createEventSuccess(this);
    }
    return orElse();
  }
}

abstract class CreateEventSuccessState implements EventState {
  const factory CreateEventSuccessState() = _$CreateEventSuccessStateImpl;
}

/// @nodoc
abstract class _$$CreateEventFailureStateImplCopyWith<$Res> {
  factory _$$CreateEventFailureStateImplCopyWith(
          _$CreateEventFailureStateImpl value,
          $Res Function(_$CreateEventFailureStateImpl) then) =
      __$$CreateEventFailureStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String message});
}

/// @nodoc
class __$$CreateEventFailureStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$CreateEventFailureStateImpl>
    implements _$$CreateEventFailureStateImplCopyWith<$Res> {
  __$$CreateEventFailureStateImplCopyWithImpl(
      _$CreateEventFailureStateImpl _value,
      $Res Function(_$CreateEventFailureStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
  }) {
    return _then(_$CreateEventFailureStateImpl(
      null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$CreateEventFailureStateImpl implements CreateEventFailureState {
  const _$CreateEventFailureStateImpl(this.message);

  @override
  final String message;

  @override
  String toString() {
    return 'EventState.createEventFailure(message: $message)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CreateEventFailureStateImpl &&
            (identical(other.message, message) || other.message == message));
  }

  @override
  int get hashCode => Object.hash(runtimeType, message);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CreateEventFailureStateImplCopyWith<_$CreateEventFailureStateImpl>
      get copyWith => __$$CreateEventFailureStateImplCopyWithImpl<
          _$CreateEventFailureStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return createEventFailure(message);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return createEventFailure?.call(message);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (createEventFailure != null) {
      return createEventFailure(message);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return createEventFailure(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return createEventFailure?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (createEventFailure != null) {
      return createEventFailure(this);
    }
    return orElse();
  }
}

abstract class CreateEventFailureState implements EventState {
  const factory CreateEventFailureState(final String message) =
      _$CreateEventFailureStateImpl;

  String get message;

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CreateEventFailureStateImplCopyWith<_$CreateEventFailureStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UpdateEventLoadingStateImplCopyWith<$Res> {
  factory _$$UpdateEventLoadingStateImplCopyWith(
          _$UpdateEventLoadingStateImpl value,
          $Res Function(_$UpdateEventLoadingStateImpl) then) =
      __$$UpdateEventLoadingStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$UpdateEventLoadingStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$UpdateEventLoadingStateImpl>
    implements _$$UpdateEventLoadingStateImplCopyWith<$Res> {
  __$$UpdateEventLoadingStateImplCopyWithImpl(
      _$UpdateEventLoadingStateImpl _value,
      $Res Function(_$UpdateEventLoadingStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$UpdateEventLoadingStateImpl implements UpdateEventLoadingState {
  const _$UpdateEventLoadingStateImpl();

  @override
  String toString() {
    return 'EventState.updateEventLoading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateEventLoadingStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return updateEventLoading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return updateEventLoading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (updateEventLoading != null) {
      return updateEventLoading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return updateEventLoading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return updateEventLoading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (updateEventLoading != null) {
      return updateEventLoading(this);
    }
    return orElse();
  }
}

abstract class UpdateEventLoadingState implements EventState {
  const factory UpdateEventLoadingState() = _$UpdateEventLoadingStateImpl;
}

/// @nodoc
abstract class _$$UpdateEventSuccessStateImplCopyWith<$Res> {
  factory _$$UpdateEventSuccessStateImplCopyWith(
          _$UpdateEventSuccessStateImpl value,
          $Res Function(_$UpdateEventSuccessStateImpl) then) =
      __$$UpdateEventSuccessStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$UpdateEventSuccessStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$UpdateEventSuccessStateImpl>
    implements _$$UpdateEventSuccessStateImplCopyWith<$Res> {
  __$$UpdateEventSuccessStateImplCopyWithImpl(
      _$UpdateEventSuccessStateImpl _value,
      $Res Function(_$UpdateEventSuccessStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$UpdateEventSuccessStateImpl implements UpdateEventSuccessState {
  const _$UpdateEventSuccessStateImpl();

  @override
  String toString() {
    return 'EventState.updateEventSuccess()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateEventSuccessStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return updateEventSuccess();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return updateEventSuccess?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (updateEventSuccess != null) {
      return updateEventSuccess();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return updateEventSuccess(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return updateEventSuccess?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (updateEventSuccess != null) {
      return updateEventSuccess(this);
    }
    return orElse();
  }
}

abstract class UpdateEventSuccessState implements EventState {
  const factory UpdateEventSuccessState() = _$UpdateEventSuccessStateImpl;
}

/// @nodoc
abstract class _$$UpdateEventFailureStateImplCopyWith<$Res> {
  factory _$$UpdateEventFailureStateImplCopyWith(
          _$UpdateEventFailureStateImpl value,
          $Res Function(_$UpdateEventFailureStateImpl) then) =
      __$$UpdateEventFailureStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String message});
}

/// @nodoc
class __$$UpdateEventFailureStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$UpdateEventFailureStateImpl>
    implements _$$UpdateEventFailureStateImplCopyWith<$Res> {
  __$$UpdateEventFailureStateImplCopyWithImpl(
      _$UpdateEventFailureStateImpl _value,
      $Res Function(_$UpdateEventFailureStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
  }) {
    return _then(_$UpdateEventFailureStateImpl(
      null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$UpdateEventFailureStateImpl implements UpdateEventFailureState {
  const _$UpdateEventFailureStateImpl(this.message);

  @override
  final String message;

  @override
  String toString() {
    return 'EventState.updateEventFailure(message: $message)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateEventFailureStateImpl &&
            (identical(other.message, message) || other.message == message));
  }

  @override
  int get hashCode => Object.hash(runtimeType, message);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$UpdateEventFailureStateImplCopyWith<_$UpdateEventFailureStateImpl>
      get copyWith => __$$UpdateEventFailureStateImplCopyWithImpl<
          _$UpdateEventFailureStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return updateEventFailure(message);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return updateEventFailure?.call(message);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (updateEventFailure != null) {
      return updateEventFailure(message);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return updateEventFailure(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return updateEventFailure?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (updateEventFailure != null) {
      return updateEventFailure(this);
    }
    return orElse();
  }
}

abstract class UpdateEventFailureState implements EventState {
  const factory UpdateEventFailureState(final String message) =
      _$UpdateEventFailureStateImpl;

  String get message;

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$UpdateEventFailureStateImplCopyWith<_$UpdateEventFailureStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DeleteEventLoadingStateImplCopyWith<$Res> {
  factory _$$DeleteEventLoadingStateImplCopyWith(
          _$DeleteEventLoadingStateImpl value,
          $Res Function(_$DeleteEventLoadingStateImpl) then) =
      __$$DeleteEventLoadingStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DeleteEventLoadingStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$DeleteEventLoadingStateImpl>
    implements _$$DeleteEventLoadingStateImplCopyWith<$Res> {
  __$$DeleteEventLoadingStateImplCopyWithImpl(
      _$DeleteEventLoadingStateImpl _value,
      $Res Function(_$DeleteEventLoadingStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$DeleteEventLoadingStateImpl implements DeleteEventLoadingState {
  const _$DeleteEventLoadingStateImpl();

  @override
  String toString() {
    return 'EventState.deleteEventLoading()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DeleteEventLoadingStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return deleteEventLoading();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return deleteEventLoading?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (deleteEventLoading != null) {
      return deleteEventLoading();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return deleteEventLoading(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return deleteEventLoading?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (deleteEventLoading != null) {
      return deleteEventLoading(this);
    }
    return orElse();
  }
}

abstract class DeleteEventLoadingState implements EventState {
  const factory DeleteEventLoadingState() = _$DeleteEventLoadingStateImpl;
}

/// @nodoc
abstract class _$$DeleteEventSuccessStateImplCopyWith<$Res> {
  factory _$$DeleteEventSuccessStateImplCopyWith(
          _$DeleteEventSuccessStateImpl value,
          $Res Function(_$DeleteEventSuccessStateImpl) then) =
      __$$DeleteEventSuccessStateImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DeleteEventSuccessStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$DeleteEventSuccessStateImpl>
    implements _$$DeleteEventSuccessStateImplCopyWith<$Res> {
  __$$DeleteEventSuccessStateImplCopyWithImpl(
      _$DeleteEventSuccessStateImpl _value,
      $Res Function(_$DeleteEventSuccessStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$DeleteEventSuccessStateImpl implements DeleteEventSuccessState {
  const _$DeleteEventSuccessStateImpl();

  @override
  String toString() {
    return 'EventState.deleteEventSuccess()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DeleteEventSuccessStateImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return deleteEventSuccess();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return deleteEventSuccess?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (deleteEventSuccess != null) {
      return deleteEventSuccess();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return deleteEventSuccess(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return deleteEventSuccess?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (deleteEventSuccess != null) {
      return deleteEventSuccess(this);
    }
    return orElse();
  }
}

abstract class DeleteEventSuccessState implements EventState {
  const factory DeleteEventSuccessState() = _$DeleteEventSuccessStateImpl;
}

/// @nodoc
abstract class _$$DeleteEventFailureStateImplCopyWith<$Res> {
  factory _$$DeleteEventFailureStateImplCopyWith(
          _$DeleteEventFailureStateImpl value,
          $Res Function(_$DeleteEventFailureStateImpl) then) =
      __$$DeleteEventFailureStateImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String message});
}

/// @nodoc
class __$$DeleteEventFailureStateImplCopyWithImpl<$Res>
    extends _$EventStateCopyWithImpl<$Res, _$DeleteEventFailureStateImpl>
    implements _$$DeleteEventFailureStateImplCopyWith<$Res> {
  __$$DeleteEventFailureStateImplCopyWithImpl(
      _$DeleteEventFailureStateImpl _value,
      $Res Function(_$DeleteEventFailureStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
  }) {
    return _then(_$DeleteEventFailureStateImpl(
      null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$DeleteEventFailureStateImpl implements DeleteEventFailureState {
  const _$DeleteEventFailureStateImpl(this.message);

  @override
  final String message;

  @override
  String toString() {
    return 'EventState.deleteEventFailure(message: $message)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DeleteEventFailureStateImpl &&
            (identical(other.message, message) || other.message == message));
  }

  @override
  int get hashCode => Object.hash(runtimeType, message);

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$DeleteEventFailureStateImplCopyWith<_$DeleteEventFailureStateImpl>
      get copyWith => __$$DeleteEventFailureStateImplCopyWithImpl<
          _$DeleteEventFailureStateImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function() getEventListLoading,
    required TResult Function(List<EventEntity> data) getEventListSuccess,
    required TResult Function(String message) getEventListFailure,
    required TResult Function() createEventLoading,
    required TResult Function() createEventSuccess,
    required TResult Function(String message) createEventFailure,
    required TResult Function() updateEventLoading,
    required TResult Function() updateEventSuccess,
    required TResult Function(String message) updateEventFailure,
    required TResult Function() deleteEventLoading,
    required TResult Function() deleteEventSuccess,
    required TResult Function(String message) deleteEventFailure,
  }) {
    return deleteEventFailure(message);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function()? getEventListLoading,
    TResult? Function(List<EventEntity> data)? getEventListSuccess,
    TResult? Function(String message)? getEventListFailure,
    TResult? Function()? createEventLoading,
    TResult? Function()? createEventSuccess,
    TResult? Function(String message)? createEventFailure,
    TResult? Function()? updateEventLoading,
    TResult? Function()? updateEventSuccess,
    TResult? Function(String message)? updateEventFailure,
    TResult? Function()? deleteEventLoading,
    TResult? Function()? deleteEventSuccess,
    TResult? Function(String message)? deleteEventFailure,
  }) {
    return deleteEventFailure?.call(message);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function()? getEventListLoading,
    TResult Function(List<EventEntity> data)? getEventListSuccess,
    TResult Function(String message)? getEventListFailure,
    TResult Function()? createEventLoading,
    TResult Function()? createEventSuccess,
    TResult Function(String message)? createEventFailure,
    TResult Function()? updateEventLoading,
    TResult Function()? updateEventSuccess,
    TResult Function(String message)? updateEventFailure,
    TResult Function()? deleteEventLoading,
    TResult Function()? deleteEventSuccess,
    TResult Function(String message)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (deleteEventFailure != null) {
      return deleteEventFailure(message);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(EventInitialState value) initial,
    required TResult Function(GetEventListLoadingState value)
        getEventListLoading,
    required TResult Function(GetEventListSuccessState value)
        getEventListSuccess,
    required TResult Function(GetEventListFailureState value)
        getEventListFailure,
    required TResult Function(CreateEventLoadingState value) createEventLoading,
    required TResult Function(CreateEventSuccessState value) createEventSuccess,
    required TResult Function(CreateEventFailureState value) createEventFailure,
    required TResult Function(UpdateEventLoadingState value) updateEventLoading,
    required TResult Function(UpdateEventSuccessState value) updateEventSuccess,
    required TResult Function(UpdateEventFailureState value) updateEventFailure,
    required TResult Function(DeleteEventLoadingState value) deleteEventLoading,
    required TResult Function(DeleteEventSuccessState value) deleteEventSuccess,
    required TResult Function(DeleteEventFailureState value) deleteEventFailure,
  }) {
    return deleteEventFailure(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(EventInitialState value)? initial,
    TResult? Function(GetEventListLoadingState value)? getEventListLoading,
    TResult? Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult? Function(GetEventListFailureState value)? getEventListFailure,
    TResult? Function(CreateEventLoadingState value)? createEventLoading,
    TResult? Function(CreateEventSuccessState value)? createEventSuccess,
    TResult? Function(CreateEventFailureState value)? createEventFailure,
    TResult? Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult? Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult? Function(UpdateEventFailureState value)? updateEventFailure,
    TResult? Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult? Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult? Function(DeleteEventFailureState value)? deleteEventFailure,
  }) {
    return deleteEventFailure?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(EventInitialState value)? initial,
    TResult Function(GetEventListLoadingState value)? getEventListLoading,
    TResult Function(GetEventListSuccessState value)? getEventListSuccess,
    TResult Function(GetEventListFailureState value)? getEventListFailure,
    TResult Function(CreateEventLoadingState value)? createEventLoading,
    TResult Function(CreateEventSuccessState value)? createEventSuccess,
    TResult Function(CreateEventFailureState value)? createEventFailure,
    TResult Function(UpdateEventLoadingState value)? updateEventLoading,
    TResult Function(UpdateEventSuccessState value)? updateEventSuccess,
    TResult Function(UpdateEventFailureState value)? updateEventFailure,
    TResult Function(DeleteEventLoadingState value)? deleteEventLoading,
    TResult Function(DeleteEventSuccessState value)? deleteEventSuccess,
    TResult Function(DeleteEventFailureState value)? deleteEventFailure,
    required TResult orElse(),
  }) {
    if (deleteEventFailure != null) {
      return deleteEventFailure(this);
    }
    return orElse();
  }
}

abstract class DeleteEventFailureState implements EventState {
  const factory DeleteEventFailureState(final String message) =
      _$DeleteEventFailureStateImpl;

  String get message;

  /// Create a copy of EventState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$DeleteEventFailureStateImplCopyWith<_$DeleteEventFailureStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}
part of 'event_cubit.dart';

@freezed
class EventState with _$EventState {
  const factory EventState.initial() = EventInitialState;

  // States for GetEventList
  const factory EventState.getEventListLoading() = GetEventListLoadingState;
  const factory EventState.getEventListSuccess(List<EventEntity> data) =
      GetEventListSuccessState;
  const factory EventState.getEventListFailure(String message) =
      GetEventListFailureState;

  // States for CreateEvent
  const factory EventState.createEventLoading() = CreateEventLoadingState;
  const factory EventState.createEventSuccess() = CreateEventSuccessState;
  const factory EventState.createEventFailure(String message) =
      CreateEventFailureState;

  // States for UpdateEvent
  const factory EventState.updateEventLoading() = UpdateEventLoadingState;
  const factory EventState.updateEventSuccess() = UpdateEventSuccessState;
  const factory EventState.updateEventFailure(String message) =
      UpdateEventFailureState;

  // States for DeleteEvent
  const factory EventState.deleteEventLoading() = DeleteEventLoadingState;
  const factory EventState.deleteEventSuccess() = DeleteEventSuccessState;
  const factory EventState.deleteEventFailure(String message) =
      DeleteEventFailureState;
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/features/event/domain/usecases/create_event_usecase.dart';
import 'package:proker/src/features/event/presentation/bloc/event/event_cubit.dart';

@RoutePage()
class CreateEventPage extends StatefulWidget {
  const CreateEventPage({super.key});

  @override
  State<CreateEventPage> createState() => _CreateEventPageState();
}

class _CreateEventPageState extends State<CreateEventPage> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController(text: 'Event Title');
  final _descriptionController = TextEditingController(
      text: 'Event Description. This is a sample description.');
  final _locationController =
      TextEditingController(text: 'Event Location. This is a sample location.');
  final _startDateController = TextEditingController(text: '2022-12-31');
  final _endDateController = TextEditingController(text: '2022-12-31');
  final _categoryController = TextEditingController(text: 'Event Category');

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _locationController.dispose();
    _startDateController.dispose();
    _endDateController.dispose();
    _categoryController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider<EventCubit>(
      create: (_) => getIt<EventCubit>(),
      child: BlocBuilder<EventCubit, EventState>(
        builder: (context, state) => Scaffold(
          appBar: AppBar(
            title: const Text('Create Event'),
          ),
          body: BlocListener<EventCubit, EventState>(
            listener: (context, state) {
              state.whenOrNull(
                createEventLoading: () {
                  showDialog(
                    context: context,
                    barrierDismissible: false,
                    builder: (_) =>
                        const Center(child: CircularProgressIndicator()),
                  );
                },
                createEventSuccess: () async {
                  context.router.back();
                  context.router.back();
                },
                createEventFailure: (error) {
                  Navigator.of(context, rootNavigator: true)
                      .pop(); // Close loading dialog
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Failed to create event: $error')),
                  );
                },
              );
            },
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: ListView(
                  children: [
                    TextFormField(
                      controller: _titleController,
                      decoration: const InputDecoration(labelText: 'Title'),
                      validator: (value) => value == null || value.isEmpty
                          ? 'Title is required'
                          : null,
                    ),
                    TextFormField(
                      controller: _descriptionController,
                      decoration:
                          const InputDecoration(labelText: 'Description'),
                      validator: (value) => value == null || value.isEmpty
                          ? 'Description is required'
                          : null,
                    ),
                    TextFormField(
                      controller: _locationController,
                      decoration: const InputDecoration(labelText: 'Location'),
                      validator: (value) => value == null || value.isEmpty
                          ? 'Location is required'
                          : null,
                    ),
                    TextFormField(
                      controller: _startDateController,
                      decoration: const InputDecoration(
                          labelText: 'Start Date (YYYY-MM-DD)'),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Start Date is required';
                        }
                        if (DateTime.tryParse(value) == null) {
                          return 'Invalid date format';
                        }
                        return null;
                      },
                    ),
                    TextFormField(
                      controller: _endDateController,
                      decoration: const InputDecoration(
                          labelText: 'End Date (YYYY-MM-DD)'),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'End Date is required';
                        }
                        if (DateTime.tryParse(value) == null) {
                          return 'Invalid date format';
                        }
                        return null;
                      },
                    ),
                    TextFormField(
                      controller: _categoryController,
                      decoration: const InputDecoration(labelText: 'Category'),
                      validator: (value) => value == null || value.isEmpty
                          ? 'Category is required'
                          : null,
                    ),
                    const SizedBox(height: 20),
                    ElevatedButton(
                      onPressed: () {
                        if (_formKey.currentState?.validate() ?? false) {
                          final params = Params(
                            title: _titleController.text,
                            description: _descriptionController.text,
                            location: _locationController.text,
                            startDate:
                                DateTime.parse(_startDateController.text),
                            endDate: DateTime.parse(_endDateController.text),
                            category: _categoryController.text,
                            createdBy:
                                'currentUserId', // Replace with actual user ID
                          );

                          context.read<EventCubit>().create(params);
                          // context.router.maybePop(true);
                        }
                      },
                      child: const Text('Create Event'),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/core/config/router/app_router.dart';
import 'package:proker/src/core/utils/show_snackbar.dart';
import 'package:proker/src/features/event/domain/entities/event_entity.dart';
import 'package:proker/src/features/event/domain/usecases/usecase_params.dart';
import 'package:proker/src/features/event/presentation/bloc/event/event_cubit.dart';

@RoutePage()
class EventListPage extends StatelessWidget {
  const EventListPage({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => getIt<EventCubit>()..getAll(),
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Event List'),
        ),
        body: BlocListener<EventCubit, EventState>(
          listener: (context, state) {
            if (state is DeleteEventSuccessState) {
              showSnackBar(
                  context, Colors.green, 'Event deleted successfully.');
              context.read<EventCubit>().getAll();
            } else if (state is DeleteEventFailureState) {
              showSnackBar(context, Colors.red, state.message);
            } else if (state is GetEventListFailureState) {
              showSnackBar(context, Colors.red, state.message);
            }
          },
          child: BlocBuilder<EventCubit, EventState>(
            builder: (context, state) {
              if (state is GetEventListLoadingState ||
                  state is DeleteEventLoadingState) {
                return const Center(child: CircularProgressIndicator());
              } else if (state is GetEventListSuccessState) {
                final events = state.data;
                return events.isEmpty
                    ? const Center(child: Text('No events available.'))
                    : ListView.builder(
                        itemCount: events.length,
                        itemBuilder: (context, index) {
                          final event = events[index];
                          return EventCard(event: event);
                        },
                      );
              } else {
                return const Center(child: Text('Unexpected state'));
              }
            },
          ),
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () {
            context.router.push(const CreateEventRoute());
          },
          child: const Icon(Icons.add),
        ),
      ),
    );
  }
}

class EventCard extends StatelessWidget {
  final EventEntity event;

  const EventCard({super.key, required this.event});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: ListTile(
        title: Text(event.title ?? 'No Title'),
        subtitle: Text(event.description ?? 'No Description'),
        trailing: IconButton(
          icon: const Icon(Icons.delete),
          onPressed: () => _deleteEvent(context, event),
        ),
      ),
    );
  }

  void _deleteEvent(BuildContext context, EventEntity event) {
    context.read<EventCubit>().delete(DeleteEventParams(id: event.id ?? ''));
  }
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

@RoutePage()
class EventPage extends StatefulWidget {
  const EventPage({super.key});

  @override
  State<EventPage> createState() => _EventPageState();
}

class _EventPageState extends State<EventPage> {
  String selectedValue = 'Program Kerja'; // Nilai Default Dropdown
  List<String> dropdownItems = ['Program Kerja', 'Pergerakan']; // Opsi Dropdown
  bool isNewSelected = true; // Filter New
  bool isUpcomingSelected = false; // Filter Upcoming
  bool isDoneSelected = false; // Filter Done
  List<String> selectedCategories = []; // Kategori yang dipilih
  TextEditingController searchController =
      TextEditingController(); // Controller untuk search
  String searchText = ''; // Teks yang diinputkan pada search

  // Daftar event
  final List<Map<String, dynamic>> events = [
    {
      'title': 'Himakom E-Sport Championship (HeSC)',
      'description':
          'Kompetisi dibidang e-Sport dalam ruang lingkup HIMAKOM guna menyalurkan minat dan bakat Mahasiswa/i dibidang e-Sport dan mempererat tali silaturahmi antar Mahasiswa/i baik dengan Mahasiswa/i lainnya maupun Alumni.',
      'categories': ['Kompetisi', 'Peminatan', 'Non Akademik'],
      'image': 'assets/images/banner_proker_1.png',
      'jenis': 'Program Kerja',
      'status': 'New',
      'pengelola': 'Seni dan Olahraga',
    },
    {
      'title': 'Speak Up Day',
      'description':
          'Workshop HIMAKOM dengan pembicara yang membahas teknologi baru dan Pekan Kreativitas Mahasiswa.',
      'categories': ['Non Akademik', 'Sosial'],
      'image': 'assets/images/banner_proker_2.png',
      'jenis': 'Program Kerja',
      'status': 'Upcoming',
      'pengelola': 'PSDA',
    },
    {
      'title': 'Kajian Islam Teknologi',
      'description':
          'Kajian tentang hubungan majunya teknologi dan dampaknya terhadap perkembangan agama Islam.',
      'categories': ['Non Akademik', 'Rohani'],
      'image': 'assets/images/banner_proker_3.png',
      'jenis': 'Program Kerja',
      'status': 'Done',
      'pengelola': 'Rohani Islam',
    },
  ];

  // Daftar event yang difilter
  List<Map<String, dynamic>> filteredEvents = [];

  @override
  void initState() {
    super.initState();
    _filterEvents(); // Inisialisasi event yang difilter
    filteredEvents; // Inisialisasi dengan semua event
  }

  void toggleFilter(String label) {
    setState(() {
      if (selectedCategories.contains(label)) {
        selectedCategories.remove(label);
      } else {
        selectedCategories.add(label);
      }
      _filterEvents();
    });
  }

  void _filterEvents() {
    setState(() {
      filteredEvents = events.where((event) {
        final matchesJenis = event['jenis'] == selectedValue;
        final matchesStatus = (isNewSelected && event['status'] == 'New') ||
            (isUpcomingSelected && event['status'] == 'Upcoming') ||
            (isDoneSelected && event['status'] == 'Done');
        final matchesPengelola = selectedCategories.isEmpty ||
            selectedCategories.contains(event['pengelola']);
        final matchesSearch = searchText.isEmpty ||
            event['title'].toLowerCase().contains(searchText) ||
            event['description'].toLowerCase().contains(searchText);
        return matchesJenis &&
            matchesStatus &&
            matchesPengelola &&
            matchesSearch;
      }).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        top: false,
        child: Column(
          children: [
            _buildBlueSection(),
            _buildWhiteSection(),
          ],
        ),
      ),
    );
  }

  Widget _buildBlueSection() {
    return Container(
      color: const Color(0xFF04339B),
      height: 300.0, // Berikan tinggi eksplisit
      width: double.infinity,
      padding: EdgeInsets.only(top: context.i(40.0)),
      child: Column(
        children: [
          const Text(
            'Event Himakom',
            style: _titleTextStyle,
          ),
          _buildDropdownButton(),
          _buildSearchBar(),
          _buildFilterChips(),
        ],
      ),
    );
  }

  Widget _buildWhiteSection() {
    return Expanded(
      child: ListView.builder(
        itemCount: filteredEvents.length, // Jumlah event yang difilter
        itemBuilder: (context, index) {
          final event = filteredEvents[index];
          return Padding(
            padding: EdgeInsets.symmetric(
                vertical: context.h(8.0), horizontal: context.w(16.0)),
            child: EventCard(event: event),
          );
        },
      ),
    );
  }

  Widget _buildDropdownButton() {
    return DropdownButton<String>(
      value: selectedValue,
      items: dropdownItems.map((String item) {
        return DropdownMenuItem<String>(
          value: item,
          child: Text(
            item,
            style: TextStyle(
              color:
                  selectedValue == item ? const Color(0xFF04339B) : Colors.grey,
              fontSize: context.sp(16),
              fontFamily: 'Urbanist',
              fontWeight: FontWeight.bold,
            ),
          ),
        );
      }).toList(),
      onChanged: (String? newValue) {
        setState(() {
          selectedValue = newValue!;
          _filterEvents();
        });
      },
      underline: const SizedBox
          .shrink(), // Menghilangkan underline (border) dari dropdown
      iconEnabledColor: Colors.white, // Mengubah warna segitiga menjadi putih
      dropdownColor: Colors.white, // Warna background dropdown
      selectedItemBuilder: (BuildContext context) {
        return dropdownItems.map((String item) {
          return Container(
            alignment: Alignment.centerLeft,
            child: Text(
              item,
              style: TextStyle(
                color: Colors.white,
                fontSize: context.sp(16),
                fontFamily: 'Urbanist',
                fontWeight: FontWeight.bold,
              ),
            ),
          );
        }).toList();
      },
    );
  }

  Widget _buildSearchBar() {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: context.w(16.0)),
      margin: EdgeInsets.symmetric(
          vertical: context.h(16.0), horizontal: context.w(24.0)),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(
          context.r(8.0),
        ),
      ),
      child: TextField(
        controller: searchController,
        onChanged: (value) {
          setState(() {
            searchText = value.toLowerCase();
            _filterEvents();
          });
        },
        decoration: InputDecoration(
          hintText: 'Cari Event Himakom...',
          hintStyle: TextStyle(
            color: Colors.grey,
            fontSize: context.sp(16),
            fontFamily: 'Urbanist',
          ),
          border: InputBorder.none,
          icon: const Icon(Icons.search),
        ),
      ),
    );
  }

  Widget _buildFilterChips() {
    return Container(
      margin: EdgeInsets.only(
          top: context.h(8.0), left: context.w(8.0), right: context.w(8.0)),
      child: Wrap(
        spacing: 8.0, // Jarak horizontal antar button
        children: [
          _buildFilterButton(),
          _buildFilterChip(
            label: 'New',
            isSelected: isNewSelected,
            onSelected: (bool selected) {
              setState(() {
                isNewSelected = true;
                isDoneSelected = false;
                isUpcomingSelected = false;
                _filterEvents();
              });
            },
          ),
          _buildFilterChip(
            label: 'Upcoming',
            isSelected: isUpcomingSelected,
            onSelected: (bool selected) {
              setState(() {
                isUpcomingSelected = true;
                isNewSelected = false;
                isDoneSelected = false;
                _filterEvents();
              });
            },
          ),
          _buildFilterChip(
            label: 'Done',
            isSelected: isDoneSelected,
            onSelected: (bool selected) {
              setState(() {
                isDoneSelected = true;
                isNewSelected = false;
                isUpcomingSelected = false;
                _filterEvents();
              });
            },
          ),
        ],
      ),
    );
  }

  Widget _buildFilterChip({
    required String label,
    required bool isSelected,
    required ValueChanged<bool> onSelected,
  }) {
    return FilterChip(
      label: Text(
        label,
        style: TextStyle(
          color: isSelected ? const Color(0xFF04339B) : Colors.grey,
          fontSize: context.sp(16),
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.bold,
        ),
      ),
      selected: isSelected,
      onSelected: onSelected,
      backgroundColor: Colors.white,
      selectedColor: Colors.white, // Tetap putih saat dipilih
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(
          context.r(8.0),
        ),
      ),
      showCheckmark: false, // Tidak menampilkan tanda centang
    );
  }

  Widget _buildCustomFilterChip({
    required String label,
    required bool isSelected,
    required ValueChanged<bool> onSelected,
  }) {
    return FilterChip(
      label: Text(
        label,
        style: TextStyle(
          color: isSelected ? Colors.white : Colors.grey,
          fontSize: context.sp(16),
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.bold,
        ),
      ),
      selected: isSelected,
      onSelected: onSelected,
      backgroundColor: isSelected ? const Color(0xFF04339B) : Colors.white,
      selectedColor: const Color(0xFF04339B),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(
          context.r(8.0),
        ),
      ),
      showCheckmark: false,
    );
  }

  Widget _buildFilterButton() {
    return ElevatedButton(
      onPressed: () {
        showModalBottomSheet(
          context: context,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.vertical(
              top: Radius.circular(
                context.r(50),
              ),
            ),
          ),
          builder: (BuildContext context) {
            return StatefulBuilder(
              builder: (BuildContext context, StateSetter setState) {
                return Padding(
                  padding: EdgeInsets.all(context.i(16.0)),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Center(
                        child: Container(
                          width: 200,
                          height: 4,
                          decoration: BoxDecoration(
                            color: const Color(0xFF04339B),
                            borderRadius: BorderRadius.circular(
                              context.r(2),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(
                        height: context.h(16),
                      ),
                      Center(
                        child: Text(
                          'Filtering',
                          style: TextStyle(
                            fontFamily: 'Urbanist',
                            fontSize: context.sp(32),
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      SizedBox(
                        height: context.h(24),
                      ),
                      Text(
                        'DBU',
                        style: TextStyle(
                          fontFamily: 'Urbanist',
                          fontSize: context.sp(18),
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Wrap(
                        spacing: 8.0,
                        children: [
                          _buildCustomFilterChip(
                            label: 'Seni dan Olahraga',
                            isSelected: selectedCategories
                                .contains('Seni dan Olahraga'),
                            onSelected: (bool selected) {
                              setState(() {
                                toggleFilter('Seni dan Olahraga');
                              });
                            },
                          ),
                          _buildCustomFilterChip(
                            label: 'Luar Himpunan',
                            isSelected:
                                selectedCategories.contains('Luar Himpunan'),
                            onSelected: (bool selected) {
                              setState(() {
                                toggleFilter('Luar Himpunan');
                              });
                            },
                          ),
                          _buildCustomFilterChip(
                            label: 'PSDA',
                            isSelected: selectedCategories.contains('PSDA'),
                            onSelected: (bool selected) {
                              setState(() {
                                toggleFilter('PSDA');
                              });
                            },
                          ),
                          _buildCustomFilterChip(
                            label: 'Risetdikti',
                            isSelected:
                                selectedCategories.contains('Risetdikti'),
                            onSelected: (bool selected) {
                              setState(() {
                                toggleFilter('Risetdikti');
                              });
                            },
                          ),
                          _buildCustomFilterChip(
                            label: 'Rohani Islam',
                            isSelected:
                                selectedCategories.contains('Rohani Islam'),
                            onSelected: (bool selected) {
                              setState(() {
                                toggleFilter('Rohani Islam');
                              });
                            },
                          ),
                        ],
                      ),
                      SizedBox(
                        height: context.h(16),
                      ),
                      Text(
                        'Kategori',
                        style: TextStyle(
                          fontFamily: 'Urbanist',
                          fontSize: context.sp(18),
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Wrap(
                        spacing: 8.0,
                        children: [
                          _buildCustomFilterChip(
                            label: 'Non Akademik',
                            isSelected:
                                selectedCategories.contains('Non Akademik'),
                            onSelected: (bool selected) {
                              setState(() {
                                toggleFilter('Non Akademik');
                              });
                            },
                          ),
                          _buildCustomFilterChip(
                            label: 'Akademik',
                            isSelected: selectedCategories.contains('Akademik'),
                            onSelected: (bool selected) {
                              setState(() {
                                toggleFilter('Akademik');
                              });
                            },
                          ),
                          _buildCustomFilterChip(
                            label: 'Kompetisi',
                            isSelected:
                                selectedCategories.contains('Kompetisi'),
                            onSelected: (bool selected) {
                              setState(() {
                                toggleFilter('Kompetisi');
                              });
                            },
                          ),
                          _buildCustomFilterChip(
                            label: 'Sosial',
                            isSelected: selectedCategories.contains('Sosial'),
                            onSelected: (bool selected) {
                              setState(() {
                                toggleFilter('Sosial');
                              });
                            },
                          ),
                          _buildCustomFilterChip(
                            label: 'Rohani',
                            isSelected: selectedCategories.contains('Rohani'),
                            onSelected: (bool selected) {
                              setState(() {
                                toggleFilter('Rohani');
                              });
                            },
                          ),
                        ],
                      ),
                      SizedBox(
                        height: context.h(24),
                      ),
                    ],
                  ),
                );
              },
            );
          },
        );
      },
      style: ElevatedButton.styleFrom(
        padding: EdgeInsets.symmetric(horizontal: context.w(16.0)),
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(
            context.r(8.0),
          ),
        ),
      ),
      child: const Icon(
        Icons.filter_list,
        color: Color(0xFF04339B),
      ),
    );
  }

  static const TextStyle _titleTextStyle = TextStyle(
    color: Colors.white,
    fontSize: 24,
    fontFamily: 'Urbanist',
    fontWeight: FontWeight.bold,
  );
}

class EventCard extends StatelessWidget {
  final Map<String, dynamic> event;

  const EventCard({super.key, required this.event});

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(
          context.r(12),
        ),
      ),
      child: Padding(
        padding: EdgeInsets.all(context.i(16.0)),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Banner event
            Container(
              height: 100,
              width: 340,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(
                  context.r(12),
                ),
                image: DecorationImage(
                  image:
                      AssetImage(event['image']), // Ganti dengan sumber gambar
                  fit: BoxFit.cover,
                ),
              ),
            ),
            SizedBox(
              height: context.h(8),
            ),

            // Elemen kategori event
            Wrap(
              spacing: 6.0,
              children: event['categories'].map<Widget>((category) {
                return Chip(
                  label: Text(
                    category,
                    style: TextStyle(
                      fontFamily: 'Urbanist Bold',
                      fontSize: context.sp(10.0), // Ubah ukuran teks
                      fontWeight: FontWeight.bold, // Ubah ketebalan teks
                      color: Colors.white, // Ubah warna teks
                    ),
                  ),
                  backgroundColor: const Color(0xFF04339B),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(
                      context.r(20.0),
                    ), // Ubah border radius
                  ),
                );
              }).toList(),
            ),
            SizedBox(
              height: context.h(8),
            ),

            // Judul event
            Text(
              event['title'],
              style: TextStyle(
                fontFamily: 'Urbanist Bold',
                fontSize: context.sp(16),
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(
              height: context.h(4),
            ),

            // Deskripsi event
            Text(
              event['description'],
              style: TextStyle(
                fontFamily: 'Urbanist',
                fontSize: context.sp(12),
                color: Colors.grey[600],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:auto_route/auto_route.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:proker/gen/assets.gen.dart';
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/core/config/router/app_router.dart';
import 'package:proker/src/core/config/themes/app_colors.dart';
import 'package:proker/src/features/auth/presentation/bloc/auth/auth_cubit.dart';

@RoutePage()
class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => getIt<AuthCubit>(),
      child: Scaffold(
        body: CustomScrollView(
          slivers: [
            const CustomSliverAppBar(),
            SliverToBoxAdapter(
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const BannerWidget(),
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: context.w(25)),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          SizedBox(height: context.h(20)),
                          const SearchBarWidget(),
                          SizedBox(height: context.h(20)),
                          const CategoriesWidget(),
                          SizedBox(height: context.h(20)),
                        ],
                      ),
                    ),
                    _buildSectionTitle(context, "Event Terpopuler"),
                    const EventListWidget(),
                    _buildSectionTitle(context, "Upcoming Event"),
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: context.w(25)),
                      child: const UpcomingEventListWidget(),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Helper method to build section titles
  Widget _buildSectionTitle(BuildContext context, String title) {
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: context.w(25)),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            title,
            style: TextStyle(
                fontSize: context.sp(18), fontWeight: FontWeight.bold),
          ),
          TextButton(
            onPressed: () {},
            child: Text("View All",
                style: TextStyle(
                    color: const Color(0xFF04339B), fontSize: context.sp(14))),
          ),
        ],
      ),
    );
  }
}

class BannerWidget extends StatelessWidget {
  const BannerWidget({super.key});

  @override
  Widget build(BuildContext context) {
    final List<String> imageUrls = [
      'https://picsum.photos/200/300?random=1',
      'https://picsum.photos/200/300?random=2',
      'https://picsum.photos/200/300?random=3',
    ];

    return Container(
      height: context.h(150),
      width: double.infinity,
      margin: EdgeInsets.only(top: context.h(25)),
      child: CarouselSlider.builder(
        itemCount: imageUrls.length,
        itemBuilder: (context, index, realIndex) {
          return _buildBannerItem(context, imageUrls[index]);
        },
        options: CarouselOptions(
          autoPlay: true,
          enlargeCenterPage: true,
          aspectRatio: 16 / 9,
          onPageChanged: (index, reason) {},
        ),
      ),
    );
  }

  // Helper method to build individual banner items
  Widget _buildBannerItem(BuildContext context, String imageUrl) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.blue[300],
        borderRadius: BorderRadius.circular(context.r(12)),
        image: DecorationImage(
          image: NetworkImage(imageUrl),
          fit: BoxFit.cover,
        ),
      ),
      child: Center(
        child: Text(
          "Tunjukkan Bakatmu di Bidang E-Sport, Himakom!",
          style: TextStyle(
              color: Colors.white,
              fontSize: context.sp(16),
              fontWeight: FontWeight.bold),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}

class SearchBarWidget extends StatelessWidget {
  const SearchBarWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Expanded(
          child: InkWell(
            onTap: () {},
            child: Container(
              width: context.w(250),
              height: context.h(50),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(context.r(12)),
                border: Border.all(width: 1.5, color: const Color(0xFFD6D2D2)),
              ),
              padding: EdgeInsets.symmetric(horizontal: context.w(12)),
              child: Row(
                children: [
                  Assets.icons.icSearch.svg(
                    width: context.w(20),
                    height: context.h(20),
                  ),
                  SizedBox(width: context.w(8)),
                  Text(
                    "Cari Event",
                    style: TextStyle(
                      color: const Color(0xFFD6D2D2),
                      fontWeight: FontWeight.w400,
                      fontSize: context.sp(16),
                      letterSpacing: .8,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
        SizedBox(width: context.w(8)),
        InkWell(
          onTap: () {},
          child: Container(
            height: context.h(50),
            padding: EdgeInsets.all(context.i(12)),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(context.r(12)),
              border: Border.all(width: 1.5, color: const Color(0xFFD6D2D2)),
            ),
            child: Assets.icons.icFilter.svg(
              width: context.w(22),
              height: context.h(16),
            ),
          ),
        ),
      ],
    );
  }
}

class CategoriesWidget extends StatelessWidget {
  const CategoriesWidget({super.key});

  @override
  Widget build(BuildContext context) {
    final categories = [
      {"title": "Wirus", "icon": Icons.monetization_on},
      {"title": "Luhim", "icon": Icons.group},
      {"title": "Senor", "icon": Icons.headphones},
      {"title": "Rohis", "icon": Icons.mosque},
    ];

    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: categories.map((category) {
        return _buildCategoryItem(
            context, category['title'] as String, category['icon'] as IconData);
      }).toList(),
    );
  }

  // Helper method to build individual category items
  Widget _buildCategoryItem(BuildContext context, String title, IconData icon) {
    return Column(
      children: [
        Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(context.r(12)),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.25),
                blurRadius: context.r(4),
                offset: Offset(0, context.h(4)),
              ),
            ],
          ),
          padding: EdgeInsets.all(context.i(14)),
          child: Icon(icon, color: Colors.blue[800], size: context.sp(38)),
        ),
        SizedBox(height: context.h(8)),
        Text(title,
            style: TextStyle(
                fontSize: context.sp(14), fontWeight: FontWeight.bold)),
      ],
    );
  }
}

class EventListWidget extends StatelessWidget {
  const EventListWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: Row(
        children: List.generate(4, (index) {
          return Padding(
            padding: EdgeInsets.only(
                left: index == 0 ? context.w(25) : 0, right: context.w(20)),
            child: const EventCardWidget(),
          );
        }),
      ),
    );
  }
}

class EventCardWidget extends StatelessWidget {
  const EventCardWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(bottom: context.h(20)),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(context.r(10)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: context.r(4),
            offset: Offset(0, context.h(4)),
          ),
        ],
      ),
      width: context.w(220),
      child: InkWell(
        onTap: () async {},
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ClipRRect(
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(context.r(10)),
                topRight: Radius.circular(context.r(10)),
              ),
              child: Image.network(
                'https://picsum.photos/200/300',
                height: context.h(120),
                width: double.infinity,
                fit: BoxFit.cover,
              ),
            ),
            Padding(
              padding: EdgeInsets.symmetric(
                horizontal: context.w(8),
                vertical: context.h(4),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Padding(
                    padding: EdgeInsets.only(top: context.h(8)),
                    child: Wrap(
                      spacing: context.w(4),
                      children: _buildTags(
                          context, ["Kompetisi", "Peminatan", "Game"]),
                    ),
                  ),
                  SizedBox(height: context.h(8)),
                  Text(
                    "Himakom E-sport Championship",
                    style: TextStyle(
                        fontSize: context.sp(16), fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: context.h(4)),
                  Container(
                    padding: EdgeInsets.symmetric(
                      horizontal: context.w(8),
                      vertical: context.h(4),
                    ),
                    decoration: BoxDecoration(
                      color: const Color(0xffffc333),
                      borderRadius: BorderRadius.circular(context.r(4)),
                    ),
                    child: Text(
                      "Proses Pengajuan",
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: context.sp(12),
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  SizedBox(height: context.h(8)),
                  LayoutBuilder(
                    builder: (context, constraints) {
                      return Row(
                        children: [
                          Icon(Icons.group, size: context.sp(23)),
                          SizedBox(width: context.w(6)),
                          Flexible(
                            child: Text("Menyalurkan bakat di bidang e-Sport",
                                overflow: TextOverflow.ellipsis,
                                maxLines: constraints.maxWidth < 200 ? 1 : 2,
                                style: TextStyle(fontSize: context.sp(12))),
                          ),
                        ],
                      );
                    },
                  ),
                  SizedBox(height: context.h(8)),
                  Row(
                    children: [
                      Icon(Icons.thumb_up_alt_outlined, size: context.sp(23)),
                      SizedBox(width: context.w(6)),
                      const Text("457 Upvote"),
                    ],
                  ),
                ],
              ),
            )
          ],
        ),
      ),
    );
  }
}

class UpcomingEventListWidget extends StatelessWidget {
  const UpcomingEventListWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        children: List.generate(4, (index) {
          return const UpcomingEventCard();
        }),
      ),
    );
  }
}

class UpcomingEventCard extends StatelessWidget {
  const UpcomingEventCard({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      height: context.h(150),
      margin: EdgeInsets.only(right: context.w(20), bottom: context.h(20)),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(context.r(10)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: context.r(4),
            offset: Offset(0, context.h(4)),
          ),
        ],
      ),
      child: InkWell(
        onTap: () async {},
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ClipRRect(
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(context.r(10)),
                bottomLeft: Radius.circular(context.r(10)),
              ),
              child: Image.network(
                'https://picsum.photos/200/300?random=1',
                fit: BoxFit.cover,
                width: context.w(140),
                height: context.h(150),
              ),
            ),
            Expanded(
              child: Padding(
                padding: EdgeInsets.all(context.i(8)),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Wrap(
                      spacing: context.w(4),
                      runSpacing: context.h(4),
                      children: _buildTags(
                          context, ["Kompetisi", "Peminatan", "Game"]),
                    ),
                    Text(
                      "Himakom E-sport Championship",
                      style: TextStyle(
                        fontSize: context.sp(14),
                        fontWeight: FontWeight.bold,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    Row(
                      children: [
                        Icon(Icons.calendar_today, size: context.sp(16)),
                        SizedBox(width: context.w(4)),
                        Expanded(
                          child: Text(
                            "Jum'at",
                            style: TextStyle(fontSize: context.sp(11)),
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                      ],
                    ),
                    Row(
                      children: [
                        Icon(Icons.person, size: context.sp(16)),
                        SizedBox(width: context.w(4)),
                        Expanded(
                          child: Text(
                            "Pengembangan SDM",
                            style: TextStyle(fontSize: context.sp(11)),
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                      ],
                    ),
                    Row(
                      children: [
                        Icon(Icons.thumb_up_alt_outlined, size: context.sp(16)),
                        SizedBox(width: context.w(4)),
                        Text(
                          "457 Upvote",
                          style: TextStyle(fontSize: context.sp(11)),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class CustomSliverAppBar extends StatelessWidget {
  const CustomSliverAppBar({super.key});

  @override
  Widget build(BuildContext context) {
    return SliverAppBar(
      pinned: true,
      floating: true,
      backgroundColor: AppColors.primary,
      automaticallyImplyLeading: false,
      flexibleSpace: FlexibleSpaceBar(
        background: Container(
          padding: EdgeInsets.only(left: context.w(25), top: context.h(60)),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                "HIMAKOM EVENTS",
                style: TextStyle(
                  color: Colors.white,
                  fontSize: context.sp(24),
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
      ),
      bottom: PreferredSize(
        preferredSize: Size.fromHeight(context.h(85)),
        child: BlocBuilder<AuthCubit, AuthState>(
          builder: (context, state) {
            if (state is AuthAuthenticatedState) {
              final user = state.data;
              return Container(
                padding: EdgeInsets.only(
                  left: context.w(25),
                  right: context.w(25),
                  bottom: context.h(20),
                ),
                color: AppColors.primary,
                child: Row(
                  children: [
                    CircleAvatar(
                      backgroundImage: NetworkImage(user.imageUrl ?? ''),
                      radius: context.r(24),
                    ),
                    SizedBox(width: context.w(16)),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Halo ${user.name ?? "User"}!',
                          style: TextStyle(
                              color: Colors.white, fontSize: context.sp(18)),
                        ),
                        Row(
                          children: [
                            Icon(
                              Icons.calendar_today,
                              color: Colors.white70,
                              size: context.sp(16),
                            ),
                            SizedBox(width: context.w(4)),
                            const Text(
                              "Jum'at",
                              style: TextStyle(color: Colors.white70),
                            ),
                          ],
                        ),
                      ],
                    ),
                    const Spacer(),
                    Row(
                      children: [
                        InkWell(
                          onTap: () {
                            context.pushRoute(const EventListRoute());
                          },
                          child: Container(
                            padding: EdgeInsets.all(context.i(8)),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(context.r(8)),
                            ),
                            child: Assets.icons.icNotif.svg(
                              width: context.w(20),
                              height: context.h(20),
                              colorFilter: const ColorFilter.mode(
                                  Color(0xFF3785FC), BlendMode.srcIn),
                            ),
                          ),
                        ),
                        SizedBox(width: context.w(12)),
                        InkWell(
                          onTap: () {
                            context.pushRoute(const RoomRoute());
                          },
                          child: Container(
                            padding: EdgeInsets.all(context.i(8)),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(context.r(8)),
                            ),
                            child: Assets.icons.icChat.svg(
                              width: context.w(20),
                              height: context.h(20),
                              colorFilter: const ColorFilter.mode(
                                  Color(0xFF3785FC), BlendMode.srcIn),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            } else {
              return Container(
                padding: EdgeInsets.only(
                  left: context.w(25),
                  right: context.w(25),
                  bottom: context.h(20),
                ),
                color: AppColors.primary,
                child: Row(
                  children: [
                    CircleAvatar(
                      backgroundImage:
                          const AssetImage('assets/images/app_logo.png'),
                      radius: context.r(24),
                    ),
                    SizedBox(width: context.w(16)),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Halo User!',
                          style: TextStyle(
                              color: Colors.white, fontSize: context.sp(18)),
                        ),
                        Row(
                          children: [
                            Icon(
                              Icons.calendar_today,
                              color: Colors.white70,
                              size: context.sp(16),
                            ),
                            SizedBox(width: context.w(4)),
                            const Text(
                              "Jum'at, 25 Oktober 2024",
                              style: TextStyle(color: Colors.white70),
                            ),
                          ],
                        ),
                      ],
                    ),
                    const Spacer(),
                    Row(
                      children: [
                        Container(
                          padding: EdgeInsets.all(context.i(8)),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(context.r(8)),
                          ),
                          child: Assets.icons.icNotif.svg(
                            width: context.w(20),
                            height: context.h(20),
                            colorFilter: const ColorFilter.mode(
                                Color(0xFF3785FC), BlendMode.srcIn),
                          ),
                        ),
                        SizedBox(width: context.w(12)),
                        Container(
                          padding: EdgeInsets.all(context.i(8)),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(context.r(8)),
                          ),
                          child: Assets.icons.icChat.svg(
                            width: context.w(20),
                            height: context.h(20),
                            colorFilter: const ColorFilter.mode(
                                Color(0xFF3785FC), BlendMode.srcIn),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            }
          },
        ),
      ),
    );
  }
}

// Helper method to build tags
List<Widget> _buildTags(BuildContext context, List<String> tags) {
  return tags.map((tag) {
    return Container(
      padding: EdgeInsets.symmetric(
          horizontal: context.w(8), vertical: context.h(4)),
      decoration: BoxDecoration(
        color: AppColors.primary,
        borderRadius: BorderRadius.circular(context.r(4)),
      ),
      child: Text(
        tag,
        style: TextStyle(color: Colors.white, fontSize: context.sp(10)),
      ),
    );
  }).toList();
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:proker/src/core/common/widgets/status_bar/status_bar_widget.dart';
import 'package:proker/src/core/config/router/app_router.dart';
import 'package:proker/src/core/config/themes/app_colors.dart';
import 'package:proker/src/core/utils/show_snackbar.dart';
import 'package:proker/src/features/auth/presentation/bloc/auth/auth_cubit.dart';

@RoutePage()
class ProfilePage extends StatelessWidget {
  const ProfilePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocListener<AuthCubit, AuthState>(
        listener: (context, state) {
          if (state is AuthLogoutSuccessState) {
            context.router.replaceAll([SignInRoute()]);
          } else if (state is AuthLogoutFailureState) {
            showSnackBar(context, Colors.red, state.message);
          }
        },
        child: BlocBuilder<AuthCubit, AuthState>(
          builder: (context, state) {
            return StatusBarWidget(
              brightness: Brightness.dark,
              child: SingleChildScrollView(
                physics: const AlwaysScrollableScrollPhysics(),
                child: Padding(
                  padding: EdgeInsets.symmetric(horizontal: context.w(18)),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(height: context.h(50)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          state is AuthAuthenticatedState
                              ? CircleAvatar(
                                  radius: context.r(18),
                                  backgroundImage: NetworkImage(
                                    state.data.imageUrl ??
                                        "https://via.placeholder.com/150",
                                  ),
                                )
                              : CircleAvatar(
                                  radius: context.r(18),
                                  backgroundColor: Colors.grey,
                                ),
                          SizedBox(width: context.w(18)),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              SizedBox(
                                width: context.w(150),
                                child: Text(
                                  state is AuthAuthenticatedState
                                      ? state.data.name ?? "User"
                                      : "User",
                                  style: TextStyle(
                                    color: const Color(0xFF2C3E50),
                                    fontWeight: FontWeight.w700,
                                    fontSize: context.sp(18),
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                ),
                              ),
                              Text(
                                state is AuthAuthenticatedState
                                    ? state.data.email ?? ""
                                    : "",
                                style: TextStyle(
                                  color: const Color(0xFF7F8C8D),
                                  fontWeight: FontWeight.w400,
                                  fontSize: context.sp(18),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                      Container(
                        width: double.infinity,
                        height: context.h(1),
                        color: const Color(0xFFD5D8DC), // Shadow color
                        margin: EdgeInsets.symmetric(vertical: context.h(18)),
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            "Akun Kamu",
                            style: TextStyle(
                              color: const Color(
                                  0xFF2C3E50), // Dark color for title
                              fontWeight: FontWeight.w700,
                              fontSize: context.sp(18),
                            ),
                          ),
                          SizedBox(height: context.h(18)),
                          InkWell(
                            onTap: () async {},
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Icon(
                                  Icons.person_rounded,
                                  size: 30,
                                  color: Color(0xFFBDC3C7), // Light grey color
                                ),
                                SizedBox(width: context.w(18)),
                                Expanded(
                                  child: Container(
                                    padding:
                                        EdgeInsets.only(bottom: context.h(18)),
                                    decoration: const BoxDecoration(
                                      border: Border(
                                        bottom: BorderSide(
                                          width: 1,
                                          color:
                                              Color(0xFFBDC3C7), // Border color
                                        ),
                                      ),
                                    ),
                                    child: Row(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Text(
                                          "Ubah Profil",
                                          style: TextStyle(
                                            color: const Color(
                                                0xFF2C3E50), // Dark color for item
                                            fontWeight: FontWeight.w400,
                                            fontSize: context.sp(18),
                                          ),
                                        ),
                                        const Icon(
                                          Icons.arrow_forward_ios_rounded,
                                          size: 30,
                                          color:
                                              AppColors.primary, // Splash color
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: context.h(18)),
                          InkWell(
                            onTap: () async {},
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Icon(
                                  Icons.lock_rounded,
                                  size: 30,
                                  color: Color(0xFFBDC3C7), // Light grey color
                                ),
                                SizedBox(width: context.w(18)),
                                Expanded(
                                  child: Container(
                                    padding:
                                        EdgeInsets.only(bottom: context.h(18)),
                                    decoration: const BoxDecoration(
                                      border: Border(
                                        bottom: BorderSide(
                                          width: 1,
                                          color:
                                              Color(0xFFBDC3C7), // Border color
                                        ),
                                      ),
                                    ),
                                    child: Row(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Text(
                                          "Ubah Password",
                                          style: TextStyle(
                                            color: const Color(
                                                0xFF2C3E50), // Dark color for item
                                            fontWeight: FontWeight.w400,
                                            fontSize: context.sp(18),
                                          ),
                                        ),
                                        const Icon(
                                          Icons.arrow_forward_ios_rounded,
                                          size: 30,
                                          color:
                                              AppColors.primary, // Splash color
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: context.h(18)),
                          Text(
                            "Bantuan",
                            style: TextStyle(
                              color: const Color(
                                  0xFF2C3E50), // Dark color for title
                              fontWeight: FontWeight.w700,
                              fontSize: context.sp(18),
                            ),
                          ),
                          SizedBox(height: context.h(18)),
                          InkWell(
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Icon(
                                  Icons.email_rounded,
                                  size: 30,
                                  color: Color(0xFFBDC3C7), // Light grey color
                                ),
                                SizedBox(width: context.w(18)),
                                Expanded(
                                  child: Container(
                                    padding:
                                        EdgeInsets.only(bottom: context.h(18)),
                                    decoration: const BoxDecoration(
                                      border: Border(
                                        bottom: BorderSide(
                                          width: 1,
                                          color:
                                              Color(0xFFBDC3C7), // Border color
                                        ),
                                      ),
                                    ),
                                    child: Row(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Text(
                                          "Kontak Kami",
                                          style: TextStyle(
                                            color: const Color(
                                                0xFF2C3E50), // Dark color for item
                                            fontWeight: FontWeight.w400,
                                            fontSize: context.sp(18),
                                          ),
                                        ),
                                        const Icon(
                                          Icons.arrow_forward_ios_rounded,
                                          size: 30,
                                          color:
                                              AppColors.primary, // Splash color
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: context.h(18)),
                          InkWell(
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Icon(
                                  Icons.report_rounded,
                                  size: 30,
                                  color: Color(0xFFBDC3C7), // Light grey color
                                ),
                                SizedBox(width: context.w(18)),
                                Expanded(
                                  child: Container(
                                    padding:
                                        EdgeInsets.only(bottom: context.h(18)),
                                    decoration: const BoxDecoration(
                                      border: Border(
                                        bottom: BorderSide(
                                          width: 1,
                                          color:
                                              Color(0xFFBDC3C7), // Border color
                                        ),
                                      ),
                                    ),
                                    child: Row(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Text(
                                          "Laporkan Masalah",
                                          style: TextStyle(
                                            color: const Color(
                                                0xFF2C3E50), // Dark color for item
                                            fontWeight: FontWeight.w400,
                                            fontSize: context.sp(18),
                                          ),
                                        ),
                                        const Icon(
                                          Icons.arrow_forward_ios_rounded,
                                          size: 30,
                                          color:
                                              AppColors.primary, // Splash color
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: context.h(18)),
                          Text(
                            "Lainnya",
                            style: TextStyle(
                              color: const Color(
                                  0xFF2C3E50), // Dark color for title
                              fontWeight: FontWeight.w700,
                              fontSize: context.sp(18),
                            ),
                          ),
                          SizedBox(height: context.h(18)),
                          InkWell(
                            onTap: () {},
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Icon(
                                  Icons.library_books_rounded,
                                  size: 30,
                                  color: Color(0xFFBDC3C7), // Light grey color
                                ),
                                SizedBox(width: context.w(18)),
                                Expanded(
                                  child: Container(
                                    padding:
                                        EdgeInsets.only(bottom: context.h(18)),
                                    decoration: const BoxDecoration(
                                      border: Border(
                                        bottom: BorderSide(
                                          width: 1,
                                          color:
                                              Color(0xFFBDC3C7), // Border color
                                        ),
                                      ),
                                    ),
                                    child: Row(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Text(
                                          "Syarat & Ketentuan",
                                          style: TextStyle(
                                            color: const Color(
                                                0xFF2C3E50), // Dark color for item
                                            fontWeight: FontWeight.w400,
                                            fontSize: context.sp(18),
                                          ),
                                        ),
                                        const Icon(
                                          Icons.arrow_forward_ios_rounded,
                                          size: 30,
                                          color:
                                              AppColors.primary, // Splash color
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: context.h(18)),
                          InkWell(
                            onTap: () {
                              context.read<AuthCubit>().logout();
                            },
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Icon(
                                  Icons.logout_rounded,
                                  size: 30,
                                  color:
                                      Color(0xFFE74C3C), // Red color for logout
                                ),
                                SizedBox(width: context.w(18)),
                                Expanded(
                                  child: Container(
                                    padding:
                                        EdgeInsets.only(bottom: context.h(18)),
                                    decoration: const BoxDecoration(
                                      border: Border(
                                        bottom: BorderSide(
                                          width: 1,
                                          color:
                                              Color(0xFFBDC3C7), // Border color
                                        ),
                                      ),
                                    ),
                                    child: Row(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Text(
                                          "Keluar",
                                          style: TextStyle(
                                            color: const Color(
                                                0xFFE74C3C), // Red color for item
                                            fontWeight: FontWeight.w400,
                                            fontSize: context.sp(18),
                                          ),
                                        ),
                                        const Icon(
                                          Icons.arrow_forward_ios_rounded,
                                          size: 30,
                                          color: Color(
                                              0xFFE74C3C), // Red color for icon
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:proker/gen/assets.gen.dart';
import 'package:proker/src/core/common/widgets/status_bar/status_bar_widget.dart';
import 'package:proker/src/core/config/injection/injectable.dart';
import 'package:proker/src/core/config/router/app_router.dart';
import 'package:proker/src/core/config/themes/app_colors.dart';
import 'package:proker/src/features/auth/presentation/bloc/auth/auth_cubit.dart';

@RoutePage()
class SplashPage extends StatelessWidget {
  const SplashPage({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider.value(
      value: getIt<AuthCubit>()..checkSignInStatus(),
      child: BlocListener<AuthCubit, AuthState>(
        listener: (context, state) {
          if (state is AuthAuthenticatedState) {
            context.router.replaceAll([const HomeRoute()]);
          } else if (state is AuthCheckSignInStatusFailureState) {
            Future.delayed(const Duration(seconds: 3)).then((value) {
              if (context.mounted) {
                context.router.replaceAll([SignInRoute()]);
              }
            });
          }
        },
        child: StatusBarWidget(
          color: AppColors.primary,
          child: Scaffold(
            backgroundColor: AppColors.primary,
            body: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  _buildLogo(context),
                  _buildSplashText(context),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  /// Widget to build the logo with responsive width
  Widget _buildLogo(BuildContext context) {
    return Assets.images.appLogo.image(
      width: context.w(200), // Use ScreenUtil extension for width
      fit: BoxFit.fitWidth,
    );
  }

  /// Widget to build the splash text with responsive font size and shadows
  Widget _buildSplashText(BuildContext context) {
    return Text.rich(
      TextSpan(
        children: [
          _buildTextSpan(context, 'Proker', FontWeight.w800),
          _buildTextSpan(context, 'Hub', FontWeight.normal),
        ],
      ),
    );
  }

  /// Helper method to create a TextSpan with text shadow
  TextSpan _buildTextSpan(
      BuildContext context, String text, FontWeight fontWeight) {
    return TextSpan(
      text: text,
      style: TextStyle(
        fontFamily: 'Manrope',
        fontSize:
            context.sp(40), // Responsive font size using ScreenUtil extension
        fontWeight: fontWeight,
        color: Colors.white, // Text color is white
        shadows: _textShadows, // Reused shadow style
      ),
    );
  }

  /// Common shadow effect used for both parts of the text
  List<Shadow> get _textShadows {
    return const [
      Shadow(color: Colors.black, offset: Offset(2, 2)),
      Shadow(color: Colors.black, offset: Offset(-2, -2)),
      Shadow(color: Colors.black, offset: Offset(2, -2)),
      Shadow(color: Colors.black, offset: Offset(-2, 2)),
    ];
  }
}
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:proker/gen/assets.gen.dart';
import 'package:proker/src/core/config/router/app_router.dart';
import 'package:proker/src/core/config/themes/app_colors.dart';

@RoutePage()
class TabPage extends StatelessWidget {
  const TabPage({super.key});

  @override
  Widget build(BuildContext context) {
    return AutoTabsScaffold(
      routes: const [
        HomeRoute(),
        EventRoute(),
        HomeRoute(),
        ProfileRoute(),
      ],
      bottomNavigationBuilder: (_, tabsRouter) {
        return BottomNavigationBar(
          currentIndex: tabsRouter.activeIndex,
          onTap: tabsRouter.setActiveIndex,
          type: BottomNavigationBarType.fixed,
          backgroundColor: Colors.white,
          selectedItemColor: AppColors.primary,
          unselectedItemColor: Colors.grey,
          showSelectedLabels: true,
          showUnselectedLabels: true,
          selectedLabelStyle: const TextStyle(
            fontSize: 13,
            fontWeight: FontWeight.w600,
          ),
          unselectedLabelStyle: const TextStyle(
            fontSize: 13,
            fontWeight: FontWeight.w600,
          ),
          items: _buildBottomNavigationBarItems(tabsRouter),
        );
      },
    );
  }

  List<BottomNavigationBarItem> _buildBottomNavigationBarItems(
      TabsRouter tabsRouter) {
    final items = [
      {'icon': Assets.icons.icHome, 'label': 'Home'},
      {'icon': Assets.icons.icEvent, 'label': 'Event'},
      {'icon': Assets.icons.icFeed, 'label': 'Feed'},
      {'icon': Assets.icons.icProfile, 'label': 'Profile'},
    ];

    return items.asMap().entries.map((entry) {
      final index = entry.key;
      final item = entry.value;
      return BottomNavigationBarItem(
        icon: (item['icon'] as SvgGenImage).svg(
          width: 32,
          height: 32,
          colorFilter: ColorFilter.mode(
            tabsRouter.activeIndex == index ? AppColors.primary : Colors.grey,
            BlendMode.srcIn,
          ),
        ),
        label: item['label'] as String?,
      );
    }).toList();
  }
}

